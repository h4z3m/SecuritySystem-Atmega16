
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  00002e40  00002ed4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  00800178  00800178  00002fec  2**0
                  ALLOC
  3 .stab         00002bbc  00000000  00000000  00002fec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017b7  00000000  00000000  00005ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000735f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000751f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00007733  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00009d45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000b213  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000c520  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000c700  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000ca07  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d421  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__vector_3>
      10:	0c 94 33 10 	jmp	0x2066	; 0x2066 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 00 10 	jmp	0x2000	; 0x2000 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__vector_8>
      24:	0c 94 9a 0f 	jmp	0x1f34	; 0x1f34 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__vector_17>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 67 0f 	jmp	0x1ece	; 0x1ece <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3a       	cpi	r26, 0xA1	; 161
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 34 09 	call	0x1268	; 0x1268 <main>
      8a:	0c 94 1e 17 	jmp	0x2e3c	; 0x2e3c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 7e 16 	jmp	0x2cfc	; 0x2cfc <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 9a 16 	jmp	0x2d34	; 0x2d34 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <Buzzer_init>:

#include "buzzer.h"
#include "gpio.h"
#include <util/delay.h>

void Buzzer_init(void) {
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
     ef2:	83 e0       	ldi	r24, 0x03	; 3
     ef4:	67 e0       	ldi	r22, 0x07	; 7
     ef6:	41 e0       	ldi	r20, 0x01	; 1
     ef8:	0e 94 bf 0b 	call	0x177e	; 0x177e <GPIO_setupPinDirection>
}
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <Buzzer_pulse_ms>:

void Buzzer_pulse_ms(uint32 duration) {
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	62 97       	sbiw	r28, 0x12	; 18
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	6f 87       	std	Y+15, r22	; 0x0f
     f18:	78 8b       	std	Y+16, r23	; 0x10
     f1a:	89 8b       	std	Y+17, r24	; 0x11
     f1c:	9a 8b       	std	Y+18, r25	; 0x12
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
     f1e:	83 e0       	ldi	r24, 0x03	; 3
     f20:	67 e0       	ldi	r22, 0x07	; 7
     f22:	41 e0       	ldi	r20, 0x01	; 1
     f24:	0e 94 aa 0c 	call	0x1954	; 0x1954 <GPIO_writePin>
	_delay_ms(duration);
     f28:	6f 85       	ldd	r22, Y+15	; 0x0f
     f2a:	78 89       	ldd	r23, Y+16	; 0x10
     f2c:	89 89       	ldd	r24, Y+17	; 0x11
     f2e:	9a 89       	ldd	r25, Y+18	; 0x12
     f30:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	8b 87       	std	Y+11, r24	; 0x0b
     f3a:	9c 87       	std	Y+12, r25	; 0x0c
     f3c:	ad 87       	std	Y+13, r26	; 0x0d
     f3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f40:	6b 85       	ldd	r22, Y+11	; 0x0b
     f42:	7c 85       	ldd	r23, Y+12	; 0x0c
     f44:	8d 85       	ldd	r24, Y+13	; 0x0d
     f46:	9e 85       	ldd	r25, Y+14	; 0x0e
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	4a ef       	ldi	r20, 0xFA	; 250
     f4e:	54 e4       	ldi	r21, 0x44	; 68
     f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	8f 83       	std	Y+7, r24	; 0x07
     f5a:	98 87       	std	Y+8, r25	; 0x08
     f5c:	a9 87       	std	Y+9, r26	; 0x09
     f5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f60:	6f 81       	ldd	r22, Y+7	; 0x07
     f62:	78 85       	ldd	r23, Y+8	; 0x08
     f64:	89 85       	ldd	r24, Y+9	; 0x09
     f66:	9a 85       	ldd	r25, Y+10	; 0x0a
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 e8       	ldi	r20, 0x80	; 128
     f6e:	5f e3       	ldi	r21, 0x3F	; 63
     f70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f74:	88 23       	and	r24, r24
     f76:	2c f4       	brge	.+10     	; 0xf82 <Buzzer_pulse_ms+0x80>
		__ticks = 1;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	9e 83       	std	Y+6, r25	; 0x06
     f7e:	8d 83       	std	Y+5, r24	; 0x05
     f80:	3f c0       	rjmp	.+126    	; 0x1000 <Buzzer_pulse_ms+0xfe>
	else if (__tmp > 65535)
     f82:	6f 81       	ldd	r22, Y+7	; 0x07
     f84:	78 85       	ldd	r23, Y+8	; 0x08
     f86:	89 85       	ldd	r24, Y+9	; 0x09
     f88:	9a 85       	ldd	r25, Y+10	; 0x0a
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	3f ef       	ldi	r19, 0xFF	; 255
     f8e:	4f e7       	ldi	r20, 0x7F	; 127
     f90:	57 e4       	ldi	r21, 0x47	; 71
     f92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f96:	18 16       	cp	r1, r24
     f98:	4c f5       	brge	.+82     	; 0xfec <Buzzer_pulse_ms+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f9a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f9c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	40 e2       	ldi	r20, 0x20	; 32
     fa8:	51 e4       	ldi	r21, 0x41	; 65
     faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	bc 01       	movw	r22, r24
     fb4:	cd 01       	movw	r24, r26
     fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	9e 83       	std	Y+6, r25	; 0x06
     fc0:	8d 83       	std	Y+5, r24	; 0x05
     fc2:	0f c0       	rjmp	.+30     	; 0xfe2 <Buzzer_pulse_ms+0xe0>
     fc4:	88 ec       	ldi	r24, 0xC8	; 200
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	9c 83       	std	Y+4, r25	; 0x04
     fca:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	9c 81       	ldd	r25, Y+4	; 0x04
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	f1 f7       	brne	.-4      	; 0xfd0 <Buzzer_pulse_ms+0xce>
     fd4:	9c 83       	std	Y+4, r25	; 0x04
     fd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd8:	8d 81       	ldd	r24, Y+5	; 0x05
     fda:	9e 81       	ldd	r25, Y+6	; 0x06
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	9e 83       	std	Y+6, r25	; 0x06
     fe0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe2:	8d 81       	ldd	r24, Y+5	; 0x05
     fe4:	9e 81       	ldd	r25, Y+6	; 0x06
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	69 f7       	brne	.-38     	; 0xfc4 <Buzzer_pulse_ms+0xc2>
     fea:	14 c0       	rjmp	.+40     	; 0x1014 <Buzzer_pulse_ms+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fec:	6f 81       	ldd	r22, Y+7	; 0x07
     fee:	78 85       	ldd	r23, Y+8	; 0x08
     ff0:	89 85       	ldd	r24, Y+9	; 0x09
     ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	9e 83       	std	Y+6, r25	; 0x06
     ffe:	8d 83       	std	Y+5, r24	; 0x05
    1000:	8d 81       	ldd	r24, Y+5	; 0x05
    1002:	9e 81       	ldd	r25, Y+6	; 0x06
    1004:	9a 83       	std	Y+2, r25	; 0x02
    1006:	89 83       	std	Y+1, r24	; 0x01
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	9a 81       	ldd	r25, Y+2	; 0x02
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <Buzzer_pulse_ms+0x10a>
    1010:	9a 83       	std	Y+2, r25	; 0x02
    1012:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    1014:	83 e0       	ldi	r24, 0x03	; 3
    1016:	67 e0       	ldi	r22, 0x07	; 7
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	0e 94 aa 0c 	call	0x1954	; 0x1954 <GPIO_writePin>
}
    101e:	62 96       	adiw	r28, 0x12	; 18
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <Buzzer_ON>:

void Buzzer_ON(void) {
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
    1038:	83 e0       	ldi	r24, 0x03	; 3
    103a:	67 e0       	ldi	r22, 0x07	; 7
    103c:	41 e0       	ldi	r20, 0x01	; 1
    103e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <GPIO_writePin>
}
    1042:	cf 91       	pop	r28
    1044:	df 91       	pop	r29
    1046:	08 95       	ret

00001048 <Buzzer_OFF>:

void Buzzer_OFF(void) {
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    1050:	83 e0       	ldi	r24, 0x03	; 3
    1052:	67 e0       	ldi	r22, 0x07	; 7
    1054:	40 e0       	ldi	r20, 0x00	; 0
    1056:	0e 94 aa 0c 	call	0x1954	; 0x1954 <GPIO_writePin>
}
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	08 95       	ret

00001060 <Control_Delay_Callback>:

/*
 * Description :
 * Callback function for Timer delay interrupt.
 */
void Control_Delay_Callback(void) {
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
	static uint8 tick = 0;
	/* Increment ticks every interrupt until it equals specified ticks */
	if (tick == timer_ticks) {
    1068:	90 91 8f 01 	lds	r25, 0x018F
    106c:	80 91 8d 01 	lds	r24, 0x018D
    1070:	98 17       	cp	r25, r24
    1072:	31 f4       	brne	.+12     	; 0x1080 <Control_Delay_Callback+0x20>
		/* Reset tick since it's static variable */
		tick = 0;
    1074:	10 92 8f 01 	sts	0x018F, r1
		/* Set flag when ticks are over to end the delay*/
		delay_over = TRUE;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	80 93 8e 01 	sts	0x018E, r24
    107e:	05 c0       	rjmp	.+10     	; 0x108a <Control_Delay_Callback+0x2a>
	} else {
		++tick;
    1080:	80 91 8f 01 	lds	r24, 0x018F
    1084:	8f 5f       	subi	r24, 0xFF	; 255
    1086:	80 93 8f 01 	sts	0x018F, r24
	}
}
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <delay_sec>:

/*
 * Description :
 * Delay function of minimum delay of 1s
 */
static void delay_sec(uint8 a_sec) {
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	0f 92       	push	r0
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	89 83       	std	Y+1, r24	; 0x01
	 *
	 * Tdelay = (Prescaler/FCPU) * no. of ticks * compare_value
	 * */
	/* Calculate no. of timer ticks needed for a particular delay of 's' seconds,
	 * round the result to avoid getting 0 ticks when it yields 0.99 */
	timer_ticks = (float) round(
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	88 2f       	mov	r24, r24
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	aa 27       	eor	r26, r26
    10a4:	97 fd       	sbrc	r25, 7
    10a6:	a0 95       	com	r26
    10a8:	ba 2f       	mov	r27, r26
    10aa:	bc 01       	movw	r22, r24
    10ac:	cd 01       	movw	r24, r26
    10ae:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	bc 01       	movw	r22, r24
    10b8:	cd 01       	movw	r24, r26
    10ba:	2e ec       	ldi	r18, 0xCE	; 206
    10bc:	3b ef       	ldi	r19, 0xFB	; 251
    10be:	4f e7       	ldi	r20, 0x7F	; 127
    10c0:	5f e3       	ldi	r21, 0x3F	; 63
    10c2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	bc 01       	movw	r22, r24
    10cc:	cd 01       	movw	r24, r26
    10ce:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <round>
    10d2:	dc 01       	movw	r26, r24
    10d4:	cb 01       	movw	r24, r22
    10d6:	bc 01       	movw	r22, r24
    10d8:	cd 01       	movw	r24, r26
    10da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10de:	dc 01       	movw	r26, r24
    10e0:	cb 01       	movw	r24, r22
    10e2:	80 93 8d 01 	sts	0x018D, r24
			((a_sec / ((TIMER_PRESCALER_VALUE / F_CPU) * TIMER_TOP_VALUE))));

	/* Reset timer value before starting */
	Timer_resetTimerValue(TIMER1_ID);
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Timer_resetTimerValue>
	/* Start timer count */
	Timer_resume(TIMER1_ID);
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	0e 94 9d 12 	call	0x253a	; 0x253a <Timer_resume>
	/* Poll for flag */
	while (!delay_over)
    10f2:	80 91 8e 01 	lds	r24, 0x018E
    10f6:	88 23       	and	r24, r24
    10f8:	e1 f3       	breq	.-8      	; 0x10f2 <delay_sec+0x62>
		;
	/* Stop timer */
	Timer_stop(TIMER1_ID);
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	0e 94 66 12 	call	0x24cc	; 0x24cc <Timer_stop>
	/* Reset flag for next delay */
	delay_over = FALSE;
    1100:	10 92 8e 01 	sts	0x018E, r1

}
    1104:	0f 90       	pop	r0
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <pass_compare>:
/*
 * Description :
 * Compares 2 passwords and returns true if they match exactly, false if otherwise.
 */
static boolean pass_compare(const uint8 *a_arr1, const uint8 *a_arr2) {
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	00 d0       	rcall	.+0      	; 0x1112 <pass_compare+0x6>
    1112:	00 d0       	rcall	.+0      	; 0x1114 <pass_compare+0x8>
    1114:	00 d0       	rcall	.+0      	; 0x1116 <pass_compare+0xa>
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	9b 83       	std	Y+3, r25	; 0x03
    111c:	8a 83       	std	Y+2, r24	; 0x02
    111e:	7d 83       	std	Y+5, r23	; 0x05
    1120:	6c 83       	std	Y+4, r22	; 0x04
	/* Loop on PASSWORD_LENGTH - 2 elements in array
	 * Last 2 characters are UART end of string and null terminator
	 * characters.
	 * */
	for (uint8 i = 0; i < PASSWORD_LENGTH - 2; i++) {
    1122:	19 82       	std	Y+1, r1	; 0x01
    1124:	19 c0       	rjmp	.+50     	; 0x1158 <pass_compare+0x4c>
		/* Any element not matching the other returns false*/
		if (a_arr1[i] != a_arr2[i]) {
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	9b 81       	ldd	r25, Y+3	; 0x03
    1130:	fc 01       	movw	r30, r24
    1132:	e2 0f       	add	r30, r18
    1134:	f3 1f       	adc	r31, r19
    1136:	40 81       	ld	r20, Z
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	8c 81       	ldd	r24, Y+4	; 0x04
    1140:	9d 81       	ldd	r25, Y+5	; 0x05
    1142:	fc 01       	movw	r30, r24
    1144:	e2 0f       	add	r30, r18
    1146:	f3 1f       	adc	r31, r19
    1148:	80 81       	ld	r24, Z
    114a:	48 17       	cp	r20, r24
    114c:	11 f0       	breq	.+4      	; 0x1152 <pass_compare+0x46>
			return FALSE;
    114e:	1e 82       	std	Y+6, r1	; 0x06
    1150:	08 c0       	rjmp	.+16     	; 0x1162 <pass_compare+0x56>
static boolean pass_compare(const uint8 *a_arr1, const uint8 *a_arr2) {
	/* Loop on PASSWORD_LENGTH - 2 elements in array
	 * Last 2 characters are UART end of string and null terminator
	 * characters.
	 * */
	for (uint8 i = 0; i < PASSWORD_LENGTH - 2; i++) {
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	8f 5f       	subi	r24, 0xFF	; 255
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	85 30       	cpi	r24, 0x05	; 5
    115c:	20 f3       	brcs	.-56     	; 0x1126 <pass_compare+0x1a>
		if (a_arr1[i] != a_arr2[i]) {
			return FALSE;
		}
	}
	/* Array contents match exactly */
	return TRUE;
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	8e 83       	std	Y+6, r24	; 0x06
    1162:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1164:	26 96       	adiw	r28, 0x06	; 6
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	f8 94       	cli
    116a:	de bf       	out	0x3e, r29	; 62
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	cd bf       	out	0x3d, r28	; 61
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <set_password>:
/*
 * Description :
 * Copies given array into global password variable and writes it in EEPROM.
 */
static void set_password(const uint8 *a_arr) {
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	00 d0       	rcall	.+0      	; 0x117c <set_password+0x6>
    117c:	0f 92       	push	r0
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	9b 83       	std	Y+3, r25	; 0x03
    1184:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8 i = 0; i < PASSWORD_LENGTH - 2; i++) {
    1186:	19 82       	std	Y+1, r1	; 0x01
    1188:	13 c0       	rjmp	.+38     	; 0x11b0 <set_password+0x3a>
		g_password[i] = a_arr[i];
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	48 2f       	mov	r20, r24
    118e:	50 e0       	ldi	r21, 0x00	; 0
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	9b 81       	ldd	r25, Y+3	; 0x03
    119a:	fc 01       	movw	r30, r24
    119c:	e2 0f       	add	r30, r18
    119e:	f3 1f       	adc	r31, r19
    11a0:	80 81       	ld	r24, Z
    11a2:	fa 01       	movw	r30, r20
    11a4:	e8 58       	subi	r30, 0x88	; 136
    11a6:	fe 4f       	sbci	r31, 0xFE	; 254
    11a8:	80 83       	st	Z, r24
/*
 * Description :
 * Copies given array into global password variable and writes it in EEPROM.
 */
static void set_password(const uint8 *a_arr) {
	for (uint8 i = 0; i < PASSWORD_LENGTH - 2; i++) {
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	8f 5f       	subi	r24, 0xFF	; 255
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	85 30       	cpi	r24, 0x05	; 5
    11b4:	50 f3       	brcs	.-44     	; 0x118a <set_password+0x14>
		g_password[i] = a_arr[i];
	}
	EEPROM_writeString(EEPROM_PASSWORD_ADDRESS, g_password,
    11b6:	28 e7       	ldi	r18, 0x78	; 120
    11b8:	31 e0       	ldi	r19, 0x01	; 1
    11ba:	80 e2       	ldi	r24, 0x20	; 32
    11bc:	93 e0       	ldi	r25, 0x03	; 3
    11be:	b9 01       	movw	r22, r18
    11c0:	45 e0       	ldi	r20, 0x05	; 5
    11c2:	0e 94 47 0b 	call	0x168e	; 0x168e <EEPROM_writeString>
	PASSWORD_LENGTH-2);
}
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <confirmPasswordAttempts>:
 * If user enters the password correctly, change mode to given success state.
 *
 * UART_SENDS# = 2
 * UART_REC#   = 2
 */
static boolean confirmPasswordAttempts(uint8 a_desired_success_state) {
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <confirmPasswordAttempts+0x6>
    11d8:	0f 92       	push	r0
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	8a 83       	std	Y+2, r24	; 0x02
	/* Loop 3 times for 3 password attempts,
	 *  3rd password attempt results in the alarm triggering*/
	for (uint8 i = 0; i < MAX_PASSWORD_TRIES; i++) {
    11e0:	19 82       	std	Y+1, r1	; 0x01
    11e2:	2d c0       	rjmp	.+90     	; 0x123e <confirmPasswordAttempts+0x6c>
		while (UART_receiveByte() != SYNC_HANDSHAKE)
    11e4:	0e 94 7e 15 	call	0x2afc	; 0x2afc <UART_receiveByte>
    11e8:	8d 3e       	cpi	r24, 0xED	; 237
    11ea:	e1 f7       	brne	.-8      	; 0x11e4 <confirmPasswordAttempts+0x12>
			;
		UART_receiveString(g_pass_buffer1);
    11ec:	8f e7       	ldi	r24, 0x7F	; 127
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <UART_receiveString>
		/* Password correct, exit loop to success state*/
		if (pass_compare(g_pass_buffer1, g_password)) {
    11f4:	8f e7       	ldi	r24, 0x7F	; 127
    11f6:	91 e0       	ldi	r25, 0x01	; 1
    11f8:	28 e7       	ldi	r18, 0x78	; 120
    11fa:	31 e0       	ldi	r19, 0x01	; 1
    11fc:	b9 01       	movw	r22, r18
    11fe:	0e 94 86 08 	call	0x110c	; 0x110c <pass_compare>
    1202:	88 23       	and	r24, r24
    1204:	69 f0       	breq	.+26     	; 0x1220 <confirmPasswordAttempts+0x4e>
			HMI_status = a_desired_success_state;
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	80 93 68 01 	sts	0x0168, r24
			UART_sendByte(SUCCESS);
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendByte>
			UART_sendByte(HMI_status);
    1212:	80 91 68 01 	lds	r24, 0x0168
    1216:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendByte>
			return TRUE;
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	8b 83       	std	Y+3, r24	; 0x03
    121e:	1d c0       	rjmp	.+58     	; 0x125a <confirmPasswordAttempts+0x88>
		} else if (i < MAX_PASSWORD_TRIES - 1) {
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	82 30       	cpi	r24, 0x02	; 2
    1224:	48 f4       	brcc	.+18     	; 0x1238 <confirmPasswordAttempts+0x66>
			/* Password incorrect for 1st & 2nd time (i=0,1),
			 * attempt another try*/
			HMI_status = MODE_NORMAL_BOOT_LOCKED;
    1226:	10 92 68 01 	sts	0x0168, r1
			UART_sendByte(ERROR);
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendByte>
			UART_sendByte(HMI_status);
    1230:	80 91 68 01 	lds	r24, 0x0168
    1234:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendByte>
 * UART_REC#   = 2
 */
static boolean confirmPasswordAttempts(uint8 a_desired_success_state) {
	/* Loop 3 times for 3 password attempts,
	 *  3rd password attempt results in the alarm triggering*/
	for (uint8 i = 0; i < MAX_PASSWORD_TRIES; i++) {
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	8f 5f       	subi	r24, 0xFF	; 255
    123c:	89 83       	std	Y+1, r24	; 0x01
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	83 30       	cpi	r24, 0x03	; 3
    1242:	80 f2       	brcs	.-96     	; 0x11e4 <confirmPasswordAttempts+0x12>
			UART_sendByte(ERROR);
			UART_sendByte(HMI_status);
		}
	}
	/* This part is reached ONLY after 3 failed attempts */
	HMI_status = MODE_ALARM_MODE;
    1244:	83 e0       	ldi	r24, 0x03	; 3
    1246:	80 93 68 01 	sts	0x0168, r24
	UART_sendByte(ERROR);
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendByte>
	UART_sendByte(HMI_status);
    1250:	80 91 68 01 	lds	r24, 0x0168
    1254:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendByte>
	return FALSE;
    1258:	1b 82       	std	Y+3, r1	; 0x03
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <main>:

int main(void) {
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	a0 97       	sbiw	r28, 0x20	; 32
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	f8 94       	cli
    1276:	de bf       	out	0x3e, r29	; 62
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	cd bf       	out	0x3d, r28	; 61
	 * TWI init:
	 * 	Bitrate = 400Kb/s
	 * 	Slave address = 0x02
	 * 	Pre-scaler clock = F_CPU x 1
	 * */
	TWI_ConfigType TWI_CONFIG = { 400000, 0x02, TWI_F_CPU_1 };
    127c:	9e 01       	movw	r18, r28
    127e:	2f 5f       	subi	r18, 0xFF	; 255
    1280:	3f 4f       	sbci	r19, 0xFF	; 255
    1282:	3b 8b       	std	Y+19, r19	; 0x13
    1284:	2a 8b       	std	Y+18, r18	; 0x12
    1286:	82 e7       	ldi	r24, 0x72	; 114
    1288:	91 e0       	ldi	r25, 0x01	; 1
    128a:	9d 8b       	std	Y+21, r25	; 0x15
    128c:	8c 8b       	std	Y+20, r24	; 0x14
    128e:	96 e0       	ldi	r25, 0x06	; 6
    1290:	9e 8b       	std	Y+22, r25	; 0x16
    1292:	ec 89       	ldd	r30, Y+20	; 0x14
    1294:	fd 89       	ldd	r31, Y+21	; 0x15
    1296:	00 80       	ld	r0, Z
    1298:	2c 89       	ldd	r18, Y+20	; 0x14
    129a:	3d 89       	ldd	r19, Y+21	; 0x15
    129c:	2f 5f       	subi	r18, 0xFF	; 255
    129e:	3f 4f       	sbci	r19, 0xFF	; 255
    12a0:	3d 8b       	std	Y+21, r19	; 0x15
    12a2:	2c 8b       	std	Y+20, r18	; 0x14
    12a4:	ea 89       	ldd	r30, Y+18	; 0x12
    12a6:	fb 89       	ldd	r31, Y+19	; 0x13
    12a8:	00 82       	st	Z, r0
    12aa:	2a 89       	ldd	r18, Y+18	; 0x12
    12ac:	3b 89       	ldd	r19, Y+19	; 0x13
    12ae:	2f 5f       	subi	r18, 0xFF	; 255
    12b0:	3f 4f       	sbci	r19, 0xFF	; 255
    12b2:	3b 8b       	std	Y+19, r19	; 0x13
    12b4:	2a 8b       	std	Y+18, r18	; 0x12
    12b6:	3e 89       	ldd	r19, Y+22	; 0x16
    12b8:	31 50       	subi	r19, 0x01	; 1
    12ba:	3e 8b       	std	Y+22, r19	; 0x16
    12bc:	8e 89       	ldd	r24, Y+22	; 0x16
    12be:	88 23       	and	r24, r24
    12c0:	41 f7       	brne	.-48     	; 0x1292 <main+0x2a>
	 * 	Compare value = 7812 (gives one interrupt every 1s for every compare match)
	 * 	Interrupt on compare match = TRUE for enabled
	 * */
	Timer_ConfigType TIMER_CONFIG = { TIMER1_ID, FCPU_1024_T01,
			Timer_Mode_Compare, 7812,
			TRUE };
    12c2:	fe 01       	movw	r30, r28
    12c4:	37 96       	adiw	r30, 0x07	; 7
    12c6:	f8 8f       	std	Y+24, r31	; 0x18
    12c8:	ef 8b       	std	Y+23, r30	; 0x17
    12ca:	2c e6       	ldi	r18, 0x6C	; 108
    12cc:	31 e0       	ldi	r19, 0x01	; 1
    12ce:	3a 8f       	std	Y+26, r19	; 0x1a
    12d0:	29 8f       	std	Y+25, r18	; 0x19
    12d2:	36 e0       	ldi	r19, 0x06	; 6
    12d4:	3b 8f       	std	Y+27, r19	; 0x1b
    12d6:	e9 8d       	ldd	r30, Y+25	; 0x19
    12d8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    12da:	00 80       	ld	r0, Z
    12dc:	29 8d       	ldd	r18, Y+25	; 0x19
    12de:	3a 8d       	ldd	r19, Y+26	; 0x1a
    12e0:	2f 5f       	subi	r18, 0xFF	; 255
    12e2:	3f 4f       	sbci	r19, 0xFF	; 255
    12e4:	3a 8f       	std	Y+26, r19	; 0x1a
    12e6:	29 8f       	std	Y+25, r18	; 0x19
    12e8:	ef 89       	ldd	r30, Y+23	; 0x17
    12ea:	f8 8d       	ldd	r31, Y+24	; 0x18
    12ec:	00 82       	st	Z, r0
    12ee:	2f 89       	ldd	r18, Y+23	; 0x17
    12f0:	38 8d       	ldd	r19, Y+24	; 0x18
    12f2:	2f 5f       	subi	r18, 0xFF	; 255
    12f4:	3f 4f       	sbci	r19, 0xFF	; 255
    12f6:	38 8f       	std	Y+24, r19	; 0x18
    12f8:	2f 8b       	std	Y+23, r18	; 0x17
    12fa:	3b 8d       	ldd	r19, Y+27	; 0x1b
    12fc:	31 50       	subi	r19, 0x01	; 1
    12fe:	3b 8f       	std	Y+27, r19	; 0x1b
    1300:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1302:	88 23       	and	r24, r24
    1304:	41 f7       	brne	.-48     	; 0x12d6 <main+0x6e>
	 * 	Baudrate = 9600
	 * 	Character size = 8 bits
	 * 	Parity type = Disabled
	 * 	1 Stop bit
	 * */
	UART_ConfigType conf = {9600,{0,PARITY_DISABLED,UART_CH_SIZE_8}};
    1306:	fe 01       	movw	r30, r28
    1308:	3d 96       	adiw	r30, 0x0d	; 13
    130a:	fd 8f       	std	Y+29, r31	; 0x1d
    130c:	ec 8f       	std	Y+28, r30	; 0x1c
    130e:	29 e6       	ldi	r18, 0x69	; 105
    1310:	31 e0       	ldi	r19, 0x01	; 1
    1312:	3f 8f       	std	Y+31, r19	; 0x1f
    1314:	2e 8f       	std	Y+30, r18	; 0x1e
    1316:	33 e0       	ldi	r19, 0x03	; 3
    1318:	38 a3       	std	Y+32, r19	; 0x20
    131a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    131c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    131e:	00 80       	ld	r0, Z
    1320:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1322:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1324:	2f 5f       	subi	r18, 0xFF	; 255
    1326:	3f 4f       	sbci	r19, 0xFF	; 255
    1328:	3f 8f       	std	Y+31, r19	; 0x1f
    132a:	2e 8f       	std	Y+30, r18	; 0x1e
    132c:	ec 8d       	ldd	r30, Y+28	; 0x1c
    132e:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1330:	00 82       	st	Z, r0
    1332:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1334:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1336:	2f 5f       	subi	r18, 0xFF	; 255
    1338:	3f 4f       	sbci	r19, 0xFF	; 255
    133a:	3d 8f       	std	Y+29, r19	; 0x1d
    133c:	2c 8f       	std	Y+28, r18	; 0x1c
    133e:	38 a1       	ldd	r19, Y+32	; 0x20
    1340:	31 50       	subi	r19, 0x01	; 1
    1342:	38 a3       	std	Y+32, r19	; 0x20
    1344:	88 a1       	ldd	r24, Y+32	; 0x20
    1346:	88 23       	and	r24, r24
    1348:	41 f7       	brne	.-48     	; 0x131a <main+0xb2>

	/* Modules initialization */
	UART_init(&conf);
    134a:	ce 01       	movw	r24, r28
    134c:	0d 96       	adiw	r24, 0x0d	; 13
    134e:	0e 94 cc 14 	call	0x2998	; 0x2998 <UART_init>
	Buzzer_init();
    1352:	0e 94 75 07 	call	0xeea	; 0xeea <Buzzer_init>
	DcMotor_Init();
    1356:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DcMotor_Init>
	TWI_init(&TWI_CONFIG);
    135a:	ce 01       	movw	r24, r28
    135c:	01 96       	adiw	r24, 0x01	; 1
    135e:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <TWI_init>
	/* Set callback timer function and stop timer initially */
	Timer_setCallback(TIMER1_ID, Control_Delay_Callback);
    1362:	20 e3       	ldi	r18, 0x30	; 48
    1364:	38 e0       	ldi	r19, 0x08	; 8
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	b9 01       	movw	r22, r18
    136a:	0e 94 ba 11 	call	0x2374	; 0x2374 <Timer_setCallback>
	Timer_init(&TIMER_CONFIG);
    136e:	ce 01       	movw	r24, r28
    1370:	07 96       	adiw	r24, 0x07	; 7
    1372:	0e 94 99 10 	call	0x2132	; 0x2132 <Timer_init>
	Timer_stop(TIMER1_ID);
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	0e 94 66 12 	call	0x24cc	; 0x24cc <Timer_stop>
	Timer_resetTimerValue(TIMER1_ID);
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <Timer_resetTimerValue>
	/* Enable global interrupts */
	sei();
    1382:	78 94       	sei
	/*Super loop*/
	for (;;) {
		switch (HMI_status) {
    1384:	80 91 68 01 	lds	r24, 0x0168
    1388:	e8 2f       	mov	r30, r24
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	f9 8b       	std	Y+17, r31	; 0x11
    138e:	e8 8b       	std	Y+16, r30	; 0x10
    1390:	28 89       	ldd	r18, Y+16	; 0x10
    1392:	39 89       	ldd	r19, Y+17	; 0x11
    1394:	22 30       	cpi	r18, 0x02	; 2
    1396:	31 05       	cpc	r19, r1
    1398:	09 f4       	brne	.+2      	; 0x139c <main+0x134>
    139a:	47 c0       	rjmp	.+142    	; 0x142a <main+0x1c2>
    139c:	88 89       	ldd	r24, Y+16	; 0x10
    139e:	99 89       	ldd	r25, Y+17	; 0x11
    13a0:	83 30       	cpi	r24, 0x03	; 3
    13a2:	91 05       	cpc	r25, r1
    13a4:	2c f4       	brge	.+10     	; 0x13b0 <main+0x148>
    13a6:	e8 89       	ldd	r30, Y+16	; 0x10
    13a8:	f9 89       	ldd	r31, Y+17	; 0x11
    13aa:	30 97       	sbiw	r30, 0x00	; 0
    13ac:	d1 f1       	breq	.+116    	; 0x1422 <main+0x1ba>
    13ae:	ea cf       	rjmp	.-44     	; 0x1384 <main+0x11c>
    13b0:	28 89       	ldd	r18, Y+16	; 0x10
    13b2:	39 89       	ldd	r19, Y+17	; 0x11
    13b4:	23 30       	cpi	r18, 0x03	; 3
    13b6:	31 05       	cpc	r19, r1
    13b8:	09 f4       	brne	.+2      	; 0x13bc <main+0x154>
    13ba:	65 c0       	rjmp	.+202    	; 0x1486 <main+0x21e>
    13bc:	88 89       	ldd	r24, Y+16	; 0x10
    13be:	99 89       	ldd	r25, Y+17	; 0x11
    13c0:	8f 3f       	cpi	r24, 0xFF	; 255
    13c2:	91 05       	cpc	r25, r1
    13c4:	f9 f6       	brne	.-66     	; 0x1384 <main+0x11c>

		/************************** First boot, setting up new password  **************************/
		case MODE_FIRST_BOOT:
			/*Synchronize before receiving first password */
			while (UART_receiveByte() != SYNC_HANDSHAKE) {
    13c6:	0e 94 7e 15 	call	0x2afc	; 0x2afc <UART_receiveByte>
    13ca:	8d 3e       	cpi	r24, 0xED	; 237
    13cc:	e1 f7       	brne	.-8      	; 0x13c6 <main+0x15e>
			}
			UART_receiveString(g_pass_buffer1);
    13ce:	8f e7       	ldi	r24, 0x7F	; 127
    13d0:	91 e0       	ldi	r25, 0x01	; 1
    13d2:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <UART_receiveString>
			/*Synchronize before receiving first password */
			while (UART_receiveByte() != SYNC_HANDSHAKE) {
    13d6:	0e 94 7e 15 	call	0x2afc	; 0x2afc <UART_receiveByte>
    13da:	8d 3e       	cpi	r24, 0xED	; 237
    13dc:	e1 f7       	brne	.-8      	; 0x13d6 <main+0x16e>
			}
			UART_receiveString(g_pass_buffer2);
    13de:	86 e8       	ldi	r24, 0x86	; 134
    13e0:	91 e0       	ldi	r25, 0x01	; 1
    13e2:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <UART_receiveString>
			/* Compare both passwords,
			 * store in EEPROM if match,
			 * re-try if no match*/
			if (pass_compare(g_pass_buffer1, g_pass_buffer2)) {
    13e6:	8f e7       	ldi	r24, 0x7F	; 127
    13e8:	91 e0       	ldi	r25, 0x01	; 1
    13ea:	26 e8       	ldi	r18, 0x86	; 134
    13ec:	31 e0       	ldi	r19, 0x01	; 1
    13ee:	b9 01       	movw	r22, r18
    13f0:	0e 94 86 08 	call	0x110c	; 0x110c <pass_compare>
    13f4:	88 23       	and	r24, r24
    13f6:	71 f0       	breq	.+28     	; 0x1414 <main+0x1ac>
				UART_sendByte(SYNC_HANDSHAKE);
    13f8:	8d ee       	ldi	r24, 0xED	; 237
    13fa:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendByte>
				UART_sendByte(SUCCESS);
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendByte>
				HMI_status = MODE_NORMAL_BOOT_MAIN;
    1404:	82 e0       	ldi	r24, 0x02	; 2
    1406:	80 93 68 01 	sts	0x0168, r24
				set_password(g_pass_buffer1);
    140a:	8f e7       	ldi	r24, 0x7F	; 127
    140c:	91 e0       	ldi	r25, 0x01	; 1
    140e:	0e 94 bb 08 	call	0x1176	; 0x1176 <set_password>
    1412:	b8 cf       	rjmp	.-144    	; 0x1384 <main+0x11c>

			} else {
				UART_sendByte(SYNC_HANDSHAKE);
    1414:	8d ee       	ldi	r24, 0xED	; 237
    1416:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendByte>
				UART_sendByte(ERROR);
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendByte>
    1420:	b1 cf       	rjmp	.-158    	; 0x1384 <main+0x11c>
			}
			break;
			/*********************** Mode for password attempts by the user ***********************/
		case MODE_NORMAL_BOOT_LOCKED:
			confirmPasswordAttempts(MODE_NORMAL_BOOT_MAIN);
    1422:	82 e0       	ldi	r24, 0x02	; 2
    1424:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <confirmPasswordAttempts>
    1428:	ad cf       	rjmp	.-166    	; 0x1384 <main+0x11c>
			break;
		case MODE_NORMAL_BOOT_MAIN:
			/* User wants to open the door (pressed '+' key),
			 * request old password first*/
			while (UART_receiveByte() != SYNC_HANDSHAKE)
    142a:	0e 94 7e 15 	call	0x2afc	; 0x2afc <UART_receiveByte>
    142e:	8d 3e       	cpi	r24, 0xED	; 237
    1430:	e1 f7       	brne	.-8      	; 0x142a <main+0x1c2>
				;
			if (UART_receiveByte() == OPEN_DOOR_REQUEST) {
    1432:	0e 94 7e 15 	call	0x2afc	; 0x2afc <UART_receiveByte>
    1436:	84 30       	cpi	r24, 0x04	; 4
    1438:	11 f5       	brne	.+68     	; 0x147e <main+0x216>
				if (confirmPasswordAttempts(MODE_NORMAL_BOOT_MAIN)) {
    143a:	82 e0       	ldi	r24, 0x02	; 2
    143c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <confirmPasswordAttempts>
    1440:	88 23       	and	r24, r24
    1442:	09 f4       	brne	.+2      	; 0x1446 <main+0x1de>
    1444:	9f cf       	rjmp	.-194    	; 0x1384 <main+0x11c>
					/* Rotate motor for 15s clockwise (Opening door)*/
					DcMotor_Rotate(CW);
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <DcMotor_Rotate>
					delay_sec(15);
    144c:	8f e0       	ldi	r24, 0x0F	; 15
    144e:	0e 94 48 08 	call	0x1090	; 0x1090 <delay_sec>
					/* Wait for 10s */
					DcMotor_Rotate(STOP);
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <DcMotor_Rotate>
					delay_sec(3);
    1458:	83 e0       	ldi	r24, 0x03	; 3
    145a:	0e 94 48 08 	call	0x1090	; 0x1090 <delay_sec>

					/* Notify HMI ECU to print locking message*/
					UART_sendByte(SYNC_HANDSHAKE);
    145e:	8d ee       	ldi	r24, 0xED	; 237
    1460:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendByte>
					/* Rotate motor for 15s anti-clockwise (Closing door)*/
					DcMotor_Rotate(ACW);
    1464:	82 e0       	ldi	r24, 0x02	; 2
    1466:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <DcMotor_Rotate>
					delay_sec(15);
    146a:	8f e0       	ldi	r24, 0x0F	; 15
    146c:	0e 94 48 08 	call	0x1090	; 0x1090 <delay_sec>

					DcMotor_Rotate(STOP);
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <DcMotor_Rotate>
					/* Notify HMI ECU that door is closed to proceed */
					UART_sendByte(SYNC_HANDSHAKE);
    1476:	8d ee       	ldi	r24, 0xED	; 237
    1478:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendByte>
    147c:	83 cf       	rjmp	.-250    	; 0x1384 <main+0x11c>
				}
			}
			/* User wants to change password (pressed '-' key,
			 * request old password first*/
			else {
				confirmPasswordAttempts(MODE_FIRST_BOOT);
    147e:	8f ef       	ldi	r24, 0xFF	; 255
    1480:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <confirmPasswordAttempts>
    1484:	7f cf       	rjmp	.-258    	; 0x1384 <main+0x11c>
			}
			break;
			/******** Alarm mode triggered by wrong password entry, turn on buzzer for 60s ********/
		case MODE_ALARM_MODE:
			/* Start buzzer for 60s */
			Buzzer_ON();
    1486:	0e 94 18 08 	call	0x1030	; 0x1030 <Buzzer_ON>
			delay_sec(60);
    148a:	8c e3       	ldi	r24, 0x3C	; 60
    148c:	0e 94 48 08 	call	0x1090	; 0x1090 <delay_sec>
			Buzzer_OFF();
    1490:	0e 94 24 08 	call	0x1048	; 0x1048 <Buzzer_OFF>
			/* Return to main menu options */
			HMI_status = MODE_NORMAL_BOOT_MAIN;
    1494:	82 e0       	ldi	r24, 0x02	; 2
    1496:	80 93 68 01 	sts	0x0168, r24
			/* Notify HMI ECU of new status*/
			UART_sendByte(SYNC_HANDSHAKE);
    149a:	8d ee       	ldi	r24, 0xED	; 237
    149c:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendByte>
			UART_sendByte(HMI_status);
    14a0:	80 91 68 01 	lds	r24, 0x0168
    14a4:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendByte>
    14a8:	6d cf       	rjmp	.-294    	; 0x1384 <main+0x11c>

000014aa <DcMotor_Init>:
	 * */
	OCR0 = (uint8) (((float) duty_cycle / 100.0) * (TIMER0_TOP_VALUE));
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01);
}
#endif
void DcMotor_Init(void) {
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
	/* Setup control pins */
	GPIO_setupPinDirection(DCMOTOR_PORT_PWM, DCMOTOR_ENA_PIN, PIN_OUTPUT);
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	65 e0       	ldi	r22, 0x05	; 5
    14b6:	41 e0       	ldi	r20, 0x01	; 1
    14b8:	0e 94 bf 0b 	call	0x177e	; 0x177e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_PORT_CTRL, DCMOTOR_IN1_PIN, PIN_OUTPUT);
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	66 e0       	ldi	r22, 0x06	; 6
    14c0:	41 e0       	ldi	r20, 0x01	; 1
    14c2:	0e 94 bf 0b 	call	0x177e	; 0x177e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_PORT_CTRL, DCMOTOR_IN2_PIN, PIN_OUTPUT);
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	67 e0       	ldi	r22, 0x07	; 7
    14ca:	41 e0       	ldi	r20, 0x01	; 1
    14cc:	0e 94 bf 0b 	call	0x177e	; 0x177e <GPIO_setupPinDirection>
	/* Turn off motor initially */
	GPIO_writePin(DCMOTOR_PORT_PWM, DCMOTOR_ENA_PIN, LOGIC_LOW);
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	65 e0       	ldi	r22, 0x05	; 5
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	0e 94 aa 0c 	call	0x1954	; 0x1954 <GPIO_writePin>
	GPIO_writePin(DCMOTOR_PORT_CTRL, DCMOTOR_IN1_PIN, LOGIC_LOW);
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	66 e0       	ldi	r22, 0x06	; 6
    14de:	40 e0       	ldi	r20, 0x00	; 0
    14e0:	0e 94 aa 0c 	call	0x1954	; 0x1954 <GPIO_writePin>
	GPIO_writePin(DCMOTOR_PORT_CTRL, DCMOTOR_IN2_PIN, LOGIC_LOW);
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	67 e0       	ldi	r22, 0x07	; 7
    14e8:	40 e0       	ldi	r20, 0x00	; 0
    14ea:	0e 94 aa 0c 	call	0x1954	; 0x1954 <GPIO_writePin>
}
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <DcMotor_Rotate>:
#ifdef PWM_MODE
void DcMotor_Rotate(DcMotor_State state,uint8 speed) {
#else
void DcMotor_Rotate(DcMotor_State state) {
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	0f 92       	push	r0
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	89 83       	std	Y+1, r24	; 0x01
#endif
	/* Set rotation direction on IN1, IN2 pins*/
	GPIO_writePin(DCMOTOR_PORT_CTRL, DCMOTOR_IN1_PIN, (state & 0x01) >> 0);
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	98 2f       	mov	r25, r24
    1504:	91 70       	andi	r25, 0x01	; 1
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	66 e0       	ldi	r22, 0x06	; 6
    150a:	49 2f       	mov	r20, r25
    150c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <GPIO_writePin>
	GPIO_writePin(DCMOTOR_PORT_CTRL, DCMOTOR_IN2_PIN, (state & 0x02) >> 1);
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	88 2f       	mov	r24, r24
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	82 70       	andi	r24, 0x02	; 2
    1518:	90 70       	andi	r25, 0x00	; 0
    151a:	95 95       	asr	r25
    151c:	87 95       	ror	r24
    151e:	98 2f       	mov	r25, r24
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	67 e0       	ldi	r22, 0x07	; 7
    1524:	49 2f       	mov	r20, r25
    1526:	0e 94 aa 0c 	call	0x1954	; 0x1954 <GPIO_writePin>

	if (state == STOP) {
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	88 23       	and	r24, r24
    152e:	31 f4       	brne	.+12     	; 0x153c <DcMotor_Rotate+0x48>
		GPIO_writePin(DCMOTOR_ENA_PIN, DCMOTOR_ENA_PIN, LOGIC_LOW);
    1530:	85 e0       	ldi	r24, 0x05	; 5
    1532:	65 e0       	ldi	r22, 0x05	; 5
    1534:	40 e0       	ldi	r20, 0x00	; 0
    1536:	0e 94 aa 0c 	call	0x1954	; 0x1954 <GPIO_writePin>
    153a:	05 c0       	rjmp	.+10     	; 0x1546 <DcMotor_Rotate+0x52>

	} else {
#ifdef PWM_MODE
		PWM_Timer0_Start(speed);
#else
		GPIO_writePin(DCMOTOR_PORT_PWM, DCMOTOR_ENA_PIN, LOGIC_HIGH);
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	65 e0       	ldi	r22, 0x05	; 5
    1540:	41 e0       	ldi	r20, 0x01	; 1
    1542:	0e 94 aa 0c 	call	0x1954	; 0x1954 <GPIO_writePin>
#endif
	}
}
    1546:	0f 90       	pop	r0
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	08 95       	ret

0000154e <EEPROM_writeByte>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

uint8 EEPROM_writeByte(uint16 a_addr, uint8 a_data) {
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	00 d0       	rcall	.+0      	; 0x1554 <EEPROM_writeByte+0x6>
    1554:	00 d0       	rcall	.+0      	; 0x1556 <EEPROM_writeByte+0x8>
    1556:	0f 92       	push	r0
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
    155c:	9b 83       	std	Y+3, r25	; 0x03
    155e:	8a 83       	std	Y+2, r24	; 0x02
    1560:	6c 83       	std	Y+4, r22	; 0x04
	/* Send start bit */
	TWI_start();
    1562:	0e 94 44 14 	call	0x2888	; 0x2888 <TWI_start>
	if (TWI_getStatus() != TWI_MT_START) {
    1566:	0e 94 9c 14 	call	0x2938	; 0x2938 <TWI_getStatus>
    156a:	88 30       	cpi	r24, 0x08	; 8
    156c:	11 f0       	breq	.+4      	; 0x1572 <EEPROM_writeByte+0x24>
		return ERROR;
    156e:	1d 82       	std	Y+5, r1	; 0x05
    1570:	2a c0       	rjmp	.+84     	; 0x15c6 <EEPROM_writeByte+0x78>
	}

	/* Mask the slave address of EEPROM with the last 3 bits of	 * the memory address (A8,A9,A10) with R/W = 0 for write request*/

	uint8 slave_w_3addr = EEPROM_SLAVE_ADDRESS | ((a_addr & 0x0700) >> 7);
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	9b 81       	ldd	r25, Y+3	; 0x03
    1576:	80 70       	andi	r24, 0x00	; 0
    1578:	97 70       	andi	r25, 0x07	; 7
    157a:	88 0f       	add	r24, r24
    157c:	89 2f       	mov	r24, r25
    157e:	88 1f       	adc	r24, r24
    1580:	99 0b       	sbc	r25, r25
    1582:	91 95       	neg	r25
    1584:	80 6a       	ori	r24, 0xA0	; 160
    1586:	89 83       	std	Y+1, r24	; 0x01

	TWI_writeByte((uint8) slave_w_3addr);
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	0e 94 5f 14 	call	0x28be	; 0x28be <TWI_writeByte>

	if (TWI_getStatus() != TWI_MT_SLA_W_ACK) {
    158e:	0e 94 9c 14 	call	0x2938	; 0x2938 <TWI_getStatus>
    1592:	88 31       	cpi	r24, 0x18	; 24
    1594:	11 f0       	breq	.+4      	; 0x159a <EEPROM_writeByte+0x4c>
		return ERROR;
    1596:	1d 82       	std	Y+5, r1	; 0x05
    1598:	16 c0       	rjmp	.+44     	; 0x15c6 <EEPROM_writeByte+0x78>
	}
	/* Send the rest of the address and await ACK*/
	TWI_writeByte((uint8) a_addr);
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	0e 94 5f 14 	call	0x28be	; 0x28be <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK) {
    15a0:	0e 94 9c 14 	call	0x2938	; 0x2938 <TWI_getStatus>
    15a4:	88 32       	cpi	r24, 0x28	; 40
    15a6:	11 f0       	breq	.+4      	; 0x15ac <EEPROM_writeByte+0x5e>
		return ERROR;
    15a8:	1d 82       	std	Y+5, r1	; 0x05
    15aa:	0d c0       	rjmp	.+26     	; 0x15c6 <EEPROM_writeByte+0x78>
	}
	/* Send the data and await ACK*/
	TWI_writeByte((uint8) a_data);
    15ac:	8c 81       	ldd	r24, Y+4	; 0x04
    15ae:	0e 94 5f 14 	call	0x28be	; 0x28be <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK) {
    15b2:	0e 94 9c 14 	call	0x2938	; 0x2938 <TWI_getStatus>
    15b6:	88 32       	cpi	r24, 0x28	; 40
    15b8:	11 f0       	breq	.+4      	; 0x15be <EEPROM_writeByte+0x70>
		return ERROR;
    15ba:	1d 82       	std	Y+5, r1	; 0x05
    15bc:	04 c0       	rjmp	.+8      	; 0x15c6 <EEPROM_writeByte+0x78>
	}
	/* End of frame */
	TWI_stop();
    15be:	0e 94 54 14 	call	0x28a8	; 0x28a8 <TWI_stop>
	return SUCCESS;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	8d 83       	std	Y+5, r24	; 0x05
    15c6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <EEPROM_readByte>:
uint8 EEPROM_readByte(uint16 a_addr, uint8 *a_data) {
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	00 d0       	rcall	.+0      	; 0x15de <EEPROM_readByte+0x6>
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <EEPROM_readByte+0x8>
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <EEPROM_readByte+0xa>
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	9b 83       	std	Y+3, r25	; 0x03
    15e8:	8a 83       	std	Y+2, r24	; 0x02
    15ea:	7d 83       	std	Y+5, r23	; 0x05
    15ec:	6c 83       	std	Y+4, r22	; 0x04
	/* Send start bit */
	TWI_start();
    15ee:	0e 94 44 14 	call	0x2888	; 0x2888 <TWI_start>
	if (TWI_getStatus() != TWI_MT_START) {
    15f2:	0e 94 9c 14 	call	0x2938	; 0x2938 <TWI_getStatus>
    15f6:	88 30       	cpi	r24, 0x08	; 8
    15f8:	11 f0       	breq	.+4      	; 0x15fe <EEPROM_readByte+0x26>
		return ERROR;
    15fa:	1e 82       	std	Y+6, r1	; 0x06
    15fc:	3e c0       	rjmp	.+124    	; 0x167a <EEPROM_readByte+0xa2>
	}

	/* Mask the slave address of EEPROM with the last 3 bits of
	 * the memory address (A8,A9,A10) with R/W = 0 for write request*/
	uint8 slave_w_3addr = EEPROM_SLAVE_ADDRESS | ((a_addr & 0x0700) >> 7);
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	9b 81       	ldd	r25, Y+3	; 0x03
    1602:	80 70       	andi	r24, 0x00	; 0
    1604:	97 70       	andi	r25, 0x07	; 7
    1606:	88 0f       	add	r24, r24
    1608:	89 2f       	mov	r24, r25
    160a:	88 1f       	adc	r24, r24
    160c:	99 0b       	sbc	r25, r25
    160e:	91 95       	neg	r25
    1610:	80 6a       	ori	r24, 0xA0	; 160
    1612:	89 83       	std	Y+1, r24	; 0x01

	TWI_writeByte((uint8) slave_w_3addr);
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	0e 94 5f 14 	call	0x28be	; 0x28be <TWI_writeByte>

	if (TWI_getStatus() != TWI_MT_SLA_W_ACK) {
    161a:	0e 94 9c 14 	call	0x2938	; 0x2938 <TWI_getStatus>
    161e:	88 31       	cpi	r24, 0x18	; 24
    1620:	11 f0       	breq	.+4      	; 0x1626 <EEPROM_readByte+0x4e>
		return ERROR;
    1622:	1e 82       	std	Y+6, r1	; 0x06
    1624:	2a c0       	rjmp	.+84     	; 0x167a <EEPROM_readByte+0xa2>
	}
	/* Send the rest of the address and await ACK*/
	TWI_writeByte((uint8) a_addr);
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	0e 94 5f 14 	call	0x28be	; 0x28be <TWI_writeByte>

	if (TWI_getStatus() != TWI_MT_DATA_ACK) {
    162c:	0e 94 9c 14 	call	0x2938	; 0x2938 <TWI_getStatus>
    1630:	88 32       	cpi	r24, 0x28	; 40
    1632:	11 f0       	breq	.+4      	; 0x1638 <EEPROM_readByte+0x60>
		return ERROR;
    1634:	1e 82       	std	Y+6, r1	; 0x06
    1636:	21 c0       	rjmp	.+66     	; 0x167a <EEPROM_readByte+0xa2>
	}
	/* Send repeated start */
	TWI_start();
    1638:	0e 94 44 14 	call	0x2888	; 0x2888 <TWI_start>
	if (TWI_getStatus() != TWI_MT_REP_START) {
    163c:	0e 94 9c 14 	call	0x2938	; 0x2938 <TWI_getStatus>
    1640:	80 31       	cpi	r24, 0x10	; 16
    1642:	11 f0       	breq	.+4      	; 0x1648 <EEPROM_readByte+0x70>
		return ERROR;
    1644:	1e 82       	std	Y+6, r1	; 0x06
    1646:	19 c0       	rjmp	.+50     	; 0x167a <EEPROM_readByte+0xa2>
	}
	/* Send slave address with R/W = 1 for read request and await ACK*/
	TWI_writeByte((uint8) (slave_w_3addr | 0x01));
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	81 60       	ori	r24, 0x01	; 1
    164c:	0e 94 5f 14 	call	0x28be	; 0x28be <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_R_ACK) {
    1650:	0e 94 9c 14 	call	0x2938	; 0x2938 <TWI_getStatus>
    1654:	80 34       	cpi	r24, 0x40	; 64
    1656:	11 f0       	breq	.+4      	; 0x165c <EEPROM_readByte+0x84>
		return ERROR;
    1658:	1e 82       	std	Y+6, r1	; 0x06
    165a:	0f c0       	rjmp	.+30     	; 0x167a <EEPROM_readByte+0xa2>
	}
	/* Receive data in a_data without ACK to terminate the frame*/
	*a_data = TWI_readByteWithNack();
    165c:	0e 94 89 14 	call	0x2912	; 0x2912 <TWI_readByteWithNack>
    1660:	ec 81       	ldd	r30, Y+4	; 0x04
    1662:	fd 81       	ldd	r31, Y+5	; 0x05
    1664:	80 83       	st	Z, r24
	if (TWI_getStatus() != TWI_MR_DATA_NACK) {
    1666:	0e 94 9c 14 	call	0x2938	; 0x2938 <TWI_getStatus>
    166a:	88 35       	cpi	r24, 0x58	; 88
    166c:	11 f0       	breq	.+4      	; 0x1672 <EEPROM_readByte+0x9a>
		return ERROR;
    166e:	1e 82       	std	Y+6, r1	; 0x06
    1670:	04 c0       	rjmp	.+8      	; 0x167a <EEPROM_readByte+0xa2>
	}
	/* End of frame */
	TWI_stop();
    1672:	0e 94 54 14 	call	0x28a8	; 0x28a8 <TWI_stop>
	return SUCCESS;
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	8e 83       	std	Y+6, r24	; 0x06
    167a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    167c:	26 96       	adiw	r28, 0x06	; 6
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	08 95       	ret

0000168e <EEPROM_writeString>:

uint8 EEPROM_writeString(uint16 a_addr, const uint8 *str, uint8 size) {
    168e:	df 93       	push	r29
    1690:	cf 93       	push	r28
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	27 97       	sbiw	r28, 0x07	; 7
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
    16a2:	9b 83       	std	Y+3, r25	; 0x03
    16a4:	8a 83       	std	Y+2, r24	; 0x02
    16a6:	7d 83       	std	Y+5, r23	; 0x05
    16a8:	6c 83       	std	Y+4, r22	; 0x04
    16aa:	4e 83       	std	Y+6, r20	; 0x06
	/* Write (size-1) bytes to EEPROM, return if any error occurs */
	for (uint8 i = 0; i < size; i++) {
    16ac:	19 82       	std	Y+1, r1	; 0x01
    16ae:	1c c0       	rjmp	.+56     	; 0x16e8 <EEPROM_writeString+0x5a>
		if(!EEPROM_writeByte(a_addr + i, str[i])){
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	9b 81       	ldd	r25, Y+3	; 0x03
    16ba:	a9 01       	movw	r20, r18
    16bc:	48 0f       	add	r20, r24
    16be:	59 1f       	adc	r21, r25
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	8c 81       	ldd	r24, Y+4	; 0x04
    16c8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ca:	fc 01       	movw	r30, r24
    16cc:	e2 0f       	add	r30, r18
    16ce:	f3 1f       	adc	r31, r19
    16d0:	20 81       	ld	r18, Z
    16d2:	ca 01       	movw	r24, r20
    16d4:	62 2f       	mov	r22, r18
    16d6:	0e 94 a7 0a 	call	0x154e	; 0x154e <EEPROM_writeByte>
    16da:	88 23       	and	r24, r24
    16dc:	11 f4       	brne	.+4      	; 0x16e2 <EEPROM_writeString+0x54>
			return ERROR;
    16de:	1f 82       	std	Y+7, r1	; 0x07
    16e0:	09 c0       	rjmp	.+18     	; 0x16f4 <EEPROM_writeString+0x66>
	return SUCCESS;
}

uint8 EEPROM_writeString(uint16 a_addr, const uint8 *str, uint8 size) {
	/* Write (size-1) bytes to EEPROM, return if any error occurs */
	for (uint8 i = 0; i < size; i++) {
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	8f 5f       	subi	r24, 0xFF	; 255
    16e6:	89 83       	std	Y+1, r24	; 0x01
    16e8:	99 81       	ldd	r25, Y+1	; 0x01
    16ea:	8e 81       	ldd	r24, Y+6	; 0x06
    16ec:	98 17       	cp	r25, r24
    16ee:	00 f3       	brcs	.-64     	; 0x16b0 <EEPROM_writeString+0x22>
		if(!EEPROM_writeByte(a_addr + i, str[i])){
			return ERROR;
		}
	}
	return SUCCESS;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	8f 83       	std	Y+7, r24	; 0x07
    16f4:	8f 81       	ldd	r24, Y+7	; 0x07
}
    16f6:	27 96       	adiw	r28, 0x07	; 7
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	08 95       	ret

00001708 <EEPROM_readString>:
uint8 EEPROM_readString(uint16 a_addr, uint8 *str, uint8 size) {
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	27 97       	sbiw	r28, 0x07	; 7
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	f8 94       	cli
    1716:	de bf       	out	0x3e, r29	; 62
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	cd bf       	out	0x3d, r28	; 61
    171c:	9b 83       	std	Y+3, r25	; 0x03
    171e:	8a 83       	std	Y+2, r24	; 0x02
    1720:	7d 83       	std	Y+5, r23	; 0x05
    1722:	6c 83       	std	Y+4, r22	; 0x04
    1724:	4e 83       	std	Y+6, r20	; 0x06
	/* Read (size-1) bytes to EEPROM, return if any error occurs */
	for (uint8 i = 0; i < size; i++) {
    1726:	19 82       	std	Y+1, r1	; 0x01
    1728:	1a c0       	rjmp	.+52     	; 0x175e <EEPROM_readString+0x56>
		if(!EEPROM_readByte(a_addr + i,&str[i])){
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	9b 81       	ldd	r25, Y+3	; 0x03
    1734:	a9 01       	movw	r20, r18
    1736:	48 0f       	add	r20, r24
    1738:	59 1f       	adc	r21, r25
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	8c 81       	ldd	r24, Y+4	; 0x04
    1742:	9d 81       	ldd	r25, Y+5	; 0x05
    1744:	28 0f       	add	r18, r24
    1746:	39 1f       	adc	r19, r25
    1748:	ca 01       	movw	r24, r20
    174a:	b9 01       	movw	r22, r18
    174c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <EEPROM_readByte>
    1750:	88 23       	and	r24, r24
    1752:	11 f4       	brne	.+4      	; 0x1758 <EEPROM_readString+0x50>
			return ERROR;
    1754:	1f 82       	std	Y+7, r1	; 0x07
    1756:	09 c0       	rjmp	.+18     	; 0x176a <EEPROM_readString+0x62>
	}
	return SUCCESS;
}
uint8 EEPROM_readString(uint16 a_addr, uint8 *str, uint8 size) {
	/* Read (size-1) bytes to EEPROM, return if any error occurs */
	for (uint8 i = 0; i < size; i++) {
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	8f 5f       	subi	r24, 0xFF	; 255
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	99 81       	ldd	r25, Y+1	; 0x01
    1760:	8e 81       	ldd	r24, Y+6	; 0x06
    1762:	98 17       	cp	r25, r24
    1764:	10 f3       	brcs	.-60     	; 0x172a <EEPROM_readString+0x22>
		if(!EEPROM_readByte(a_addr + i,&str[i])){
			return ERROR;
		}
	}
	return SUCCESS;
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	8f 83       	std	Y+7, r24	; 0x07
    176a:	8f 81       	ldd	r24, Y+7	; 0x07
}
    176c:	27 96       	adiw	r28, 0x07	; 7
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	de bf       	out	0x3e, r29	; 62
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	cd bf       	out	0x3d, r28	; 61
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret

0000177e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction) {
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	00 d0       	rcall	.+0      	; 0x1784 <GPIO_setupPinDirection+0x6>
    1784:	00 d0       	rcall	.+0      	; 0x1786 <GPIO_setupPinDirection+0x8>
    1786:	0f 92       	push	r0
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	89 83       	std	Y+1, r24	; 0x01
    178e:	6a 83       	std	Y+2, r22	; 0x02
    1790:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	88 30       	cpi	r24, 0x08	; 8
    1796:	08 f0       	brcs	.+2      	; 0x179a <GPIO_setupPinDirection+0x1c>
    1798:	d5 c0       	rjmp	.+426    	; 0x1944 <GPIO_setupPinDirection+0x1c6>
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	84 30       	cpi	r24, 0x04	; 4
    179e:	08 f0       	brcs	.+2      	; 0x17a2 <GPIO_setupPinDirection+0x24>
    17a0:	d1 c0       	rjmp	.+418    	; 0x1944 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	} else {
		/* Setup the pin direction as required */
		switch (port_num) {
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	3d 83       	std	Y+5, r19	; 0x05
    17aa:	2c 83       	std	Y+4, r18	; 0x04
    17ac:	8c 81       	ldd	r24, Y+4	; 0x04
    17ae:	9d 81       	ldd	r25, Y+5	; 0x05
    17b0:	81 30       	cpi	r24, 0x01	; 1
    17b2:	91 05       	cpc	r25, r1
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <GPIO_setupPinDirection+0x3a>
    17b6:	43 c0       	rjmp	.+134    	; 0x183e <GPIO_setupPinDirection+0xc0>
    17b8:	2c 81       	ldd	r18, Y+4	; 0x04
    17ba:	3d 81       	ldd	r19, Y+5	; 0x05
    17bc:	22 30       	cpi	r18, 0x02	; 2
    17be:	31 05       	cpc	r19, r1
    17c0:	2c f4       	brge	.+10     	; 0x17cc <GPIO_setupPinDirection+0x4e>
    17c2:	8c 81       	ldd	r24, Y+4	; 0x04
    17c4:	9d 81       	ldd	r25, Y+5	; 0x05
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	71 f0       	breq	.+28     	; 0x17e6 <GPIO_setupPinDirection+0x68>
    17ca:	bc c0       	rjmp	.+376    	; 0x1944 <GPIO_setupPinDirection+0x1c6>
    17cc:	2c 81       	ldd	r18, Y+4	; 0x04
    17ce:	3d 81       	ldd	r19, Y+5	; 0x05
    17d0:	22 30       	cpi	r18, 0x02	; 2
    17d2:	31 05       	cpc	r19, r1
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <GPIO_setupPinDirection+0x5a>
    17d6:	5f c0       	rjmp	.+190    	; 0x1896 <GPIO_setupPinDirection+0x118>
    17d8:	8c 81       	ldd	r24, Y+4	; 0x04
    17da:	9d 81       	ldd	r25, Y+5	; 0x05
    17dc:	83 30       	cpi	r24, 0x03	; 3
    17de:	91 05       	cpc	r25, r1
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <GPIO_setupPinDirection+0x66>
    17e2:	85 c0       	rjmp	.+266    	; 0x18ee <GPIO_setupPinDirection+0x170>
    17e4:	af c0       	rjmp	.+350    	; 0x1944 <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	81 30       	cpi	r24, 0x01	; 1
    17ea:	a1 f4       	brne	.+40     	; 0x1814 <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_num);
    17ec:	aa e3       	ldi	r26, 0x3A	; 58
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	ea e3       	ldi	r30, 0x3A	; 58
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	48 2f       	mov	r20, r24
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 2e       	mov	r0, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <GPIO_setupPinDirection+0x8c>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0a 94       	dec	r0
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <GPIO_setupPinDirection+0x88>
    180e:	84 2b       	or	r24, r20
    1810:	8c 93       	st	X, r24
    1812:	98 c0       	rjmp	.+304    	; 0x1944 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_num);
    1814:	aa e3       	ldi	r26, 0x3A	; 58
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	ea e3       	ldi	r30, 0x3A	; 58
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	48 2f       	mov	r20, r24
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	02 2e       	mov	r0, r18
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <GPIO_setupPinDirection+0xb4>
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	0a 94       	dec	r0
    1834:	e2 f7       	brpl	.-8      	; 0x182e <GPIO_setupPinDirection+0xb0>
    1836:	80 95       	com	r24
    1838:	84 23       	and	r24, r20
    183a:	8c 93       	st	X, r24
    183c:	83 c0       	rjmp	.+262    	; 0x1944 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	81 30       	cpi	r24, 0x01	; 1
    1842:	a1 f4       	brne	.+40     	; 0x186c <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
    1844:	a7 e3       	ldi	r26, 0x37	; 55
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e7 e3       	ldi	r30, 0x37	; 55
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	48 2f       	mov	r20, r24
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	02 2e       	mov	r0, r18
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <GPIO_setupPinDirection+0xe4>
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	0a 94       	dec	r0
    1864:	e2 f7       	brpl	.-8      	; 0x185e <GPIO_setupPinDirection+0xe0>
    1866:	84 2b       	or	r24, r20
    1868:	8c 93       	st	X, r24
    186a:	6c c0       	rjmp	.+216    	; 0x1944 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_num);
    186c:	a7 e3       	ldi	r26, 0x37	; 55
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e7 e3       	ldi	r30, 0x37	; 55
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	48 2f       	mov	r20, r24
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	02 2e       	mov	r0, r18
    1884:	02 c0       	rjmp	.+4      	; 0x188a <GPIO_setupPinDirection+0x10c>
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	0a 94       	dec	r0
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <GPIO_setupPinDirection+0x108>
    188e:	80 95       	com	r24
    1890:	84 23       	and	r24, r20
    1892:	8c 93       	st	X, r24
    1894:	57 c0       	rjmp	.+174    	; 0x1944 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	a1 f4       	brne	.+40     	; 0x18c4 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
    189c:	a4 e3       	ldi	r26, 0x34	; 52
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e4 e3       	ldi	r30, 0x34	; 52
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	48 2f       	mov	r20, r24
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	02 2e       	mov	r0, r18
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <GPIO_setupPinDirection+0x13c>
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	0a 94       	dec	r0
    18bc:	e2 f7       	brpl	.-8      	; 0x18b6 <GPIO_setupPinDirection+0x138>
    18be:	84 2b       	or	r24, r20
    18c0:	8c 93       	st	X, r24
    18c2:	40 c0       	rjmp	.+128    	; 0x1944 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_num);
    18c4:	a4 e3       	ldi	r26, 0x34	; 52
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	e4 e3       	ldi	r30, 0x34	; 52
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	48 2f       	mov	r20, r24
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	02 2e       	mov	r0, r18
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <GPIO_setupPinDirection+0x164>
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	0a 94       	dec	r0
    18e4:	e2 f7       	brpl	.-8      	; 0x18de <GPIO_setupPinDirection+0x160>
    18e6:	80 95       	com	r24
    18e8:	84 23       	and	r24, r20
    18ea:	8c 93       	st	X, r24
    18ec:	2b c0       	rjmp	.+86     	; 0x1944 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	81 30       	cpi	r24, 0x01	; 1
    18f2:	a1 f4       	brne	.+40     	; 0x191c <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
    18f4:	a1 e3       	ldi	r26, 0x31	; 49
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e1 e3       	ldi	r30, 0x31	; 49
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	48 2f       	mov	r20, r24
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	02 2e       	mov	r0, r18
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <GPIO_setupPinDirection+0x194>
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	0a 94       	dec	r0
    1914:	e2 f7       	brpl	.-8      	; 0x190e <GPIO_setupPinDirection+0x190>
    1916:	84 2b       	or	r24, r20
    1918:	8c 93       	st	X, r24
    191a:	14 c0       	rjmp	.+40     	; 0x1944 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_num);
    191c:	a1 e3       	ldi	r26, 0x31	; 49
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e1 e3       	ldi	r30, 0x31	; 49
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	48 2f       	mov	r20, r24
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	02 2e       	mov	r0, r18
    1934:	02 c0       	rjmp	.+4      	; 0x193a <GPIO_setupPinDirection+0x1bc>
    1936:	88 0f       	add	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	0a 94       	dec	r0
    193c:	e2 f7       	brpl	.-8      	; 0x1936 <GPIO_setupPinDirection+0x1b8>
    193e:	80 95       	com	r24
    1940:	84 23       	and	r24, r20
    1942:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	08 95       	ret

00001954 <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	00 d0       	rcall	.+0      	; 0x195a <GPIO_writePin+0x6>
    195a:	00 d0       	rcall	.+0      	; 0x195c <GPIO_writePin+0x8>
    195c:	0f 92       	push	r0
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	89 83       	std	Y+1, r24	; 0x01
    1964:	6a 83       	std	Y+2, r22	; 0x02
    1966:	4b 83       	std	Y+3, r20	; 0x03
	/*Invalid input*/
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	88 30       	cpi	r24, 0x08	; 8
    196c:	08 f0       	brcs	.+2      	; 0x1970 <GPIO_writePin+0x1c>
    196e:	e4 c0       	rjmp	.+456    	; 0x1b38 <GPIO_writePin+0x1e4>
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	84 30       	cpi	r24, 0x04	; 4
    1974:	08 f0       	brcs	.+2      	; 0x1978 <GPIO_writePin+0x24>
    1976:	e0 c0       	rjmp	.+448    	; 0x1b38 <GPIO_writePin+0x1e4>
		/*Do nothing*/

	} else {
		switch (port_num) {
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	3d 83       	std	Y+5, r19	; 0x05
    1980:	2c 83       	std	Y+4, r18	; 0x04
    1982:	8c 81       	ldd	r24, Y+4	; 0x04
    1984:	9d 81       	ldd	r25, Y+5	; 0x05
    1986:	81 30       	cpi	r24, 0x01	; 1
    1988:	91 05       	cpc	r25, r1
    198a:	09 f4       	brne	.+2      	; 0x198e <GPIO_writePin+0x3a>
    198c:	47 c0       	rjmp	.+142    	; 0x1a1c <GPIO_writePin+0xc8>
    198e:	2c 81       	ldd	r18, Y+4	; 0x04
    1990:	3d 81       	ldd	r19, Y+5	; 0x05
    1992:	22 30       	cpi	r18, 0x02	; 2
    1994:	31 05       	cpc	r19, r1
    1996:	2c f4       	brge	.+10     	; 0x19a2 <GPIO_writePin+0x4e>
    1998:	8c 81       	ldd	r24, Y+4	; 0x04
    199a:	9d 81       	ldd	r25, Y+5	; 0x05
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	71 f0       	breq	.+28     	; 0x19bc <GPIO_writePin+0x68>
    19a0:	cb c0       	rjmp	.+406    	; 0x1b38 <GPIO_writePin+0x1e4>
    19a2:	2c 81       	ldd	r18, Y+4	; 0x04
    19a4:	3d 81       	ldd	r19, Y+5	; 0x05
    19a6:	22 30       	cpi	r18, 0x02	; 2
    19a8:	31 05       	cpc	r19, r1
    19aa:	09 f4       	brne	.+2      	; 0x19ae <GPIO_writePin+0x5a>
    19ac:	67 c0       	rjmp	.+206    	; 0x1a7c <GPIO_writePin+0x128>
    19ae:	8c 81       	ldd	r24, Y+4	; 0x04
    19b0:	9d 81       	ldd	r25, Y+5	; 0x05
    19b2:	83 30       	cpi	r24, 0x03	; 3
    19b4:	91 05       	cpc	r25, r1
    19b6:	09 f4       	brne	.+2      	; 0x19ba <GPIO_writePin+0x66>
    19b8:	91 c0       	rjmp	.+290    	; 0x1adc <GPIO_writePin+0x188>
    19ba:	be c0       	rjmp	.+380    	; 0x1b38 <GPIO_writePin+0x1e4>
		case PORTA_ID:
			if (value == LOGIC_HIGH) {
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	81 30       	cpi	r24, 0x01	; 1
    19c0:	a1 f4       	brne	.+40     	; 0x19ea <GPIO_writePin+0x96>
				SET_BIT(PORTA, pin_num);
    19c2:	ab e3       	ldi	r26, 0x3B	; 59
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	eb e3       	ldi	r30, 0x3B	; 59
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	48 2f       	mov	r20, r24
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	02 2e       	mov	r0, r18
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <GPIO_writePin+0x8c>
    19dc:	88 0f       	add	r24, r24
    19de:	99 1f       	adc	r25, r25
    19e0:	0a 94       	dec	r0
    19e2:	e2 f7       	brpl	.-8      	; 0x19dc <GPIO_writePin+0x88>
    19e4:	84 2b       	or	r24, r20
    19e6:	8c 93       	st	X, r24
    19e8:	a7 c0       	rjmp	.+334    	; 0x1b38 <GPIO_writePin+0x1e4>
			} else if (value == LOGIC_LOW) {
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	88 23       	and	r24, r24
    19ee:	09 f0       	breq	.+2      	; 0x19f2 <GPIO_writePin+0x9e>
    19f0:	a3 c0       	rjmp	.+326    	; 0x1b38 <GPIO_writePin+0x1e4>
				CLEAR_BIT(PORTA, pin_num);
    19f2:	ab e3       	ldi	r26, 0x3B	; 59
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	eb e3       	ldi	r30, 0x3B	; 59
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	48 2f       	mov	r20, r24
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	02 2e       	mov	r0, r18
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <GPIO_writePin+0xbc>
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	0a 94       	dec	r0
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <GPIO_writePin+0xb8>
    1a14:	80 95       	com	r24
    1a16:	84 23       	and	r24, r20
    1a18:	8c 93       	st	X, r24
    1a1a:	8e c0       	rjmp	.+284    	; 0x1b38 <GPIO_writePin+0x1e4>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH) {
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	81 30       	cpi	r24, 0x01	; 1
    1a20:	a1 f4       	brne	.+40     	; 0x1a4a <GPIO_writePin+0xf6>
				SET_BIT(PORTB, pin_num);
    1a22:	a8 e3       	ldi	r26, 0x38	; 56
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e8 e3       	ldi	r30, 0x38	; 56
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	48 2f       	mov	r20, r24
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	02 2e       	mov	r0, r18
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <GPIO_writePin+0xec>
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	0a 94       	dec	r0
    1a42:	e2 f7       	brpl	.-8      	; 0x1a3c <GPIO_writePin+0xe8>
    1a44:	84 2b       	or	r24, r20
    1a46:	8c 93       	st	X, r24
    1a48:	77 c0       	rjmp	.+238    	; 0x1b38 <GPIO_writePin+0x1e4>
			} else if (value == LOGIC_LOW) {
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	88 23       	and	r24, r24
    1a4e:	09 f0       	breq	.+2      	; 0x1a52 <GPIO_writePin+0xfe>
    1a50:	73 c0       	rjmp	.+230    	; 0x1b38 <GPIO_writePin+0x1e4>
				CLEAR_BIT(PORTB, pin_num);
    1a52:	a8 e3       	ldi	r26, 0x38	; 56
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e8 e3       	ldi	r30, 0x38	; 56
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	48 2f       	mov	r20, r24
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	02 2e       	mov	r0, r18
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <GPIO_writePin+0x11c>
    1a6c:	88 0f       	add	r24, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	0a 94       	dec	r0
    1a72:	e2 f7       	brpl	.-8      	; 0x1a6c <GPIO_writePin+0x118>
    1a74:	80 95       	com	r24
    1a76:	84 23       	and	r24, r20
    1a78:	8c 93       	st	X, r24
    1a7a:	5e c0       	rjmp	.+188    	; 0x1b38 <GPIO_writePin+0x1e4>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH) {
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	81 30       	cpi	r24, 0x01	; 1
    1a80:	a1 f4       	brne	.+40     	; 0x1aaa <GPIO_writePin+0x156>
				SET_BIT(PORTC, pin_num);
    1a82:	a5 e3       	ldi	r26, 0x35	; 53
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e5 e3       	ldi	r30, 0x35	; 53
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	48 2f       	mov	r20, r24
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	02 2e       	mov	r0, r18
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <GPIO_writePin+0x14c>
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	0a 94       	dec	r0
    1aa2:	e2 f7       	brpl	.-8      	; 0x1a9c <GPIO_writePin+0x148>
    1aa4:	84 2b       	or	r24, r20
    1aa6:	8c 93       	st	X, r24
    1aa8:	47 c0       	rjmp	.+142    	; 0x1b38 <GPIO_writePin+0x1e4>
			} else if (value == LOGIC_LOW) {
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	88 23       	and	r24, r24
    1aae:	09 f0       	breq	.+2      	; 0x1ab2 <GPIO_writePin+0x15e>
    1ab0:	43 c0       	rjmp	.+134    	; 0x1b38 <GPIO_writePin+0x1e4>
				CLEAR_BIT(PORTC, pin_num);
    1ab2:	a5 e3       	ldi	r26, 0x35	; 53
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e5 e3       	ldi	r30, 0x35	; 53
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	48 2f       	mov	r20, r24
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	02 2e       	mov	r0, r18
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <GPIO_writePin+0x17c>
    1acc:	88 0f       	add	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	0a 94       	dec	r0
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <GPIO_writePin+0x178>
    1ad4:	80 95       	com	r24
    1ad6:	84 23       	and	r24, r20
    1ad8:	8c 93       	st	X, r24
    1ada:	2e c0       	rjmp	.+92     	; 0x1b38 <GPIO_writePin+0x1e4>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH) {
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	a1 f4       	brne	.+40     	; 0x1b0a <GPIO_writePin+0x1b6>
				SET_BIT(PORTD, pin_num);
    1ae2:	a2 e3       	ldi	r26, 0x32	; 50
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e2 e3       	ldi	r30, 0x32	; 50
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	48 2f       	mov	r20, r24
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	02 2e       	mov	r0, r18
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <GPIO_writePin+0x1ac>
    1afc:	88 0f       	add	r24, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	0a 94       	dec	r0
    1b02:	e2 f7       	brpl	.-8      	; 0x1afc <GPIO_writePin+0x1a8>
    1b04:	84 2b       	or	r24, r20
    1b06:	8c 93       	st	X, r24
    1b08:	17 c0       	rjmp	.+46     	; 0x1b38 <GPIO_writePin+0x1e4>
			} else if (value == LOGIC_LOW) {
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	88 23       	and	r24, r24
    1b0e:	a1 f4       	brne	.+40     	; 0x1b38 <GPIO_writePin+0x1e4>
				CLEAR_BIT(PORTD, pin_num);
    1b10:	a2 e3       	ldi	r26, 0x32	; 50
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e2 e3       	ldi	r30, 0x32	; 50
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	48 2f       	mov	r20, r24
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	02 2e       	mov	r0, r18
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <GPIO_writePin+0x1da>
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	0a 94       	dec	r0
    1b30:	e2 f7       	brpl	.-8      	; 0x1b2a <GPIO_writePin+0x1d6>
    1b32:	80 95       	com	r24
    1b34:	84 23       	and	r24, r20
    1b36:	8c 93       	st	X, r24
			}
			break;

		}
	}
}
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <GPIO_readPin+0x6>
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <GPIO_readPin+0x8>
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <GPIO_readPin+0xa>
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	8a 83       	std	Y+2, r24	; 0x02
    1b58:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_state = 0;
    1b5a:	19 82       	std	Y+1, r1	; 0x01
	/*Invalid input*/
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	88 30       	cpi	r24, 0x08	; 8
    1b60:	18 f4       	brcc	.+6      	; 0x1b68 <GPIO_readPin+0x20>
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	84 30       	cpi	r24, 0x04	; 4
    1b66:	10 f0       	brcs	.+4      	; 0x1b6c <GPIO_readPin+0x24>
		/*Return logic low*/
		return LOGIC_LOW;
    1b68:	1e 82       	std	Y+6, r1	; 0x06
    1b6a:	d4 c0       	rjmp	.+424    	; 0x1d14 <GPIO_readPin+0x1cc>
	} else {
		switch (port_num) {
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	3d 83       	std	Y+5, r19	; 0x05
    1b74:	2c 83       	std	Y+4, r18	; 0x04
    1b76:	4c 81       	ldd	r20, Y+4	; 0x04
    1b78:	5d 81       	ldd	r21, Y+5	; 0x05
    1b7a:	41 30       	cpi	r20, 0x01	; 1
    1b7c:	51 05       	cpc	r21, r1
    1b7e:	09 f4       	brne	.+2      	; 0x1b82 <GPIO_readPin+0x3a>
    1b80:	44 c0       	rjmp	.+136    	; 0x1c0a <GPIO_readPin+0xc2>
    1b82:	8c 81       	ldd	r24, Y+4	; 0x04
    1b84:	9d 81       	ldd	r25, Y+5	; 0x05
    1b86:	82 30       	cpi	r24, 0x02	; 2
    1b88:	91 05       	cpc	r25, r1
    1b8a:	34 f4       	brge	.+12     	; 0x1b98 <GPIO_readPin+0x50>
    1b8c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b8e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b90:	21 15       	cp	r18, r1
    1b92:	31 05       	cpc	r19, r1
    1b94:	71 f0       	breq	.+28     	; 0x1bb2 <GPIO_readPin+0x6a>
    1b96:	bb c0       	rjmp	.+374    	; 0x1d0e <GPIO_readPin+0x1c6>
    1b98:	4c 81       	ldd	r20, Y+4	; 0x04
    1b9a:	5d 81       	ldd	r21, Y+5	; 0x05
    1b9c:	42 30       	cpi	r20, 0x02	; 2
    1b9e:	51 05       	cpc	r21, r1
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <GPIO_readPin+0x5c>
    1ba2:	5f c0       	rjmp	.+190    	; 0x1c62 <GPIO_readPin+0x11a>
    1ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba8:	83 30       	cpi	r24, 0x03	; 3
    1baa:	91 05       	cpc	r25, r1
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <GPIO_readPin+0x68>
    1bae:	84 c0       	rjmp	.+264    	; 0x1cb8 <GPIO_readPin+0x170>
    1bb0:	ae c0       	rjmp	.+348    	; 0x1d0e <GPIO_readPin+0x1c6>
		case PORTA_ID:
			if (BIT_IS_SET(PINA, pin_num)) {
    1bb2:	e9 e3       	ldi	r30, 0x39	; 57
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	88 2f       	mov	r24, r24
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	a9 01       	movw	r20, r18
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <GPIO_readPin+0x82>
    1bc6:	55 95       	asr	r21
    1bc8:	47 95       	ror	r20
    1bca:	8a 95       	dec	r24
    1bcc:	e2 f7       	brpl	.-8      	; 0x1bc6 <GPIO_readPin+0x7e>
    1bce:	ca 01       	movw	r24, r20
    1bd0:	81 70       	andi	r24, 0x01	; 1
    1bd2:	90 70       	andi	r25, 0x00	; 0
    1bd4:	88 23       	and	r24, r24
    1bd6:	19 f0       	breq	.+6      	; 0x1bde <GPIO_readPin+0x96>
				pin_state = LOGIC_HIGH;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	89 83       	std	Y+1, r24	; 0x01
    1bdc:	99 c0       	rjmp	.+306    	; 0x1d10 <GPIO_readPin+0x1c8>
			} else if (BIT_IS_CLEAR(PINA, pin_num)) {
    1bde:	e9 e3       	ldi	r30, 0x39	; 57
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	88 2f       	mov	r24, r24
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	a9 01       	movw	r20, r18
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <GPIO_readPin+0xae>
    1bf2:	55 95       	asr	r21
    1bf4:	47 95       	ror	r20
    1bf6:	8a 95       	dec	r24
    1bf8:	e2 f7       	brpl	.-8      	; 0x1bf2 <GPIO_readPin+0xaa>
    1bfa:	ca 01       	movw	r24, r20
    1bfc:	81 70       	andi	r24, 0x01	; 1
    1bfe:	90 70       	andi	r25, 0x00	; 0
    1c00:	00 97       	sbiw	r24, 0x00	; 0
    1c02:	09 f0       	breq	.+2      	; 0x1c06 <GPIO_readPin+0xbe>
    1c04:	85 c0       	rjmp	.+266    	; 0x1d10 <GPIO_readPin+0x1c8>
				pin_state = LOGIC_LOW;
    1c06:	19 82       	std	Y+1, r1	; 0x01
    1c08:	83 c0       	rjmp	.+262    	; 0x1d10 <GPIO_readPin+0x1c8>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB, pin_num)) {
    1c0a:	e6 e3       	ldi	r30, 0x36	; 54
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	28 2f       	mov	r18, r24
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	88 2f       	mov	r24, r24
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	a9 01       	movw	r20, r18
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <GPIO_readPin+0xda>
    1c1e:	55 95       	asr	r21
    1c20:	47 95       	ror	r20
    1c22:	8a 95       	dec	r24
    1c24:	e2 f7       	brpl	.-8      	; 0x1c1e <GPIO_readPin+0xd6>
    1c26:	ca 01       	movw	r24, r20
    1c28:	81 70       	andi	r24, 0x01	; 1
    1c2a:	90 70       	andi	r25, 0x00	; 0
    1c2c:	88 23       	and	r24, r24
    1c2e:	19 f0       	breq	.+6      	; 0x1c36 <GPIO_readPin+0xee>
				pin_state = LOGIC_HIGH;
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	89 83       	std	Y+1, r24	; 0x01
    1c34:	6d c0       	rjmp	.+218    	; 0x1d10 <GPIO_readPin+0x1c8>
			} else if (BIT_IS_CLEAR(PINB, pin_num)) {
    1c36:	e6 e3       	ldi	r30, 0x36	; 54
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	88 2f       	mov	r24, r24
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	a9 01       	movw	r20, r18
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <GPIO_readPin+0x106>
    1c4a:	55 95       	asr	r21
    1c4c:	47 95       	ror	r20
    1c4e:	8a 95       	dec	r24
    1c50:	e2 f7       	brpl	.-8      	; 0x1c4a <GPIO_readPin+0x102>
    1c52:	ca 01       	movw	r24, r20
    1c54:	81 70       	andi	r24, 0x01	; 1
    1c56:	90 70       	andi	r25, 0x00	; 0
    1c58:	00 97       	sbiw	r24, 0x00	; 0
    1c5a:	09 f0       	breq	.+2      	; 0x1c5e <GPIO_readPin+0x116>
    1c5c:	59 c0       	rjmp	.+178    	; 0x1d10 <GPIO_readPin+0x1c8>
				pin_state = LOGIC_LOW;
    1c5e:	19 82       	std	Y+1, r1	; 0x01
    1c60:	57 c0       	rjmp	.+174    	; 0x1d10 <GPIO_readPin+0x1c8>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC, pin_num)) {
    1c62:	e3 e3       	ldi	r30, 0x33	; 51
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	88 2f       	mov	r24, r24
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	a9 01       	movw	r20, r18
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <GPIO_readPin+0x132>
    1c76:	55 95       	asr	r21
    1c78:	47 95       	ror	r20
    1c7a:	8a 95       	dec	r24
    1c7c:	e2 f7       	brpl	.-8      	; 0x1c76 <GPIO_readPin+0x12e>
    1c7e:	ca 01       	movw	r24, r20
    1c80:	81 70       	andi	r24, 0x01	; 1
    1c82:	90 70       	andi	r25, 0x00	; 0
    1c84:	88 23       	and	r24, r24
    1c86:	19 f0       	breq	.+6      	; 0x1c8e <GPIO_readPin+0x146>
				pin_state = LOGIC_HIGH;
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	89 83       	std	Y+1, r24	; 0x01
    1c8c:	41 c0       	rjmp	.+130    	; 0x1d10 <GPIO_readPin+0x1c8>
			} else if (BIT_IS_CLEAR(PINC, pin_num)) {
    1c8e:	e3 e3       	ldi	r30, 0x33	; 51
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	88 2f       	mov	r24, r24
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	a9 01       	movw	r20, r18
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <GPIO_readPin+0x15e>
    1ca2:	55 95       	asr	r21
    1ca4:	47 95       	ror	r20
    1ca6:	8a 95       	dec	r24
    1ca8:	e2 f7       	brpl	.-8      	; 0x1ca2 <GPIO_readPin+0x15a>
    1caa:	ca 01       	movw	r24, r20
    1cac:	81 70       	andi	r24, 0x01	; 1
    1cae:	90 70       	andi	r25, 0x00	; 0
    1cb0:	00 97       	sbiw	r24, 0x00	; 0
    1cb2:	71 f5       	brne	.+92     	; 0x1d10 <GPIO_readPin+0x1c8>
				pin_state = LOGIC_LOW;
    1cb4:	19 82       	std	Y+1, r1	; 0x01
    1cb6:	2c c0       	rjmp	.+88     	; 0x1d10 <GPIO_readPin+0x1c8>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND, pin_num)) {
    1cb8:	e0 e3       	ldi	r30, 0x30	; 48
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	88 2f       	mov	r24, r24
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	a9 01       	movw	r20, r18
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <GPIO_readPin+0x188>
    1ccc:	55 95       	asr	r21
    1cce:	47 95       	ror	r20
    1cd0:	8a 95       	dec	r24
    1cd2:	e2 f7       	brpl	.-8      	; 0x1ccc <GPIO_readPin+0x184>
    1cd4:	ca 01       	movw	r24, r20
    1cd6:	81 70       	andi	r24, 0x01	; 1
    1cd8:	90 70       	andi	r25, 0x00	; 0
    1cda:	88 23       	and	r24, r24
    1cdc:	19 f0       	breq	.+6      	; 0x1ce4 <GPIO_readPin+0x19c>
				pin_state = LOGIC_HIGH;
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	89 83       	std	Y+1, r24	; 0x01
    1ce2:	16 c0       	rjmp	.+44     	; 0x1d10 <GPIO_readPin+0x1c8>
			} else if (BIT_IS_CLEAR(PIND, pin_num)) {
    1ce4:	e0 e3       	ldi	r30, 0x30	; 48
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	88 2f       	mov	r24, r24
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	a9 01       	movw	r20, r18
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <GPIO_readPin+0x1b4>
    1cf8:	55 95       	asr	r21
    1cfa:	47 95       	ror	r20
    1cfc:	8a 95       	dec	r24
    1cfe:	e2 f7       	brpl	.-8      	; 0x1cf8 <GPIO_readPin+0x1b0>
    1d00:	ca 01       	movw	r24, r20
    1d02:	81 70       	andi	r24, 0x01	; 1
    1d04:	90 70       	andi	r25, 0x00	; 0
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	19 f4       	brne	.+6      	; 0x1d10 <GPIO_readPin+0x1c8>
				pin_state = LOGIC_LOW;
    1d0a:	19 82       	std	Y+1, r1	; 0x01
    1d0c:	01 c0       	rjmp	.+2      	; 0x1d10 <GPIO_readPin+0x1c8>
			}
			break;
		default:
			pin_state = LOGIC_LOW;
    1d0e:	19 82       	std	Y+1, r1	; 0x01
			break;
		}

	}
	return pin_state;
    1d10:	59 81       	ldd	r21, Y+1	; 0x01
    1d12:	5e 83       	std	Y+6, r21	; 0x06
    1d14:	8e 81       	ldd	r24, Y+6	; 0x06

}
    1d16:	26 96       	adiw	r28, 0x06	; 6
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	00 d0       	rcall	.+0      	; 0x1d2e <GPIO_setupPortDirection+0x6>
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <GPIO_setupPortDirection+0x8>
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
    1d34:	89 83       	std	Y+1, r24	; 0x01
    1d36:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	84 30       	cpi	r24, 0x04	; 4
    1d3c:	90 f5       	brcc	.+100    	; 0x1da2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	} else {
		/* Setup the port direction as required */
		switch (port_num) {
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	3c 83       	std	Y+4, r19	; 0x04
    1d46:	2b 83       	std	Y+3, r18	; 0x03
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4c:	81 30       	cpi	r24, 0x01	; 1
    1d4e:	91 05       	cpc	r25, r1
    1d50:	d1 f0       	breq	.+52     	; 0x1d86 <GPIO_setupPortDirection+0x5e>
    1d52:	2b 81       	ldd	r18, Y+3	; 0x03
    1d54:	3c 81       	ldd	r19, Y+4	; 0x04
    1d56:	22 30       	cpi	r18, 0x02	; 2
    1d58:	31 05       	cpc	r19, r1
    1d5a:	2c f4       	brge	.+10     	; 0x1d66 <GPIO_setupPortDirection+0x3e>
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	61 f0       	breq	.+24     	; 0x1d7c <GPIO_setupPortDirection+0x54>
    1d64:	1e c0       	rjmp	.+60     	; 0x1da2 <GPIO_setupPortDirection+0x7a>
    1d66:	2b 81       	ldd	r18, Y+3	; 0x03
    1d68:	3c 81       	ldd	r19, Y+4	; 0x04
    1d6a:	22 30       	cpi	r18, 0x02	; 2
    1d6c:	31 05       	cpc	r19, r1
    1d6e:	81 f0       	breq	.+32     	; 0x1d90 <GPIO_setupPortDirection+0x68>
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	9c 81       	ldd	r25, Y+4	; 0x04
    1d74:	83 30       	cpi	r24, 0x03	; 3
    1d76:	91 05       	cpc	r25, r1
    1d78:	81 f0       	breq	.+32     	; 0x1d9a <GPIO_setupPortDirection+0x72>
    1d7a:	13 c0       	rjmp	.+38     	; 0x1da2 <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    1d7c:	ea e3       	ldi	r30, 0x3A	; 58
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	80 83       	st	Z, r24
    1d84:	0e c0       	rjmp	.+28     	; 0x1da2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1d86:	e7 e3       	ldi	r30, 0x37	; 55
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	80 83       	st	Z, r24
    1d8e:	09 c0       	rjmp	.+18     	; 0x1da2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1d90:	e4 e3       	ldi	r30, 0x34	; 52
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	80 83       	st	Z, r24
    1d98:	04 c0       	rjmp	.+8      	; 0x1da2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1d9a:	e1 e3       	ldi	r30, 0x31	; 49
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	80 83       	st	Z, r24
			break;
		}
	}
}
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	08 95       	ret

00001db0 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	00 d0       	rcall	.+0      	; 0x1db6 <GPIO_writePort+0x6>
    1db6:	00 d0       	rcall	.+0      	; 0x1db8 <GPIO_writePort+0x8>
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	89 83       	std	Y+1, r24	; 0x01
    1dbe:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_num >= NUM_OF_PORTS)) {
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	84 30       	cpi	r24, 0x04	; 4
    1dc4:	90 f5       	brcc	.+100    	; 0x1e2a <GPIO_writePort+0x7a>
		/*Do nothing*/
	} else {
		switch (port_num) {
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	3c 83       	std	Y+4, r19	; 0x04
    1dce:	2b 83       	std	Y+3, r18	; 0x03
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd4:	81 30       	cpi	r24, 0x01	; 1
    1dd6:	91 05       	cpc	r25, r1
    1dd8:	d1 f0       	breq	.+52     	; 0x1e0e <GPIO_writePort+0x5e>
    1dda:	2b 81       	ldd	r18, Y+3	; 0x03
    1ddc:	3c 81       	ldd	r19, Y+4	; 0x04
    1dde:	22 30       	cpi	r18, 0x02	; 2
    1de0:	31 05       	cpc	r19, r1
    1de2:	2c f4       	brge	.+10     	; 0x1dee <GPIO_writePort+0x3e>
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	9c 81       	ldd	r25, Y+4	; 0x04
    1de8:	00 97       	sbiw	r24, 0x00	; 0
    1dea:	61 f0       	breq	.+24     	; 0x1e04 <GPIO_writePort+0x54>
    1dec:	1e c0       	rjmp	.+60     	; 0x1e2a <GPIO_writePort+0x7a>
    1dee:	2b 81       	ldd	r18, Y+3	; 0x03
    1df0:	3c 81       	ldd	r19, Y+4	; 0x04
    1df2:	22 30       	cpi	r18, 0x02	; 2
    1df4:	31 05       	cpc	r19, r1
    1df6:	81 f0       	breq	.+32     	; 0x1e18 <GPIO_writePort+0x68>
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfc:	83 30       	cpi	r24, 0x03	; 3
    1dfe:	91 05       	cpc	r25, r1
    1e00:	81 f0       	breq	.+32     	; 0x1e22 <GPIO_writePort+0x72>
    1e02:	13 c0       	rjmp	.+38     	; 0x1e2a <GPIO_writePort+0x7a>

		case PORTA_ID:
			PORTA = value;
    1e04:	eb e3       	ldi	r30, 0x3B	; 59
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0a:	80 83       	st	Z, r24
    1e0c:	0e c0       	rjmp	.+28     	; 0x1e2a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1e0e:	e8 e3       	ldi	r30, 0x38	; 56
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	80 83       	st	Z, r24
    1e16:	09 c0       	rjmp	.+18     	; 0x1e2a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1e18:	e5 e3       	ldi	r30, 0x35	; 53
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1e:	80 83       	st	Z, r24
    1e20:	04 c0       	rjmp	.+8      	; 0x1e2a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1e22:	e2 e3       	ldi	r30, 0x32	; 50
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	80 83       	st	Z, r24
			break;

		}
	}
}
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	cf 91       	pop	r28
    1e34:	df 91       	pop	r29
    1e36:	08 95       	ret

00001e38 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    1e38:	df 93       	push	r29
    1e3a:	cf 93       	push	r28
    1e3c:	00 d0       	rcall	.+0      	; 0x1e3e <GPIO_readPort+0x6>
    1e3e:	00 d0       	rcall	.+0      	; 0x1e40 <GPIO_readPort+0x8>
    1e40:	0f 92       	push	r0
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value = 0;
    1e48:	19 82       	std	Y+1, r1	; 0x01
	if (port_num >= NUM_OF_PORTS) {
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	84 30       	cpi	r24, 0x04	; 4
    1e4e:	10 f0       	brcs	.+4      	; 0x1e54 <GPIO_readPort+0x1c>
		/*Return 0*/
		return 0x00;
    1e50:	1d 82       	std	Y+5, r1	; 0x05
    1e52:	34 c0       	rjmp	.+104    	; 0x1ebc <GPIO_readPort+0x84>
	} else {
		switch (port_num) {
    1e54:	8a 81       	ldd	r24, Y+2	; 0x02
    1e56:	28 2f       	mov	r18, r24
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	3c 83       	std	Y+4, r19	; 0x04
    1e5c:	2b 83       	std	Y+3, r18	; 0x03
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	9c 81       	ldd	r25, Y+4	; 0x04
    1e62:	81 30       	cpi	r24, 0x01	; 1
    1e64:	91 05       	cpc	r25, r1
    1e66:	d1 f0       	breq	.+52     	; 0x1e9c <GPIO_readPort+0x64>
    1e68:	2b 81       	ldd	r18, Y+3	; 0x03
    1e6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e6c:	22 30       	cpi	r18, 0x02	; 2
    1e6e:	31 05       	cpc	r19, r1
    1e70:	2c f4       	brge	.+10     	; 0x1e7c <GPIO_readPort+0x44>
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	9c 81       	ldd	r25, Y+4	; 0x04
    1e76:	00 97       	sbiw	r24, 0x00	; 0
    1e78:	61 f0       	breq	.+24     	; 0x1e92 <GPIO_readPort+0x5a>
    1e7a:	1e c0       	rjmp	.+60     	; 0x1eb8 <GPIO_readPort+0x80>
    1e7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e80:	22 30       	cpi	r18, 0x02	; 2
    1e82:	31 05       	cpc	r19, r1
    1e84:	81 f0       	breq	.+32     	; 0x1ea6 <GPIO_readPort+0x6e>
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8a:	83 30       	cpi	r24, 0x03	; 3
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	81 f0       	breq	.+32     	; 0x1eb0 <GPIO_readPort+0x78>
    1e90:	13 c0       	rjmp	.+38     	; 0x1eb8 <GPIO_readPort+0x80>
		case PORTA_ID:
			port_value = PINA;
    1e92:	e9 e3       	ldi	r30, 0x39	; 57
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	89 83       	std	Y+1, r24	; 0x01
    1e9a:	0e c0       	rjmp	.+28     	; 0x1eb8 <GPIO_readPort+0x80>
			break;
		case PORTB_ID:
			port_value = PINB;
    1e9c:	e6 e3       	ldi	r30, 0x36	; 54
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	89 83       	std	Y+1, r24	; 0x01
    1ea4:	09 c0       	rjmp	.+18     	; 0x1eb8 <GPIO_readPort+0x80>
			break;
		case PORTC_ID:
			port_value = PINC;
    1ea6:	e3 e3       	ldi	r30, 0x33	; 51
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	89 83       	std	Y+1, r24	; 0x01
    1eae:	04 c0       	rjmp	.+8      	; 0x1eb8 <GPIO_readPort+0x80>
			break;
		case PORTD_ID:
			port_value = PIND;
    1eb0:	e0 e3       	ldi	r30, 0x30	; 48
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return port_value;
    1eb8:	99 81       	ldd	r25, Y+1	; 0x01
    1eba:	9d 83       	std	Y+5, r25	; 0x05
    1ebc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	08 95       	ret

00001ece <__vector_19>:
/*******************************************************************************
 *                              ISR's Definitions                              *
 *******************************************************************************/

/**********Timer 0 ISR's**********/
ISR(TIMER0_COMP_vect) {
    1ece:	1f 92       	push	r1
    1ed0:	0f 92       	push	r0
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	0f 92       	push	r0
    1ed6:	11 24       	eor	r1, r1
    1ed8:	2f 93       	push	r18
    1eda:	3f 93       	push	r19
    1edc:	4f 93       	push	r20
    1ede:	5f 93       	push	r21
    1ee0:	6f 93       	push	r22
    1ee2:	7f 93       	push	r23
    1ee4:	8f 93       	push	r24
    1ee6:	9f 93       	push	r25
    1ee8:	af 93       	push	r26
    1eea:	bf 93       	push	r27
    1eec:	ef 93       	push	r30
    1eee:	ff 93       	push	r31
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0_callbackNotif != NULL_PTR) {
    1ef8:	80 91 90 01 	lds	r24, 0x0190
    1efc:	90 91 91 01 	lds	r25, 0x0191
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	29 f0       	breq	.+10     	; 0x1f0e <__vector_19+0x40>
		(*g_Timer0_callbackNotif)();
    1f04:	e0 91 90 01 	lds	r30, 0x0190
    1f08:	f0 91 91 01 	lds	r31, 0x0191
    1f0c:	09 95       	icall
	}
}
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	ff 91       	pop	r31
    1f14:	ef 91       	pop	r30
    1f16:	bf 91       	pop	r27
    1f18:	af 91       	pop	r26
    1f1a:	9f 91       	pop	r25
    1f1c:	8f 91       	pop	r24
    1f1e:	7f 91       	pop	r23
    1f20:	6f 91       	pop	r22
    1f22:	5f 91       	pop	r21
    1f24:	4f 91       	pop	r20
    1f26:	3f 91       	pop	r19
    1f28:	2f 91       	pop	r18
    1f2a:	0f 90       	pop	r0
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	0f 90       	pop	r0
    1f30:	1f 90       	pop	r1
    1f32:	18 95       	reti

00001f34 <__vector_9>:
ISR(TIMER0_OVF_vect) {
    1f34:	1f 92       	push	r1
    1f36:	0f 92       	push	r0
    1f38:	0f b6       	in	r0, 0x3f	; 63
    1f3a:	0f 92       	push	r0
    1f3c:	11 24       	eor	r1, r1
    1f3e:	2f 93       	push	r18
    1f40:	3f 93       	push	r19
    1f42:	4f 93       	push	r20
    1f44:	5f 93       	push	r21
    1f46:	6f 93       	push	r22
    1f48:	7f 93       	push	r23
    1f4a:	8f 93       	push	r24
    1f4c:	9f 93       	push	r25
    1f4e:	af 93       	push	r26
    1f50:	bf 93       	push	r27
    1f52:	ef 93       	push	r30
    1f54:	ff 93       	push	r31
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0_callbackNotif != NULL_PTR) {
    1f5e:	80 91 90 01 	lds	r24, 0x0190
    1f62:	90 91 91 01 	lds	r25, 0x0191
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	29 f0       	breq	.+10     	; 0x1f74 <__vector_9+0x40>
		(*g_Timer0_callbackNotif)();
    1f6a:	e0 91 90 01 	lds	r30, 0x0190
    1f6e:	f0 91 91 01 	lds	r31, 0x0191
    1f72:	09 95       	icall
	}
}
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	ff 91       	pop	r31
    1f7a:	ef 91       	pop	r30
    1f7c:	bf 91       	pop	r27
    1f7e:	af 91       	pop	r26
    1f80:	9f 91       	pop	r25
    1f82:	8f 91       	pop	r24
    1f84:	7f 91       	pop	r23
    1f86:	6f 91       	pop	r22
    1f88:	5f 91       	pop	r21
    1f8a:	4f 91       	pop	r20
    1f8c:	3f 91       	pop	r19
    1f8e:	2f 91       	pop	r18
    1f90:	0f 90       	pop	r0
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	0f 90       	pop	r0
    1f96:	1f 90       	pop	r1
    1f98:	18 95       	reti

00001f9a <__vector_8>:

/**********Timer 1 ISR's**********/
ISR(TIMER1_OVF_vect) {
    1f9a:	1f 92       	push	r1
    1f9c:	0f 92       	push	r0
    1f9e:	0f b6       	in	r0, 0x3f	; 63
    1fa0:	0f 92       	push	r0
    1fa2:	11 24       	eor	r1, r1
    1fa4:	2f 93       	push	r18
    1fa6:	3f 93       	push	r19
    1fa8:	4f 93       	push	r20
    1faa:	5f 93       	push	r21
    1fac:	6f 93       	push	r22
    1fae:	7f 93       	push	r23
    1fb0:	8f 93       	push	r24
    1fb2:	9f 93       	push	r25
    1fb4:	af 93       	push	r26
    1fb6:	bf 93       	push	r27
    1fb8:	ef 93       	push	r30
    1fba:	ff 93       	push	r31
    1fbc:	df 93       	push	r29
    1fbe:	cf 93       	push	r28
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1_callbackNotif != NULL_PTR) {
    1fc4:	80 91 92 01 	lds	r24, 0x0192
    1fc8:	90 91 93 01 	lds	r25, 0x0193
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	29 f0       	breq	.+10     	; 0x1fda <__vector_8+0x40>
		(*g_Timer1_callbackNotif)();
    1fd0:	e0 91 92 01 	lds	r30, 0x0192
    1fd4:	f0 91 93 01 	lds	r31, 0x0193
    1fd8:	09 95       	icall
	}
}
    1fda:	cf 91       	pop	r28
    1fdc:	df 91       	pop	r29
    1fde:	ff 91       	pop	r31
    1fe0:	ef 91       	pop	r30
    1fe2:	bf 91       	pop	r27
    1fe4:	af 91       	pop	r26
    1fe6:	9f 91       	pop	r25
    1fe8:	8f 91       	pop	r24
    1fea:	7f 91       	pop	r23
    1fec:	6f 91       	pop	r22
    1fee:	5f 91       	pop	r21
    1ff0:	4f 91       	pop	r20
    1ff2:	3f 91       	pop	r19
    1ff4:	2f 91       	pop	r18
    1ff6:	0f 90       	pop	r0
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	0f 90       	pop	r0
    1ffc:	1f 90       	pop	r1
    1ffe:	18 95       	reti

00002000 <__vector_6>:
ISR(TIMER1_COMPA_vect) {
    2000:	1f 92       	push	r1
    2002:	0f 92       	push	r0
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	0f 92       	push	r0
    2008:	11 24       	eor	r1, r1
    200a:	2f 93       	push	r18
    200c:	3f 93       	push	r19
    200e:	4f 93       	push	r20
    2010:	5f 93       	push	r21
    2012:	6f 93       	push	r22
    2014:	7f 93       	push	r23
    2016:	8f 93       	push	r24
    2018:	9f 93       	push	r25
    201a:	af 93       	push	r26
    201c:	bf 93       	push	r27
    201e:	ef 93       	push	r30
    2020:	ff 93       	push	r31
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1_callbackNotif != NULL_PTR) {
    202a:	80 91 92 01 	lds	r24, 0x0192
    202e:	90 91 93 01 	lds	r25, 0x0193
    2032:	00 97       	sbiw	r24, 0x00	; 0
    2034:	29 f0       	breq	.+10     	; 0x2040 <__vector_6+0x40>
		(*g_Timer1_callbackNotif)();
    2036:	e0 91 92 01 	lds	r30, 0x0192
    203a:	f0 91 93 01 	lds	r31, 0x0193
    203e:	09 95       	icall
	}
}
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	ff 91       	pop	r31
    2046:	ef 91       	pop	r30
    2048:	bf 91       	pop	r27
    204a:	af 91       	pop	r26
    204c:	9f 91       	pop	r25
    204e:	8f 91       	pop	r24
    2050:	7f 91       	pop	r23
    2052:	6f 91       	pop	r22
    2054:	5f 91       	pop	r21
    2056:	4f 91       	pop	r20
    2058:	3f 91       	pop	r19
    205a:	2f 91       	pop	r18
    205c:	0f 90       	pop	r0
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	0f 90       	pop	r0
    2062:	1f 90       	pop	r1
    2064:	18 95       	reti

00002066 <__vector_4>:

/**********Timer 2 ISR's**********/
ISR(TIMER2_OVF_vect) {
    2066:	1f 92       	push	r1
    2068:	0f 92       	push	r0
    206a:	0f b6       	in	r0, 0x3f	; 63
    206c:	0f 92       	push	r0
    206e:	11 24       	eor	r1, r1
    2070:	2f 93       	push	r18
    2072:	3f 93       	push	r19
    2074:	4f 93       	push	r20
    2076:	5f 93       	push	r21
    2078:	6f 93       	push	r22
    207a:	7f 93       	push	r23
    207c:	8f 93       	push	r24
    207e:	9f 93       	push	r25
    2080:	af 93       	push	r26
    2082:	bf 93       	push	r27
    2084:	ef 93       	push	r30
    2086:	ff 93       	push	r31
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2_callbackNotif != NULL_PTR) {
    2090:	80 91 94 01 	lds	r24, 0x0194
    2094:	90 91 95 01 	lds	r25, 0x0195
    2098:	00 97       	sbiw	r24, 0x00	; 0
    209a:	29 f0       	breq	.+10     	; 0x20a6 <__vector_4+0x40>
		(*g_Timer2_callbackNotif)();
    209c:	e0 91 94 01 	lds	r30, 0x0194
    20a0:	f0 91 95 01 	lds	r31, 0x0195
    20a4:	09 95       	icall
	}
}
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	ff 91       	pop	r31
    20ac:	ef 91       	pop	r30
    20ae:	bf 91       	pop	r27
    20b0:	af 91       	pop	r26
    20b2:	9f 91       	pop	r25
    20b4:	8f 91       	pop	r24
    20b6:	7f 91       	pop	r23
    20b8:	6f 91       	pop	r22
    20ba:	5f 91       	pop	r21
    20bc:	4f 91       	pop	r20
    20be:	3f 91       	pop	r19
    20c0:	2f 91       	pop	r18
    20c2:	0f 90       	pop	r0
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	0f 90       	pop	r0
    20c8:	1f 90       	pop	r1
    20ca:	18 95       	reti

000020cc <__vector_3>:
ISR(TIMER2_COMP_vect) {
    20cc:	1f 92       	push	r1
    20ce:	0f 92       	push	r0
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	0f 92       	push	r0
    20d4:	11 24       	eor	r1, r1
    20d6:	2f 93       	push	r18
    20d8:	3f 93       	push	r19
    20da:	4f 93       	push	r20
    20dc:	5f 93       	push	r21
    20de:	6f 93       	push	r22
    20e0:	7f 93       	push	r23
    20e2:	8f 93       	push	r24
    20e4:	9f 93       	push	r25
    20e6:	af 93       	push	r26
    20e8:	bf 93       	push	r27
    20ea:	ef 93       	push	r30
    20ec:	ff 93       	push	r31
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2_callbackNotif != NULL_PTR) {
    20f6:	80 91 94 01 	lds	r24, 0x0194
    20fa:	90 91 95 01 	lds	r25, 0x0195
    20fe:	00 97       	sbiw	r24, 0x00	; 0
    2100:	29 f0       	breq	.+10     	; 0x210c <__vector_3+0x40>
		(*g_Timer2_callbackNotif)();
    2102:	e0 91 94 01 	lds	r30, 0x0194
    2106:	f0 91 95 01 	lds	r31, 0x0195
    210a:	09 95       	icall
	}
}
    210c:	cf 91       	pop	r28
    210e:	df 91       	pop	r29
    2110:	ff 91       	pop	r31
    2112:	ef 91       	pop	r30
    2114:	bf 91       	pop	r27
    2116:	af 91       	pop	r26
    2118:	9f 91       	pop	r25
    211a:	8f 91       	pop	r24
    211c:	7f 91       	pop	r23
    211e:	6f 91       	pop	r22
    2120:	5f 91       	pop	r21
    2122:	4f 91       	pop	r20
    2124:	3f 91       	pop	r19
    2126:	2f 91       	pop	r18
    2128:	0f 90       	pop	r0
    212a:	0f be       	out	0x3f, r0	; 63
    212c:	0f 90       	pop	r0
    212e:	1f 90       	pop	r1
    2130:	18 95       	reti

00002132 <Timer_init>:

/*******************************************************************************
 *                              Functions Definitions                          *
 *******************************************************************************/

void Timer_init(const Timer_ConfigType *Config) {
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	00 d0       	rcall	.+0      	; 0x2138 <Timer_init+0x6>
    2138:	00 d0       	rcall	.+0      	; 0x213a <Timer_init+0x8>
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	9a 83       	std	Y+2, r25	; 0x02
    2140:	89 83       	std	Y+1, r24	; 0x01

	switch (Config->Timer_ID) {
    2142:	e9 81       	ldd	r30, Y+1	; 0x01
    2144:	fa 81       	ldd	r31, Y+2	; 0x02
    2146:	80 81       	ld	r24, Z
    2148:	28 2f       	mov	r18, r24
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	3c 83       	std	Y+4, r19	; 0x04
    214e:	2b 83       	std	Y+3, r18	; 0x03
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	9c 81       	ldd	r25, Y+4	; 0x04
    2154:	81 30       	cpi	r24, 0x01	; 1
    2156:	91 05       	cpc	r25, r1
    2158:	09 f4       	brne	.+2      	; 0x215c <Timer_init+0x2a>
    215a:	54 c0       	rjmp	.+168    	; 0x2204 <Timer_init+0xd2>
    215c:	2b 81       	ldd	r18, Y+3	; 0x03
    215e:	3c 81       	ldd	r19, Y+4	; 0x04
    2160:	22 30       	cpi	r18, 0x02	; 2
    2162:	31 05       	cpc	r19, r1
    2164:	09 f4       	brne	.+2      	; 0x2168 <Timer_init+0x36>
    2166:	a8 c0       	rjmp	.+336    	; 0x22b8 <Timer_init+0x186>
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	9c 81       	ldd	r25, Y+4	; 0x04
    216c:	00 97       	sbiw	r24, 0x00	; 0
    216e:	09 f0       	breq	.+2      	; 0x2172 <Timer_init+0x40>
    2170:	fa c0       	rjmp	.+500    	; 0x2366 <Timer_init+0x234>

	/********************************* Timer 0 Setup *********************************/
	case TIMER0_ID:
		/**************** Clearing timer/counter register ****************/

		TCNT0 = 0;
    2172:	e2 e5       	ldi	r30, 0x52	; 82
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	10 82       	st	Z, r1

		/**************** Configuring Mode, Interrupts & Pre-scaler ****************/

		if (Config->Mode == Timer_Mode_Compare) {
    2178:	e9 81       	ldd	r30, Y+1	; 0x01
    217a:	fa 81       	ldd	r31, Y+2	; 0x02
    217c:	82 81       	ldd	r24, Z+2	; 0x02
    217e:	81 30       	cpi	r24, 0x01	; 1
    2180:	b9 f4       	brne	.+46     	; 0x21b0 <Timer_init+0x7e>
			/* Load compare value into OCR0 register*/
			OCR0 = Config->Compare_Value;
    2182:	ac e5       	ldi	r26, 0x5C	; 92
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	e9 81       	ldd	r30, Y+1	; 0x01
    2188:	fa 81       	ldd	r31, Y+2	; 0x02
    218a:	83 81       	ldd	r24, Z+3	; 0x03
    218c:	94 81       	ldd	r25, Z+4	; 0x04
    218e:	8c 93       	st	X, r24

			/* Enable/Disable interrupt for compare mode*/
			TIMSK |= (Config->Interrupt_Enable << OCIE0);
    2190:	a9 e5       	ldi	r26, 0x59	; 89
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	e9 e5       	ldi	r30, 0x59	; 89
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	28 2f       	mov	r18, r24
    219c:	e9 81       	ldd	r30, Y+1	; 0x01
    219e:	fa 81       	ldd	r31, Y+2	; 0x02
    21a0:	85 81       	ldd	r24, Z+5	; 0x05
    21a2:	88 2f       	mov	r24, r24
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	88 0f       	add	r24, r24
    21a8:	99 1f       	adc	r25, r25
    21aa:	82 2b       	or	r24, r18
    21ac:	8c 93       	st	X, r24
    21ae:	0f c0       	rjmp	.+30     	; 0x21ce <Timer_init+0x9c>

		} else if (Config->Mode == Timer_Mode_Normal) {
    21b0:	e9 81       	ldd	r30, Y+1	; 0x01
    21b2:	fa 81       	ldd	r31, Y+2	; 0x02
    21b4:	82 81       	ldd	r24, Z+2	; 0x02
    21b6:	88 23       	and	r24, r24
    21b8:	51 f4       	brne	.+20     	; 0x21ce <Timer_init+0x9c>

			/* Enable/Disable interrupt for overflow mode*/
			TIMSK |= (Config->Interrupt_Enable << TOIE0);
    21ba:	a9 e5       	ldi	r26, 0x59	; 89
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e9 e5       	ldi	r30, 0x59	; 89
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	90 81       	ld	r25, Z
    21c4:	e9 81       	ldd	r30, Y+1	; 0x01
    21c6:	fa 81       	ldd	r31, Y+2	; 0x02
    21c8:	85 81       	ldd	r24, Z+5	; 0x05
    21ca:	89 2b       	or	r24, r25
    21cc:	8c 93       	st	X, r24
		}
		Timer0_Current_Clock = Config->Prescaler;
    21ce:	e9 81       	ldd	r30, Y+1	; 0x01
    21d0:	fa 81       	ldd	r31, Y+2	; 0x02
    21d2:	81 81       	ldd	r24, Z+1	; 0x01
    21d4:	80 93 96 01 	sts	0x0196, r24
		TCCR0 = (1 << FOC0) | (Config->Mode << WGM01)
    21d8:	a3 e5       	ldi	r26, 0x53	; 83
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	e9 81       	ldd	r30, Y+1	; 0x01
    21de:	fa 81       	ldd	r31, Y+2	; 0x02
    21e0:	82 81       	ldd	r24, Z+2	; 0x02
    21e2:	88 2f       	mov	r24, r24
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	88 0f       	add	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	98 2f       	mov	r25, r24
    21f4:	90 68       	ori	r25, 0x80	; 128
    21f6:	e9 81       	ldd	r30, Y+1	; 0x01
    21f8:	fa 81       	ldd	r31, Y+2	; 0x02
    21fa:	81 81       	ldd	r24, Z+1	; 0x01
    21fc:	87 70       	andi	r24, 0x07	; 7
    21fe:	89 2b       	or	r24, r25
    2200:	8c 93       	st	X, r24
    2202:	b1 c0       	rjmp	.+354    	; 0x2366 <Timer_init+0x234>

		/********************************* Timer 1 Setup *********************************/
	case TIMER1_ID:

		/**************** Clearing timer/counter register ****************/
		TCNT1 = 0;
    2204:	ec e4       	ldi	r30, 0x4C	; 76
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	11 82       	std	Z+1, r1	; 0x01
    220a:	10 82       	st	Z, r1
		/**************** Configuring FOC bits ****************/

		/*
		 * -FOC1A,B = 1 -> Needed for any non-PWM mode.
		 * */
		TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    220c:	ef e4       	ldi	r30, 0x4F	; 79
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	8c e0       	ldi	r24, 0x0C	; 12
    2212:	80 83       	st	Z, r24

		/**************** Configuring Mode, Interrupts & Pre-scaler ****************/

		if (Config->Mode == Timer_Mode_Compare) {
    2214:	e9 81       	ldd	r30, Y+1	; 0x01
    2216:	fa 81       	ldd	r31, Y+2	; 0x02
    2218:	82 81       	ldd	r24, Z+2	; 0x02
    221a:	81 30       	cpi	r24, 0x01	; 1
    221c:	e9 f4       	brne	.+58     	; 0x2258 <Timer_init+0x126>
			/* Load compare value into OCR0 register*/
			OCR1A = Config->Compare_Value;
    221e:	aa e4       	ldi	r26, 0x4A	; 74
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	e9 81       	ldd	r30, Y+1	; 0x01
    2224:	fa 81       	ldd	r31, Y+2	; 0x02
    2226:	83 81       	ldd	r24, Z+3	; 0x03
    2228:	94 81       	ldd	r25, Z+4	; 0x04
    222a:	11 96       	adiw	r26, 0x01	; 1
    222c:	9c 93       	st	X, r25
    222e:	8e 93       	st	-X, r24

			/* Enable/Disable interrupt for compare mode*/
			TIMSK |= (Config->Interrupt_Enable << OCIE1A);
    2230:	a9 e5       	ldi	r26, 0x59	; 89
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e9 e5       	ldi	r30, 0x59	; 89
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	28 2f       	mov	r18, r24
    223c:	e9 81       	ldd	r30, Y+1	; 0x01
    223e:	fa 81       	ldd	r31, Y+2	; 0x02
    2240:	85 81       	ldd	r24, Z+5	; 0x05
    2242:	88 2f       	mov	r24, r24
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	82 95       	swap	r24
    2248:	92 95       	swap	r25
    224a:	90 7f       	andi	r25, 0xF0	; 240
    224c:	98 27       	eor	r25, r24
    224e:	80 7f       	andi	r24, 0xF0	; 240
    2250:	98 27       	eor	r25, r24
    2252:	82 2b       	or	r24, r18
    2254:	8c 93       	st	X, r24
    2256:	16 c0       	rjmp	.+44     	; 0x2284 <Timer_init+0x152>
		} else if (Config->Mode == Timer_Mode_Normal) {
    2258:	e9 81       	ldd	r30, Y+1	; 0x01
    225a:	fa 81       	ldd	r31, Y+2	; 0x02
    225c:	82 81       	ldd	r24, Z+2	; 0x02
    225e:	88 23       	and	r24, r24
    2260:	89 f4       	brne	.+34     	; 0x2284 <Timer_init+0x152>
			/* Enable/Disable interrupt for overflow mode*/
			TIMSK |= (Config->Interrupt_Enable << TOIE1);
    2262:	a9 e5       	ldi	r26, 0x59	; 89
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	e9 e5       	ldi	r30, 0x59	; 89
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	28 2f       	mov	r18, r24
    226e:	e9 81       	ldd	r30, Y+1	; 0x01
    2270:	fa 81       	ldd	r31, Y+2	; 0x02
    2272:	85 81       	ldd	r24, Z+5	; 0x05
    2274:	88 2f       	mov	r24, r24
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	88 0f       	add	r24, r24
    227a:	99 1f       	adc	r25, r25
    227c:	88 0f       	add	r24, r24
    227e:	99 1f       	adc	r25, r25
    2280:	82 2b       	or	r24, r18
    2282:	8c 93       	st	X, r24
		}
		Timer1_Current_Clock = Config->Prescaler;
    2284:	e9 81       	ldd	r30, Y+1	; 0x01
    2286:	fa 81       	ldd	r31, Y+2	; 0x02
    2288:	81 81       	ldd	r24, Z+1	; 0x01
    228a:	80 93 97 01 	sts	0x0197, r24
		/* -WGM12 = Mode-> To set mode to either normal/CTC
		 * 	For normal mode: WGM1 2:0 = 000
		 * 	For CTC    mode: WGM1 2:0 = 100
		 * -Insert pre-scaler bits CS1 2:0 in the first 3 bits
		 * */
		TCCR1B = (Config->Mode << WGM12) | (Config->Prescaler & 0x07);
    228e:	ae e4       	ldi	r26, 0x4E	; 78
    2290:	b0 e0       	ldi	r27, 0x00	; 0
    2292:	e9 81       	ldd	r30, Y+1	; 0x01
    2294:	fa 81       	ldd	r31, Y+2	; 0x02
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	88 2f       	mov	r24, r24
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	88 0f       	add	r24, r24
    229e:	99 1f       	adc	r25, r25
    22a0:	88 0f       	add	r24, r24
    22a2:	99 1f       	adc	r25, r25
    22a4:	88 0f       	add	r24, r24
    22a6:	99 1f       	adc	r25, r25
    22a8:	98 2f       	mov	r25, r24
    22aa:	e9 81       	ldd	r30, Y+1	; 0x01
    22ac:	fa 81       	ldd	r31, Y+2	; 0x02
    22ae:	81 81       	ldd	r24, Z+1	; 0x01
    22b0:	87 70       	andi	r24, 0x07	; 7
    22b2:	89 2b       	or	r24, r25
    22b4:	8c 93       	st	X, r24
    22b6:	57 c0       	rjmp	.+174    	; 0x2366 <Timer_init+0x234>
		/********************************* Timer 2 Setup *********************************/
	case TIMER2_ID:

		/**************** Clearing timer/counter register ****************/

		TCNT2 = 0;
    22b8:	e4 e4       	ldi	r30, 0x44	; 68
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	10 82       	st	Z, r1

		/**************** Configuring Mode, Interrupts & Pre-scaler ****************/

		if (Config->Mode == Timer_Mode_Compare) {
    22be:	e9 81       	ldd	r30, Y+1	; 0x01
    22c0:	fa 81       	ldd	r31, Y+2	; 0x02
    22c2:	82 81       	ldd	r24, Z+2	; 0x02
    22c4:	81 30       	cpi	r24, 0x01	; 1
    22c6:	d1 f4       	brne	.+52     	; 0x22fc <Timer_init+0x1ca>
			/* Load compare value into OCR0 register*/
			OCR2 = Config->Compare_Value;
    22c8:	a3 e4       	ldi	r26, 0x43	; 67
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	e9 81       	ldd	r30, Y+1	; 0x01
    22ce:	fa 81       	ldd	r31, Y+2	; 0x02
    22d0:	83 81       	ldd	r24, Z+3	; 0x03
    22d2:	94 81       	ldd	r25, Z+4	; 0x04
    22d4:	8c 93       	st	X, r24

			/* Enable/Disable interrupt for compare mode*/
			TIMSK |= (Config->Interrupt_Enable << OCIE2);
    22d6:	a9 e5       	ldi	r26, 0x59	; 89
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	e9 e5       	ldi	r30, 0x59	; 89
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	28 2f       	mov	r18, r24
    22e2:	e9 81       	ldd	r30, Y+1	; 0x01
    22e4:	fa 81       	ldd	r31, Y+2	; 0x02
    22e6:	85 81       	ldd	r24, Z+5	; 0x05
    22e8:	88 2f       	mov	r24, r24
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	96 95       	lsr	r25
    22ee:	98 2f       	mov	r25, r24
    22f0:	88 27       	eor	r24, r24
    22f2:	97 95       	ror	r25
    22f4:	87 95       	ror	r24
    22f6:	82 2b       	or	r24, r18
    22f8:	8c 93       	st	X, r24
    22fa:	1b c0       	rjmp	.+54     	; 0x2332 <Timer_init+0x200>

		} else if (Config->Mode == Timer_Mode_Normal) {
    22fc:	e9 81       	ldd	r30, Y+1	; 0x01
    22fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2300:	82 81       	ldd	r24, Z+2	; 0x02
    2302:	88 23       	and	r24, r24
    2304:	b1 f4       	brne	.+44     	; 0x2332 <Timer_init+0x200>

			/* Enable/Disable interrupt for overflow mode*/
			TIMSK |= (Config->Interrupt_Enable << TOIE2);
    2306:	a9 e5       	ldi	r26, 0x59	; 89
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	e9 e5       	ldi	r30, 0x59	; 89
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	28 2f       	mov	r18, r24
    2312:	e9 81       	ldd	r30, Y+1	; 0x01
    2314:	fa 81       	ldd	r31, Y+2	; 0x02
    2316:	85 81       	ldd	r24, Z+5	; 0x05
    2318:	88 2f       	mov	r24, r24
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	00 24       	eor	r0, r0
    231e:	96 95       	lsr	r25
    2320:	87 95       	ror	r24
    2322:	07 94       	ror	r0
    2324:	96 95       	lsr	r25
    2326:	87 95       	ror	r24
    2328:	07 94       	ror	r0
    232a:	98 2f       	mov	r25, r24
    232c:	80 2d       	mov	r24, r0
    232e:	82 2b       	or	r24, r18
    2330:	8c 93       	st	X, r24
		}
		Timer2_Current_Clock = Config->Prescaler;
    2332:	e9 81       	ldd	r30, Y+1	; 0x01
    2334:	fa 81       	ldd	r31, Y+2	; 0x02
    2336:	81 81       	ldd	r24, Z+1	; 0x01
    2338:	80 93 98 01 	sts	0x0198, r24
		 * -Insert pre-scaler bits CS2 2:0 in the first 3 bits
		 * -WGM21 = Mode-> To set mode to either normal/CTC
		 * 	For normal mode: WGM2 1:0 = 00
		 * 	For CTC    mode: WGM2 1:0 = 10
		 * */
		TCCR2 = (1 << FOC2) | (Config->Mode << WGM21)
    233c:	a5 e4       	ldi	r26, 0x45	; 69
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	e9 81       	ldd	r30, Y+1	; 0x01
    2342:	fa 81       	ldd	r31, Y+2	; 0x02
    2344:	82 81       	ldd	r24, Z+2	; 0x02
    2346:	88 2f       	mov	r24, r24
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	88 0f       	add	r24, r24
    234c:	99 1f       	adc	r25, r25
    234e:	88 0f       	add	r24, r24
    2350:	99 1f       	adc	r25, r25
    2352:	88 0f       	add	r24, r24
    2354:	99 1f       	adc	r25, r25
    2356:	98 2f       	mov	r25, r24
    2358:	90 68       	ori	r25, 0x80	; 128
    235a:	e9 81       	ldd	r30, Y+1	; 0x01
    235c:	fa 81       	ldd	r31, Y+2	; 0x02
    235e:	81 81       	ldd	r24, Z+1	; 0x01
    2360:	87 70       	andi	r24, 0x07	; 7
    2362:	89 2b       	or	r24, r25
    2364:	8c 93       	st	X, r24

		break;

	}

}
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	cf 91       	pop	r28
    2370:	df 91       	pop	r29
    2372:	08 95       	ret

00002374 <Timer_setCallback>:
void Timer_setCallback(uint8 a_Timer_ID, void (*a_ptrToCallback)(void)) {
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	00 d0       	rcall	.+0      	; 0x237a <Timer_setCallback+0x6>
    237a:	00 d0       	rcall	.+0      	; 0x237c <Timer_setCallback+0x8>
    237c:	0f 92       	push	r0
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
    2382:	89 83       	std	Y+1, r24	; 0x01
    2384:	7b 83       	std	Y+3, r23	; 0x03
    2386:	6a 83       	std	Y+2, r22	; 0x02
	/* Set the callback function of a timer according to timer ID*/
	switch (a_Timer_ID) {
    2388:	89 81       	ldd	r24, Y+1	; 0x01
    238a:	28 2f       	mov	r18, r24
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	3d 83       	std	Y+5, r19	; 0x05
    2390:	2c 83       	std	Y+4, r18	; 0x04
    2392:	8c 81       	ldd	r24, Y+4	; 0x04
    2394:	9d 81       	ldd	r25, Y+5	; 0x05
    2396:	81 30       	cpi	r24, 0x01	; 1
    2398:	91 05       	cpc	r25, r1
    239a:	81 f0       	breq	.+32     	; 0x23bc <Timer_setCallback+0x48>
    239c:	2c 81       	ldd	r18, Y+4	; 0x04
    239e:	3d 81       	ldd	r19, Y+5	; 0x05
    23a0:	22 30       	cpi	r18, 0x02	; 2
    23a2:	31 05       	cpc	r19, r1
    23a4:	91 f0       	breq	.+36     	; 0x23ca <Timer_setCallback+0x56>
    23a6:	8c 81       	ldd	r24, Y+4	; 0x04
    23a8:	9d 81       	ldd	r25, Y+5	; 0x05
    23aa:	00 97       	sbiw	r24, 0x00	; 0
    23ac:	a1 f4       	brne	.+40     	; 0x23d6 <Timer_setCallback+0x62>
	case TIMER0_ID:
		g_Timer0_callbackNotif = a_ptrToCallback;
    23ae:	8a 81       	ldd	r24, Y+2	; 0x02
    23b0:	9b 81       	ldd	r25, Y+3	; 0x03
    23b2:	90 93 91 01 	sts	0x0191, r25
    23b6:	80 93 90 01 	sts	0x0190, r24
    23ba:	0d c0       	rjmp	.+26     	; 0x23d6 <Timer_setCallback+0x62>
		break;
	case TIMER1_ID:
		g_Timer1_callbackNotif = a_ptrToCallback;
    23bc:	8a 81       	ldd	r24, Y+2	; 0x02
    23be:	9b 81       	ldd	r25, Y+3	; 0x03
    23c0:	90 93 93 01 	sts	0x0193, r25
    23c4:	80 93 92 01 	sts	0x0192, r24
    23c8:	06 c0       	rjmp	.+12     	; 0x23d6 <Timer_setCallback+0x62>
		break;
	case TIMER2_ID:
		g_Timer2_callbackNotif = a_ptrToCallback;
    23ca:	8a 81       	ldd	r24, Y+2	; 0x02
    23cc:	9b 81       	ldd	r25, Y+3	; 0x03
    23ce:	90 93 95 01 	sts	0x0195, r25
    23d2:	80 93 94 01 	sts	0x0194, r24
		break;
	}
}
    23d6:	0f 90       	pop	r0
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	cf 91       	pop	r28
    23e2:	df 91       	pop	r29
    23e4:	08 95       	ret

000023e6 <Timer_setCompareValue>:

void Timer_setCompareValue(uint8 a_Timer_ID, uint16 a_CompareVal) {
    23e6:	df 93       	push	r29
    23e8:	cf 93       	push	r28
    23ea:	00 d0       	rcall	.+0      	; 0x23ec <Timer_setCompareValue+0x6>
    23ec:	00 d0       	rcall	.+0      	; 0x23ee <Timer_setCompareValue+0x8>
    23ee:	0f 92       	push	r0
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	89 83       	std	Y+1, r24	; 0x01
    23f6:	7b 83       	std	Y+3, r23	; 0x03
    23f8:	6a 83       	std	Y+2, r22	; 0x02
	/* Sets a new compare value in OCR register according to timer ID*/
	switch (a_Timer_ID) {
    23fa:	89 81       	ldd	r24, Y+1	; 0x01
    23fc:	28 2f       	mov	r18, r24
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	3d 83       	std	Y+5, r19	; 0x05
    2402:	2c 83       	std	Y+4, r18	; 0x04
    2404:	8c 81       	ldd	r24, Y+4	; 0x04
    2406:	9d 81       	ldd	r25, Y+5	; 0x05
    2408:	81 30       	cpi	r24, 0x01	; 1
    240a:	91 05       	cpc	r25, r1
    240c:	71 f0       	breq	.+28     	; 0x242a <Timer_setCompareValue+0x44>
    240e:	2c 81       	ldd	r18, Y+4	; 0x04
    2410:	3d 81       	ldd	r19, Y+5	; 0x05
    2412:	22 30       	cpi	r18, 0x02	; 2
    2414:	31 05       	cpc	r19, r1
    2416:	81 f0       	breq	.+32     	; 0x2438 <Timer_setCompareValue+0x52>
    2418:	8c 81       	ldd	r24, Y+4	; 0x04
    241a:	9d 81       	ldd	r25, Y+5	; 0x05
    241c:	00 97       	sbiw	r24, 0x00	; 0
    241e:	81 f4       	brne	.+32     	; 0x2440 <Timer_setCompareValue+0x5a>
	case TIMER0_ID:
		OCR0 = a_CompareVal;
    2420:	ec e5       	ldi	r30, 0x5C	; 92
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	8a 81       	ldd	r24, Y+2	; 0x02
    2426:	80 83       	st	Z, r24
    2428:	0b c0       	rjmp	.+22     	; 0x2440 <Timer_setCompareValue+0x5a>
		break;
	case TIMER1_ID:
		OCR1A = a_CompareVal;
    242a:	ea e4       	ldi	r30, 0x4A	; 74
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	8a 81       	ldd	r24, Y+2	; 0x02
    2430:	9b 81       	ldd	r25, Y+3	; 0x03
    2432:	91 83       	std	Z+1, r25	; 0x01
    2434:	80 83       	st	Z, r24
    2436:	04 c0       	rjmp	.+8      	; 0x2440 <Timer_setCompareValue+0x5a>
		break;
	case TIMER2_ID:
		OCR2 = a_CompareVal;
    2438:	e3 e4       	ldi	r30, 0x43	; 67
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	8a 81       	ldd	r24, Y+2	; 0x02
    243e:	80 83       	st	Z, r24
		break;
	}
}
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
    2446:	0f 90       	pop	r0
    2448:	0f 90       	pop	r0
    244a:	cf 91       	pop	r28
    244c:	df 91       	pop	r29
    244e:	08 95       	ret

00002450 <Timer_getTimerValue>:
uint16 Timer_getTimerValue(uint8 a_Timer_ID) {
    2450:	df 93       	push	r29
    2452:	cf 93       	push	r28
    2454:	00 d0       	rcall	.+0      	; 0x2456 <Timer_getTimerValue+0x6>
    2456:	00 d0       	rcall	.+0      	; 0x2458 <Timer_getTimerValue+0x8>
    2458:	0f 92       	push	r0
    245a:	cd b7       	in	r28, 0x3d	; 61
    245c:	de b7       	in	r29, 0x3e	; 62
    245e:	89 83       	std	Y+1, r24	; 0x01
	switch (a_Timer_ID) {
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	28 2f       	mov	r18, r24
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	3d 83       	std	Y+5, r19	; 0x05
    2468:	2c 83       	std	Y+4, r18	; 0x04
    246a:	8c 81       	ldd	r24, Y+4	; 0x04
    246c:	9d 81       	ldd	r25, Y+5	; 0x05
    246e:	81 30       	cpi	r24, 0x01	; 1
    2470:	91 05       	cpc	r25, r1
    2472:	89 f0       	breq	.+34     	; 0x2496 <Timer_getTimerValue+0x46>
    2474:	2c 81       	ldd	r18, Y+4	; 0x04
    2476:	3d 81       	ldd	r19, Y+5	; 0x05
    2478:	22 30       	cpi	r18, 0x02	; 2
    247a:	31 05       	cpc	r19, r1
    247c:	99 f0       	breq	.+38     	; 0x24a4 <Timer_getTimerValue+0x54>
    247e:	8c 81       	ldd	r24, Y+4	; 0x04
    2480:	9d 81       	ldd	r25, Y+5	; 0x05
    2482:	00 97       	sbiw	r24, 0x00	; 0
    2484:	b9 f4       	brne	.+46     	; 0x24b4 <Timer_getTimerValue+0x64>
	case TIMER0_ID:
		return TCNT0;
    2486:	e2 e5       	ldi	r30, 0x52	; 82
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	28 2f       	mov	r18, r24
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	3b 83       	std	Y+3, r19	; 0x03
    2492:	2a 83       	std	Y+2, r18	; 0x02
    2494:	11 c0       	rjmp	.+34     	; 0x24b8 <Timer_getTimerValue+0x68>
		break;
	case TIMER1_ID:
		return TCNT1;
    2496:	ec e4       	ldi	r30, 0x4C	; 76
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	91 81       	ldd	r25, Z+1	; 0x01
    249e:	9b 83       	std	Y+3, r25	; 0x03
    24a0:	8a 83       	std	Y+2, r24	; 0x02
    24a2:	0a c0       	rjmp	.+20     	; 0x24b8 <Timer_getTimerValue+0x68>
		break;
	case TIMER2_ID:
		return TCNT2;
    24a4:	e4 e4       	ldi	r30, 0x44	; 68
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	28 2f       	mov	r18, r24
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	3b 83       	std	Y+3, r19	; 0x03
    24b0:	2a 83       	std	Y+2, r18	; 0x02
    24b2:	02 c0       	rjmp	.+4      	; 0x24b8 <Timer_getTimerValue+0x68>
		break;
	}
	return 0;
    24b4:	1b 82       	std	Y+3, r1	; 0x03
    24b6:	1a 82       	std	Y+2, r1	; 0x02
    24b8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ba:	9b 81       	ldd	r25, Y+3	; 0x03
}
    24bc:	0f 90       	pop	r0
    24be:	0f 90       	pop	r0
    24c0:	0f 90       	pop	r0
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	08 95       	ret

000024cc <Timer_stop>:
void Timer_stop(uint8 a_Timer_ID) {
    24cc:	df 93       	push	r29
    24ce:	cf 93       	push	r28
    24d0:	00 d0       	rcall	.+0      	; 0x24d2 <Timer_stop+0x6>
    24d2:	0f 92       	push	r0
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
    24d8:	89 83       	std	Y+1, r24	; 0x01
	switch (a_Timer_ID) {
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	28 2f       	mov	r18, r24
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	3b 83       	std	Y+3, r19	; 0x03
    24e2:	2a 83       	std	Y+2, r18	; 0x02
    24e4:	8a 81       	ldd	r24, Y+2	; 0x02
    24e6:	9b 81       	ldd	r25, Y+3	; 0x03
    24e8:	81 30       	cpi	r24, 0x01	; 1
    24ea:	91 05       	cpc	r25, r1
    24ec:	89 f0       	breq	.+34     	; 0x2510 <Timer_stop+0x44>
    24ee:	2a 81       	ldd	r18, Y+2	; 0x02
    24f0:	3b 81       	ldd	r19, Y+3	; 0x03
    24f2:	22 30       	cpi	r18, 0x02	; 2
    24f4:	31 05       	cpc	r19, r1
    24f6:	a1 f0       	breq	.+40     	; 0x2520 <Timer_stop+0x54>
    24f8:	8a 81       	ldd	r24, Y+2	; 0x02
    24fa:	9b 81       	ldd	r25, Y+3	; 0x03
    24fc:	00 97       	sbiw	r24, 0x00	; 0
    24fe:	b9 f4       	brne	.+46     	; 0x252e <Timer_stop+0x62>
	case TIMER0_ID:
		/* Clear first 3 bits which set clock */
		TCCR0 &= (0xF8);
    2500:	a3 e5       	ldi	r26, 0x53	; 83
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	e3 e5       	ldi	r30, 0x53	; 83
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	88 7f       	andi	r24, 0xF8	; 248
    250c:	8c 93       	st	X, r24
    250e:	0f c0       	rjmp	.+30     	; 0x252e <Timer_stop+0x62>
		break;
	case TIMER1_ID:
		/* Clear first 3 bits which set clock */
		TCCR1B &= (0xF8);
    2510:	ae e4       	ldi	r26, 0x4E	; 78
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	ee e4       	ldi	r30, 0x4E	; 78
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	88 7f       	andi	r24, 0xF8	; 248
    251c:	8c 93       	st	X, r24
    251e:	07 c0       	rjmp	.+14     	; 0x252e <Timer_stop+0x62>
		break;
	case TIMER2_ID:
		/* Clear first 3 bits which set clock */
		TCCR2 &= (0xF8);
    2520:	a5 e4       	ldi	r26, 0x45	; 69
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	e5 e4       	ldi	r30, 0x45	; 69
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
    252a:	88 7f       	andi	r24, 0xF8	; 248
    252c:	8c 93       	st	X, r24
		break;
	}
}
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	0f 90       	pop	r0
    2534:	cf 91       	pop	r28
    2536:	df 91       	pop	r29
    2538:	08 95       	ret

0000253a <Timer_resume>:
void Timer_resume(uint8 a_Timer_ID) {
    253a:	df 93       	push	r29
    253c:	cf 93       	push	r28
    253e:	00 d0       	rcall	.+0      	; 0x2540 <Timer_resume+0x6>
    2540:	0f 92       	push	r0
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
    2546:	89 83       	std	Y+1, r24	; 0x01
	switch (a_Timer_ID) {
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	28 2f       	mov	r18, r24
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	3b 83       	std	Y+3, r19	; 0x03
    2550:	2a 83       	std	Y+2, r18	; 0x02
    2552:	8a 81       	ldd	r24, Y+2	; 0x02
    2554:	9b 81       	ldd	r25, Y+3	; 0x03
    2556:	81 30       	cpi	r24, 0x01	; 1
    2558:	91 05       	cpc	r25, r1
    255a:	a9 f0       	breq	.+42     	; 0x2586 <Timer_resume+0x4c>
    255c:	2a 81       	ldd	r18, Y+2	; 0x02
    255e:	3b 81       	ldd	r19, Y+3	; 0x03
    2560:	22 30       	cpi	r18, 0x02	; 2
    2562:	31 05       	cpc	r19, r1
    2564:	e1 f0       	breq	.+56     	; 0x259e <Timer_resume+0x64>
    2566:	8a 81       	ldd	r24, Y+2	; 0x02
    2568:	9b 81       	ldd	r25, Y+3	; 0x03
    256a:	00 97       	sbiw	r24, 0x00	; 0
    256c:	19 f5       	brne	.+70     	; 0x25b4 <Timer_resume+0x7a>
	case TIMER0_ID:
		TCCR0 |= (Timer0_Current_Clock & 0x07);
    256e:	a3 e5       	ldi	r26, 0x53	; 83
    2570:	b0 e0       	ldi	r27, 0x00	; 0
    2572:	e3 e5       	ldi	r30, 0x53	; 83
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	80 81       	ld	r24, Z
    2578:	98 2f       	mov	r25, r24
    257a:	80 91 96 01 	lds	r24, 0x0196
    257e:	87 70       	andi	r24, 0x07	; 7
    2580:	89 2b       	or	r24, r25
    2582:	8c 93       	st	X, r24
    2584:	17 c0       	rjmp	.+46     	; 0x25b4 <Timer_resume+0x7a>
		break;
	case TIMER1_ID:
		TCCR1B |= (Timer1_Current_Clock & 0x07);
    2586:	ae e4       	ldi	r26, 0x4E	; 78
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	ee e4       	ldi	r30, 0x4E	; 78
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	98 2f       	mov	r25, r24
    2592:	80 91 97 01 	lds	r24, 0x0197
    2596:	87 70       	andi	r24, 0x07	; 7
    2598:	89 2b       	or	r24, r25
    259a:	8c 93       	st	X, r24
    259c:	0b c0       	rjmp	.+22     	; 0x25b4 <Timer_resume+0x7a>
		break;
	case TIMER2_ID:
		TCCR2 |= (Timer0_Current_Clock & 0x07);
    259e:	a5 e4       	ldi	r26, 0x45	; 69
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	e5 e4       	ldi	r30, 0x45	; 69
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	80 81       	ld	r24, Z
    25a8:	98 2f       	mov	r25, r24
    25aa:	80 91 96 01 	lds	r24, 0x0196
    25ae:	87 70       	andi	r24, 0x07	; 7
    25b0:	89 2b       	or	r24, r25
    25b2:	8c 93       	st	X, r24
		break;
	}
}
    25b4:	0f 90       	pop	r0
    25b6:	0f 90       	pop	r0
    25b8:	0f 90       	pop	r0
    25ba:	cf 91       	pop	r28
    25bc:	df 91       	pop	r29
    25be:	08 95       	ret

000025c0 <Timer_resetTimerValue>:

void Timer_resetTimerValue(uint8 a_Timer_ID) {
    25c0:	df 93       	push	r29
    25c2:	cf 93       	push	r28
    25c4:	00 d0       	rcall	.+0      	; 0x25c6 <Timer_resetTimerValue+0x6>
    25c6:	0f 92       	push	r0
    25c8:	cd b7       	in	r28, 0x3d	; 61
    25ca:	de b7       	in	r29, 0x3e	; 62
    25cc:	89 83       	std	Y+1, r24	; 0x01
	switch (a_Timer_ID) {
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	28 2f       	mov	r18, r24
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	3b 83       	std	Y+3, r19	; 0x03
    25d6:	2a 83       	std	Y+2, r18	; 0x02
    25d8:	8a 81       	ldd	r24, Y+2	; 0x02
    25da:	9b 81       	ldd	r25, Y+3	; 0x03
    25dc:	81 30       	cpi	r24, 0x01	; 1
    25de:	91 05       	cpc	r25, r1
    25e0:	69 f0       	breq	.+26     	; 0x25fc <Timer_resetTimerValue+0x3c>
    25e2:	2a 81       	ldd	r18, Y+2	; 0x02
    25e4:	3b 81       	ldd	r19, Y+3	; 0x03
    25e6:	22 30       	cpi	r18, 0x02	; 2
    25e8:	31 05       	cpc	r19, r1
    25ea:	69 f0       	breq	.+26     	; 0x2606 <Timer_resetTimerValue+0x46>
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	9b 81       	ldd	r25, Y+3	; 0x03
    25f0:	00 97       	sbiw	r24, 0x00	; 0
    25f2:	61 f4       	brne	.+24     	; 0x260c <Timer_resetTimerValue+0x4c>
	case TIMER0_ID:
		TCNT0 = 0;
    25f4:	e2 e5       	ldi	r30, 0x52	; 82
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	10 82       	st	Z, r1
    25fa:	08 c0       	rjmp	.+16     	; 0x260c <Timer_resetTimerValue+0x4c>
		break;
	case TIMER1_ID:
		TCNT1 = 0;
    25fc:	ec e4       	ldi	r30, 0x4C	; 76
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	11 82       	std	Z+1, r1	; 0x01
    2602:	10 82       	st	Z, r1
    2604:	03 c0       	rjmp	.+6      	; 0x260c <Timer_resetTimerValue+0x4c>
		break;
	case TIMER2_ID:
		TCNT2 = 0;
    2606:	e4 e4       	ldi	r30, 0x44	; 68
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	10 82       	st	Z, r1
		break;
	}
}
    260c:	0f 90       	pop	r0
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	cf 91       	pop	r28
    2614:	df 91       	pop	r29
    2616:	08 95       	ret

00002618 <Timer_DeInit>:

void Timer_DeInit(uint8 a_Timer_ID) {
    2618:	df 93       	push	r29
    261a:	cf 93       	push	r28
    261c:	00 d0       	rcall	.+0      	; 0x261e <Timer_DeInit+0x6>
    261e:	0f 92       	push	r0
    2620:	cd b7       	in	r28, 0x3d	; 61
    2622:	de b7       	in	r29, 0x3e	; 62
    2624:	89 83       	std	Y+1, r24	; 0x01
	switch (a_Timer_ID) {
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	28 2f       	mov	r18, r24
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	3b 83       	std	Y+3, r19	; 0x03
    262e:	2a 83       	std	Y+2, r18	; 0x02
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	9b 81       	ldd	r25, Y+3	; 0x03
    2634:	81 30       	cpi	r24, 0x01	; 1
    2636:	91 05       	cpc	r25, r1
    2638:	d1 f0       	breq	.+52     	; 0x266e <Timer_DeInit+0x56>
    263a:	2a 81       	ldd	r18, Y+2	; 0x02
    263c:	3b 81       	ldd	r19, Y+3	; 0x03
    263e:	22 30       	cpi	r18, 0x02	; 2
    2640:	31 05       	cpc	r19, r1
    2642:	61 f1       	breq	.+88     	; 0x269c <Timer_DeInit+0x84>
    2644:	8a 81       	ldd	r24, Y+2	; 0x02
    2646:	9b 81       	ldd	r25, Y+3	; 0x03
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	c1 f5       	brne	.+112    	; 0x26bc <Timer_DeInit+0xa4>
	case TIMER0_ID:
		/* Clear timer registers */
		TCCR0 = 0;
    264c:	e3 e5       	ldi	r30, 0x53	; 83
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	10 82       	st	Z, r1
		TCNT0 = 0;
    2652:	e2 e5       	ldi	r30, 0x52	; 82
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	10 82       	st	Z, r1
		OCR0 = 0;
    2658:	ec e5       	ldi	r30, 0x5C	; 92
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	10 82       	st	Z, r1
		/* Disable interrupts */
		TIMSK &= ~((1 << TOIE0) | (1 << OCIE0));
    265e:	a9 e5       	ldi	r26, 0x59	; 89
    2660:	b0 e0       	ldi	r27, 0x00	; 0
    2662:	e9 e5       	ldi	r30, 0x59	; 89
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	80 81       	ld	r24, Z
    2668:	8c 7f       	andi	r24, 0xFC	; 252
    266a:	8c 93       	st	X, r24
    266c:	27 c0       	rjmp	.+78     	; 0x26bc <Timer_DeInit+0xa4>
		break;
	case TIMER1_ID:
		/* Clear timer registers */
		TCCR1A = TCCR1B = 0;
    266e:	af e4       	ldi	r26, 0x4F	; 79
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	ee e4       	ldi	r30, 0x4E	; 78
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	10 82       	st	Z, r1
    2678:	80 81       	ld	r24, Z
    267a:	8c 93       	st	X, r24
		TCNT1 = 0;
    267c:	ec e4       	ldi	r30, 0x4C	; 76
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	11 82       	std	Z+1, r1	; 0x01
    2682:	10 82       	st	Z, r1
		OCR1A = 0;
    2684:	ea e4       	ldi	r30, 0x4A	; 74
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	11 82       	std	Z+1, r1	; 0x01
    268a:	10 82       	st	Z, r1
		/* Disable interrupts */
		TIMSK &= ~((1 << TOIE1) | (1 << OCIE1A));
    268c:	a9 e5       	ldi	r26, 0x59	; 89
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	e9 e5       	ldi	r30, 0x59	; 89
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	80 81       	ld	r24, Z
    2696:	8b 7e       	andi	r24, 0xEB	; 235
    2698:	8c 93       	st	X, r24
    269a:	10 c0       	rjmp	.+32     	; 0x26bc <Timer_DeInit+0xa4>
		break;
	case TIMER2_ID:
		/* Clear timer registers */
		TCCR0 = 0;
    269c:	e3 e5       	ldi	r30, 0x53	; 83
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	10 82       	st	Z, r1
		TCNT0 = 0;
    26a2:	e2 e5       	ldi	r30, 0x52	; 82
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	10 82       	st	Z, r1
		OCR2 = 0;
    26a8:	e3 e4       	ldi	r30, 0x43	; 67
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	10 82       	st	Z, r1
		/* Disable interrupts */
		TIMSK &= ~((1 << TOIE2) | (1 << OCIE2));
    26ae:	a9 e5       	ldi	r26, 0x59	; 89
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	e9 e5       	ldi	r30, 0x59	; 89
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	8f 73       	andi	r24, 0x3F	; 63
    26ba:	8c 93       	st	X, r24
		break;
	}
}
    26bc:	0f 90       	pop	r0
    26be:	0f 90       	pop	r0
    26c0:	0f 90       	pop	r0
    26c2:	cf 91       	pop	r28
    26c4:	df 91       	pop	r29
    26c6:	08 95       	ret

000026c8 <__vector_17>:
static volatile void (*g_TWI_callbackNotif)(void) = NULL_PTR;

/*******************************************************************************
 *                             ISR Definition                                  *
 *******************************************************************************/
ISR(TWI_vect) {
    26c8:	1f 92       	push	r1
    26ca:	0f 92       	push	r0
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	0f 92       	push	r0
    26d0:	11 24       	eor	r1, r1
    26d2:	2f 93       	push	r18
    26d4:	3f 93       	push	r19
    26d6:	4f 93       	push	r20
    26d8:	5f 93       	push	r21
    26da:	6f 93       	push	r22
    26dc:	7f 93       	push	r23
    26de:	8f 93       	push	r24
    26e0:	9f 93       	push	r25
    26e2:	af 93       	push	r26
    26e4:	bf 93       	push	r27
    26e6:	ef 93       	push	r30
    26e8:	ff 93       	push	r31
    26ea:	df 93       	push	r29
    26ec:	cf 93       	push	r28
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62
	if (g_TWI_callbackNotif != NULL_PTR) {
    26f2:	80 91 99 01 	lds	r24, 0x0199
    26f6:	90 91 9a 01 	lds	r25, 0x019A
    26fa:	00 97       	sbiw	r24, 0x00	; 0
    26fc:	29 f0       	breq	.+10     	; 0x2708 <__vector_17+0x40>
		(*g_TWI_callbackNotif)();
    26fe:	e0 91 99 01 	lds	r30, 0x0199
    2702:	f0 91 9a 01 	lds	r31, 0x019A
    2706:	09 95       	icall
	}
}
    2708:	cf 91       	pop	r28
    270a:	df 91       	pop	r29
    270c:	ff 91       	pop	r31
    270e:	ef 91       	pop	r30
    2710:	bf 91       	pop	r27
    2712:	af 91       	pop	r26
    2714:	9f 91       	pop	r25
    2716:	8f 91       	pop	r24
    2718:	7f 91       	pop	r23
    271a:	6f 91       	pop	r22
    271c:	5f 91       	pop	r21
    271e:	4f 91       	pop	r20
    2720:	3f 91       	pop	r19
    2722:	2f 91       	pop	r18
    2724:	0f 90       	pop	r0
    2726:	0f be       	out	0x3f, r0	; 63
    2728:	0f 90       	pop	r0
    272a:	1f 90       	pop	r1
    272c:	18 95       	reti

0000272e <power>:
 *******************************************************************************/
/*
 * Description :
 * Private utility function that calculates a number raised to a power.
 * */
static uint32 power(uint16 base, uint16 index) {
    272e:	df 93       	push	r29
    2730:	cf 93       	push	r28
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
    2736:	29 97       	sbiw	r28, 0x09	; 9
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	de bf       	out	0x3e, r29	; 62
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	cd bf       	out	0x3d, r28	; 61
    2742:	9f 83       	std	Y+7, r25	; 0x07
    2744:	8e 83       	std	Y+6, r24	; 0x06
    2746:	79 87       	std	Y+9, r23	; 0x09
    2748:	68 87       	std	Y+8, r22	; 0x08
	uint32 result = 1;
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	a0 e0       	ldi	r26, 0x00	; 0
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	8a 83       	std	Y+2, r24	; 0x02
    2754:	9b 83       	std	Y+3, r25	; 0x03
    2756:	ac 83       	std	Y+4, r26	; 0x04
    2758:	bd 83       	std	Y+5, r27	; 0x05
	for (uint8 i = 0; i < index; ++i) {
    275a:	19 82       	std	Y+1, r1	; 0x01
    275c:	16 c0       	rjmp	.+44     	; 0x278a <power+0x5c>
		result *= base;
    275e:	8e 81       	ldd	r24, Y+6	; 0x06
    2760:	9f 81       	ldd	r25, Y+7	; 0x07
    2762:	9c 01       	movw	r18, r24
    2764:	40 e0       	ldi	r20, 0x00	; 0
    2766:	50 e0       	ldi	r21, 0x00	; 0
    2768:	8a 81       	ldd	r24, Y+2	; 0x02
    276a:	9b 81       	ldd	r25, Y+3	; 0x03
    276c:	ac 81       	ldd	r26, Y+4	; 0x04
    276e:	bd 81       	ldd	r27, Y+5	; 0x05
    2770:	bc 01       	movw	r22, r24
    2772:	cd 01       	movw	r24, r26
    2774:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__mulsi3>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	8a 83       	std	Y+2, r24	; 0x02
    277e:	9b 83       	std	Y+3, r25	; 0x03
    2780:	ac 83       	std	Y+4, r26	; 0x04
    2782:	bd 83       	std	Y+5, r27	; 0x05
 * Description :
 * Private utility function that calculates a number raised to a power.
 * */
static uint32 power(uint16 base, uint16 index) {
	uint32 result = 1;
	for (uint8 i = 0; i < index; ++i) {
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	8f 5f       	subi	r24, 0xFF	; 255
    2788:	89 83       	std	Y+1, r24	; 0x01
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	28 2f       	mov	r18, r24
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	88 85       	ldd	r24, Y+8	; 0x08
    2792:	99 85       	ldd	r25, Y+9	; 0x09
    2794:	28 17       	cp	r18, r24
    2796:	39 07       	cpc	r19, r25
    2798:	10 f3       	brcs	.-60     	; 0x275e <power+0x30>
		result *= base;
	}
	return result;
    279a:	8a 81       	ldd	r24, Y+2	; 0x02
    279c:	9b 81       	ldd	r25, Y+3	; 0x03
    279e:	ac 81       	ldd	r26, Y+4	; 0x04
    27a0:	bd 81       	ldd	r27, Y+5	; 0x05
}
    27a2:	bc 01       	movw	r22, r24
    27a4:	cd 01       	movw	r24, r26
    27a6:	29 96       	adiw	r28, 0x09	; 9
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	f8 94       	cli
    27ac:	de bf       	out	0x3e, r29	; 62
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	cd bf       	out	0x3d, r28	; 61
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	08 95       	ret

000027b8 <TWI_init>:

void TWI_init(const TWI_ConfigType *Config) {
    27b8:	cf 92       	push	r12
    27ba:	df 92       	push	r13
    27bc:	ef 92       	push	r14
    27be:	ff 92       	push	r15
    27c0:	0f 93       	push	r16
    27c2:	1f 93       	push	r17
    27c4:	df 93       	push	r29
    27c6:	cf 93       	push	r28
    27c8:	00 d0       	rcall	.+0      	; 0x27ca <TWI_init+0x12>
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	9a 83       	std	Y+2, r25	; 0x02
    27d0:	89 83       	std	Y+1, r24	; 0x01

	/* Set slave address for MCU*/
	TWAR = Config->SlaveAddress;
    27d2:	a2 e2       	ldi	r26, 0x22	; 34
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	e9 81       	ldd	r30, Y+1	; 0x01
    27d8:	fa 81       	ldd	r31, Y+2	; 0x02
    27da:	84 81       	ldd	r24, Z+4	; 0x04
    27dc:	8c 93       	st	X, r24
	/* Insert pre-scaler bits into first 2 bits in TWSR register*/
	TWSR = Config->Prescaler & 0x03;
    27de:	a1 e2       	ldi	r26, 0x21	; 33
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	e9 81       	ldd	r30, Y+1	; 0x01
    27e4:	fa 81       	ldd	r31, Y+2	; 0x02
    27e6:	85 81       	ldd	r24, Z+5	; 0x05
    27e8:	83 70       	andi	r24, 0x03	; 3
    27ea:	8c 93       	st	X, r24
	 *
	 * Technically on ATmega16 with max FCPU of 16MHz, 400kb/s would be the maximum SCL speed
	 * for TWI that gives valid value for TWBR with TWPS at the minimum value of 0.
	 * */

	TWBR = (uint8) (((F_CPU / Config->BitRate) - (16))
    27ec:	cc 24       	eor	r12, r12
    27ee:	dd 24       	eor	r13, r13
    27f0:	68 94       	set
    27f2:	c5 f8       	bld	r12, 5
    27f4:	e9 81       	ldd	r30, Y+1	; 0x01
    27f6:	fa 81       	ldd	r31, Y+2	; 0x02
    27f8:	20 81       	ld	r18, Z
    27fa:	31 81       	ldd	r19, Z+1	; 0x01
    27fc:	42 81       	ldd	r20, Z+2	; 0x02
    27fe:	53 81       	ldd	r21, Z+3	; 0x03
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	92 e1       	ldi	r25, 0x12	; 18
    2804:	aa e7       	ldi	r26, 0x7A	; 122
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	bc 01       	movw	r22, r24
    280a:	cd 01       	movw	r24, r26
    280c:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__udivmodsi4>
    2810:	da 01       	movw	r26, r20
    2812:	c9 01       	movw	r24, r18
    2814:	0f 2e       	mov	r0, r31
    2816:	f0 ef       	ldi	r31, 0xF0	; 240
    2818:	ef 2e       	mov	r14, r31
    281a:	ff ef       	ldi	r31, 0xFF	; 255
    281c:	ff 2e       	mov	r15, r31
    281e:	ff ef       	ldi	r31, 0xFF	; 255
    2820:	0f 2f       	mov	r16, r31
    2822:	ff ef       	ldi	r31, 0xFF	; 255
    2824:	1f 2f       	mov	r17, r31
    2826:	f0 2d       	mov	r31, r0
    2828:	e8 0e       	add	r14, r24
    282a:	f9 1e       	adc	r15, r25
    282c:	0a 1f       	adc	r16, r26
    282e:	1b 1f       	adc	r17, r27
    2830:	e1 e2       	ldi	r30, 0x21	; 33
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
    2836:	88 2f       	mov	r24, r24
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	9c 01       	movw	r18, r24
    283c:	23 70       	andi	r18, 0x03	; 3
    283e:	30 70       	andi	r19, 0x00	; 0
    2840:	84 e0       	ldi	r24, 0x04	; 4
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	b9 01       	movw	r22, r18
    2846:	0e 94 97 13 	call	0x272e	; 0x272e <power>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	9c 01       	movw	r18, r24
    2850:	ad 01       	movw	r20, r26
    2852:	22 0f       	add	r18, r18
    2854:	33 1f       	adc	r19, r19
    2856:	44 1f       	adc	r20, r20
    2858:	55 1f       	adc	r21, r21
    285a:	c8 01       	movw	r24, r16
    285c:	b7 01       	movw	r22, r14
    285e:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__udivmodsi4>
    2862:	da 01       	movw	r26, r20
    2864:	c9 01       	movw	r24, r18
    2866:	f6 01       	movw	r30, r12
    2868:	80 83       	st	Z, r24
			/ (2 * power(4, (TWSR & 0x03))));
	/* Enable TWI, enable/disable interrupts */
	TWCR = (1 << TWEN) | (TWI_INTERRUPT_ENABLE << TWIE);
    286a:	e6 e5       	ldi	r30, 0x56	; 86
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	85 e0       	ldi	r24, 0x05	; 5
    2870:	80 83       	st	Z, r24
}
    2872:	0f 90       	pop	r0
    2874:	0f 90       	pop	r0
    2876:	cf 91       	pop	r28
    2878:	df 91       	pop	r29
    287a:	1f 91       	pop	r17
    287c:	0f 91       	pop	r16
    287e:	ff 90       	pop	r15
    2880:	ef 90       	pop	r14
    2882:	df 90       	pop	r13
    2884:	cf 90       	pop	r12
    2886:	08 95       	ret

00002888 <TWI_start>:

void TWI_start(void) {
    2888:	df 93       	push	r29
    288a:	cf 93       	push	r28
    288c:	cd b7       	in	r28, 0x3d	; 61
    288e:	de b7       	in	r29, 0x3e	; 62
	/* TWINT = 1 -> Clear flag by logic 1
	 * TWEN  = 1 -> To keep module enabled
	 * TWSTA = 1 -> Send start bit
	 **/
	TWCR = (1 << TWEN) | (1 << TWSTA) | (1 << TWINT);
    2890:	e6 e5       	ldi	r30, 0x56	; 86
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	84 ea       	ldi	r24, 0xA4	; 164
    2896:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT))
    2898:	e6 e5       	ldi	r30, 0x56	; 86
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	88 23       	and	r24, r24
    28a0:	dc f7       	brge	.-10     	; 0x2898 <TWI_start+0x10>
		;
}
    28a2:	cf 91       	pop	r28
    28a4:	df 91       	pop	r29
    28a6:	08 95       	ret

000028a8 <TWI_stop>:

void TWI_stop(void) {
    28a8:	df 93       	push	r29
    28aa:	cf 93       	push	r28
    28ac:	cd b7       	in	r28, 0x3d	; 61
    28ae:	de b7       	in	r29, 0x3e	; 62
	/* TWINT = 1 -> Clear flag by logic 1
	 * TWEN  = 1 -> To keep module enabled
	 * TWSTO = 1 -> Send stop bit
	 **/
	TWCR = (1 << TWEN) | (1 << TWSTO) | (1 << TWINT);
    28b0:	e6 e5       	ldi	r30, 0x56	; 86
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	84 e9       	ldi	r24, 0x94	; 148
    28b6:	80 83       	st	Z, r24
}
    28b8:	cf 91       	pop	r28
    28ba:	df 91       	pop	r29
    28bc:	08 95       	ret

000028be <TWI_writeByte>:

void TWI_writeByte(uint8 a_data) {
    28be:	df 93       	push	r29
    28c0:	cf 93       	push	r28
    28c2:	0f 92       	push	r0
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	89 83       	std	Y+1, r24	; 0x01
	/* Load data into register */
	TWDR = a_data;
    28ca:	e3 e2       	ldi	r30, 0x23	; 35
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	89 81       	ldd	r24, Y+1	; 0x01
    28d0:	80 83       	st	Z, r24

	/* TWINT = 1 -> Clear flag by logic 1
	 * TWEN  = 1 -> To keep module enabled
	 **/
	TWCR = (1 << TWINT) | (1 << TWEN);
    28d2:	e6 e5       	ldi	r30, 0x56	; 86
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	84 e8       	ldi	r24, 0x84	; 132
    28d8:	80 83       	st	Z, r24

	/* Poll until TWI is ready to send */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    28da:	e6 e5       	ldi	r30, 0x56	; 86
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	88 23       	and	r24, r24
    28e2:	dc f7       	brge	.-10     	; 0x28da <TWI_writeByte+0x1c>
		;

}
    28e4:	0f 90       	pop	r0
    28e6:	cf 91       	pop	r28
    28e8:	df 91       	pop	r29
    28ea:	08 95       	ret

000028ec <TWI_readByteWithAck>:

uint8 TWI_readByteWithAck(void) {
    28ec:	df 93       	push	r29
    28ee:	cf 93       	push	r28
    28f0:	cd b7       	in	r28, 0x3d	; 61
    28f2:	de b7       	in	r29, 0x3e	; 62
	/* TWINT = 1 -> Clear flag by logic 1
	 * TWEN  = 1 -> To keep module enabled
	 * TWEA  = 1 -> Enable ACK
	 **/
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    28f4:	e6 e5       	ldi	r30, 0x56	; 86
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	84 ec       	ldi	r24, 0xC4	; 196
    28fa:	80 83       	st	Z, r24

	/* Poll until TWI is ready to send */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    28fc:	e6 e5       	ldi	r30, 0x56	; 86
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	80 81       	ld	r24, Z
    2902:	88 23       	and	r24, r24
    2904:	dc f7       	brge	.-10     	; 0x28fc <TWI_readByteWithAck+0x10>
		;
	return TWDR;
    2906:	e3 e2       	ldi	r30, 0x23	; 35
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
}
    290c:	cf 91       	pop	r28
    290e:	df 91       	pop	r29
    2910:	08 95       	ret

00002912 <TWI_readByteWithNack>:

uint8 TWI_readByteWithNack(void) {
    2912:	df 93       	push	r29
    2914:	cf 93       	push	r28
    2916:	cd b7       	in	r28, 0x3d	; 61
    2918:	de b7       	in	r29, 0x3e	; 62
	/* TWINT = 1 -> Clear flag by logic 1
	 * TWEN  = 1 -> To keep module enabled
	 **/
	TWCR = (1 << TWINT) | (1 << TWEN);
    291a:	e6 e5       	ldi	r30, 0x56	; 86
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	84 e8       	ldi	r24, 0x84	; 132
    2920:	80 83       	st	Z, r24

	/* Poll until TWI is ready to send */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    2922:	e6 e5       	ldi	r30, 0x56	; 86
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	80 81       	ld	r24, Z
    2928:	88 23       	and	r24, r24
    292a:	dc f7       	brge	.-10     	; 0x2922 <TWI_readByteWithNack+0x10>
		;
	return TWDR;
    292c:	e3 e2       	ldi	r30, 0x23	; 35
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
}
    2932:	cf 91       	pop	r28
    2934:	df 91       	pop	r29
    2936:	08 95       	ret

00002938 <TWI_getStatus>:

uint8 TWI_getStatus(void) {
    2938:	df 93       	push	r29
    293a:	cf 93       	push	r28
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
	/* Mask TWSR register to clear first 3 bits */
	return (TWSR & (0xF8));
    2940:	e1 e2       	ldi	r30, 0x21	; 33
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	80 81       	ld	r24, Z
    2946:	88 7f       	andi	r24, 0xF8	; 248
}
    2948:	cf 91       	pop	r28
    294a:	df 91       	pop	r29
    294c:	08 95       	ret

0000294e <TWI_setCallback>:
void TWI_setCallback(void (*a_PtrToFunc)(void)) {
    294e:	df 93       	push	r29
    2950:	cf 93       	push	r28
    2952:	00 d0       	rcall	.+0      	; 0x2954 <TWI_setCallback+0x6>
    2954:	cd b7       	in	r28, 0x3d	; 61
    2956:	de b7       	in	r29, 0x3e	; 62
    2958:	9a 83       	std	Y+2, r25	; 0x02
    295a:	89 83       	std	Y+1, r24	; 0x01
	/* Set callback pointer*/
	g_TWI_callbackNotif = a_PtrToFunc;
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	9a 81       	ldd	r25, Y+2	; 0x02
    2960:	90 93 9a 01 	sts	0x019A, r25
    2964:	80 93 99 01 	sts	0x0199, r24
}
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	08 95       	ret

00002972 <TWI_DeInit>:

void TWI_DeInit(void) {
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
	/* Clear TWI registers */
	TWAR = 0;
    297a:	e2 e2       	ldi	r30, 0x22	; 34
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	10 82       	st	Z, r1
	TWBR = 0;
    2980:	e0 e2       	ldi	r30, 0x20	; 32
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	10 82       	st	Z, r1
	TWCR = 0;
    2986:	e6 e5       	ldi	r30, 0x56	; 86
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	10 82       	st	Z, r1
	TWSR = 0;
    298c:	e1 e2       	ldi	r30, 0x21	; 33
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	10 82       	st	Z, r1
}
    2992:	cf 91       	pop	r28
    2994:	df 91       	pop	r29
    2996:	08 95       	ret

00002998 <UART_init>:
#endif

/*******************************************************************************
 *                              Function Definitions                           *
 *******************************************************************************/
void UART_init(UART_ConfigType *Config) {
    2998:	df 93       	push	r29
    299a:	cf 93       	push	r28
    299c:	00 d0       	rcall	.+0      	; 0x299e <UART_init+0x6>
    299e:	00 d0       	rcall	.+0      	; 0x29a0 <UART_init+0x8>
    29a0:	0f 92       	push	r0
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
    29a6:	9d 83       	std	Y+5, r25	; 0x05
    29a8:	8c 83       	std	Y+4, r24	; 0x04

	/* Set transmission speed either normal or double speed */
	UCSRA = (TRANSMISSION_SPEED_DOUBLE << U2X);
    29aa:	eb e2       	ldi	r30, 0x2B	; 43
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	82 e0       	ldi	r24, 0x02	; 2
    29b0:	80 83       	st	Z, r24
	 * RXEN,TXEN=1  -> Enable transmission and sending
	 * TXCIE,RXCIE,UDRIE -> Enable/disable interrupts on RX,TX,UDRE complete
	 *
	 * */

	UCSRB = (1 << RXEN) | (1 << TXEN) | (TX_INTERRUPT_ENABLE << TXCIE)
    29b2:	ea e2       	ldi	r30, 0x2A	; 42
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	88 e1       	ldi	r24, 0x18	; 24
    29b8:	80 83       	st	Z, r24

	/*
	 * URSEL=1 -> Enable write to UCSRC register
	 * USBS   -> Set stop bit: 1 or 2 bits
	 * */
	UCSRC = (1 << URSEL) | (Config->UDReg.Stop_Bit << USBS);
    29ba:	a0 e4       	ldi	r26, 0x40	; 64
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	ec 81       	ldd	r30, Y+4	; 0x04
    29c0:	fd 81       	ldd	r31, Y+5	; 0x05
    29c2:	82 81       	ldd	r24, Z+2	; 0x02
    29c4:	81 70       	andi	r24, 0x01	; 1
    29c6:	88 2f       	mov	r24, r24
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	88 0f       	add	r24, r24
    29cc:	99 1f       	adc	r25, r25
    29ce:	88 0f       	add	r24, r24
    29d0:	99 1f       	adc	r25, r25
    29d2:	88 0f       	add	r24, r24
    29d4:	99 1f       	adc	r25, r25
    29d6:	80 68       	ori	r24, 0x80	; 128
    29d8:	8c 93       	st	X, r24

	/* Parity mode set*/

	if (Config->UDReg.Parity_type == PARITY_DISABLED) {
    29da:	ec 81       	ldd	r30, Y+4	; 0x04
    29dc:	fd 81       	ldd	r31, Y+5	; 0x05
    29de:	82 81       	ldd	r24, Z+2	; 0x02
    29e0:	86 70       	andi	r24, 0x06	; 6
    29e2:	88 23       	and	r24, r24
    29e4:	91 f0       	breq	.+36     	; 0x2a0a <UART_init+0x72>
		/* Do nothing */
	} else {

		/* Extract parity and make sure only 2 bits then shift left to align with register */
		uint8 parity = ((Config->UDReg.Parity_type & 0x03) << UPM0);
    29e6:	ec 81       	ldd	r30, Y+4	; 0x04
    29e8:	fd 81       	ldd	r31, Y+5	; 0x05
    29ea:	82 81       	ldd	r24, Z+2	; 0x02
    29ec:	86 95       	lsr	r24
    29ee:	83 70       	andi	r24, 0x03	; 3
    29f0:	83 70       	andi	r24, 0x03	; 3
    29f2:	82 95       	swap	r24
    29f4:	80 7f       	andi	r24, 0xF0	; 240
    29f6:	89 83       	std	Y+1, r24	; 0x01

		/* URSEL = 1 -> Enable write to UCSRC register */
		UCSRC |= (1 << URSEL) | parity;
    29f8:	a0 e4       	ldi	r26, 0x40	; 64
    29fa:	b0 e0       	ldi	r27, 0x00	; 0
    29fc:	e0 e4       	ldi	r30, 0x40	; 64
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	90 81       	ld	r25, Z
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	89 2b       	or	r24, r25
    2a06:	80 68       	ori	r24, 0x80	; 128
    2a08:	8c 93       	st	X, r24
	}

	/* Set UART character size: 5,6,7,8,9 bits*/
	UCSRB |= ((Config->UDReg.Char_size) & 0x04);
    2a0a:	aa e2       	ldi	r26, 0x2A	; 42
    2a0c:	b0 e0       	ldi	r27, 0x00	; 0
    2a0e:	ea e2       	ldi	r30, 0x2A	; 42
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	98 2f       	mov	r25, r24
    2a16:	ec 81       	ldd	r30, Y+4	; 0x04
    2a18:	fd 81       	ldd	r31, Y+5	; 0x05
    2a1a:	82 81       	ldd	r24, Z+2	; 0x02
    2a1c:	86 95       	lsr	r24
    2a1e:	86 95       	lsr	r24
    2a20:	86 95       	lsr	r24
    2a22:	87 70       	andi	r24, 0x07	; 7
    2a24:	84 70       	andi	r24, 0x04	; 4
    2a26:	89 2b       	or	r24, r25
    2a28:	8c 93       	st	X, r24
	UCSRC |= (1 << URSEL) | ((Config->UDReg.Char_size & 0x03) << UCSZ0);
    2a2a:	a0 e4       	ldi	r26, 0x40	; 64
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	e0 e4       	ldi	r30, 0x40	; 64
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	80 81       	ld	r24, Z
    2a34:	28 2f       	mov	r18, r24
    2a36:	ec 81       	ldd	r30, Y+4	; 0x04
    2a38:	fd 81       	ldd	r31, Y+5	; 0x05
    2a3a:	82 81       	ldd	r24, Z+2	; 0x02
    2a3c:	86 95       	lsr	r24
    2a3e:	86 95       	lsr	r24
    2a40:	86 95       	lsr	r24
    2a42:	87 70       	andi	r24, 0x07	; 7
    2a44:	88 2f       	mov	r24, r24
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	83 70       	andi	r24, 0x03	; 3
    2a4a:	90 70       	andi	r25, 0x00	; 0
    2a4c:	88 0f       	add	r24, r24
    2a4e:	99 1f       	adc	r25, r25
    2a50:	80 68       	ori	r24, 0x80	; 128
    2a52:	82 2b       	or	r24, r18
    2a54:	8c 93       	st	X, r24

	/* Calculate Baudrate and set it in UBRRL & UBBRH*/
	uint16 ubrr_value = (uint16) (((uint32) (8000000UL
			/ (Config->BaudRate * 8UL))) - 1);
    2a56:	ec 81       	ldd	r30, Y+4	; 0x04
    2a58:	fd 81       	ldd	r31, Y+5	; 0x05
    2a5a:	80 81       	ld	r24, Z
    2a5c:	91 81       	ldd	r25, Z+1	; 0x01
    2a5e:	cc 01       	movw	r24, r24
    2a60:	a0 e0       	ldi	r26, 0x00	; 0
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	88 0f       	add	r24, r24
    2a66:	99 1f       	adc	r25, r25
    2a68:	aa 1f       	adc	r26, r26
    2a6a:	bb 1f       	adc	r27, r27
    2a6c:	88 0f       	add	r24, r24
    2a6e:	99 1f       	adc	r25, r25
    2a70:	aa 1f       	adc	r26, r26
    2a72:	bb 1f       	adc	r27, r27
    2a74:	88 0f       	add	r24, r24
    2a76:	99 1f       	adc	r25, r25
    2a78:	aa 1f       	adc	r26, r26
    2a7a:	bb 1f       	adc	r27, r27
    2a7c:	9c 01       	movw	r18, r24
    2a7e:	ad 01       	movw	r20, r26
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	92 e1       	ldi	r25, 0x12	; 18
    2a84:	aa e7       	ldi	r26, 0x7A	; 122
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	bc 01       	movw	r22, r24
    2a8a:	cd 01       	movw	r24, r26
    2a8c:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <__udivmodsi4>
    2a90:	da 01       	movw	r26, r20
    2a92:	c9 01       	movw	r24, r18
    2a94:	01 97       	sbiw	r24, 0x01	; 1
    2a96:	9b 83       	std	Y+3, r25	; 0x03
    2a98:	8a 83       	std	Y+2, r24	; 0x02

	/* Clear URSEL to select UBRR register*/
	UCSRC &= ~(1 << URSEL);
    2a9a:	a0 e4       	ldi	r26, 0x40	; 64
    2a9c:	b0 e0       	ldi	r27, 0x00	; 0
    2a9e:	e0 e4       	ldi	r30, 0x40	; 64
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	80 81       	ld	r24, Z
    2aa4:	8f 77       	andi	r24, 0x7F	; 127
    2aa6:	8c 93       	st	X, r24
	UBRRH = ubrr_value >> 8;
    2aa8:	e0 e4       	ldi	r30, 0x40	; 64
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	8a 81       	ldd	r24, Y+2	; 0x02
    2aae:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab0:	89 2f       	mov	r24, r25
    2ab2:	99 27       	eor	r25, r25
    2ab4:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2ab6:	e9 e2       	ldi	r30, 0x29	; 41
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	8a 81       	ldd	r24, Y+2	; 0x02
    2abc:	80 83       	st	Z, r24
}
    2abe:	0f 90       	pop	r0
    2ac0:	0f 90       	pop	r0
    2ac2:	0f 90       	pop	r0
    2ac4:	0f 90       	pop	r0
    2ac6:	0f 90       	pop	r0
    2ac8:	cf 91       	pop	r28
    2aca:	df 91       	pop	r29
    2acc:	08 95       	ret

00002ace <UART_sendByte>:
void UART_sendByte(uint8 a_data) {
    2ace:	df 93       	push	r29
    2ad0:	cf 93       	push	r28
    2ad2:	0f 92       	push	r0
    2ad4:	cd b7       	in	r28, 0x3d	; 61
    2ad6:	de b7       	in	r29, 0x3e	; 62
    2ad8:	89 83       	std	Y+1, r24	; 0x01
	/* Poll until UDR register is empty*/
	while (BIT_IS_CLEAR(UCSRA, UDRE))
    2ada:	eb e2       	ldi	r30, 0x2B	; 43
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	80 81       	ld	r24, Z
    2ae0:	88 2f       	mov	r24, r24
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	80 72       	andi	r24, 0x20	; 32
    2ae6:	90 70       	andi	r25, 0x00	; 0
    2ae8:	00 97       	sbiw	r24, 0x00	; 0
    2aea:	b9 f3       	breq	.-18     	; 0x2ada <UART_sendByte+0xc>
		;

	/* Send data */
	UDR = a_data;
    2aec:	ec e2       	ldi	r30, 0x2C	; 44
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	89 81       	ldd	r24, Y+1	; 0x01
    2af2:	80 83       	st	Z, r24
}
    2af4:	0f 90       	pop	r0
    2af6:	cf 91       	pop	r28
    2af8:	df 91       	pop	r29
    2afa:	08 95       	ret

00002afc <UART_receiveByte>:
uint8 UART_receiveByte(void) {
    2afc:	df 93       	push	r29
    2afe:	cf 93       	push	r28
    2b00:	cd b7       	in	r28, 0x3d	; 61
    2b02:	de b7       	in	r29, 0x3e	; 62
	/* Poll until byte is received */
	while (BIT_IS_CLEAR(UCSRA, RXC))
    2b04:	eb e2       	ldi	r30, 0x2B	; 43
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	80 81       	ld	r24, Z
    2b0a:	88 23       	and	r24, r24
    2b0c:	dc f7       	brge	.-10     	; 0x2b04 <UART_receiveByte+0x8>
		;

	/* RXC flag is cleared once UDR register is read */
	return UDR;
    2b0e:	ec e2       	ldi	r30, 0x2C	; 44
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	80 81       	ld	r24, Z
}
    2b14:	cf 91       	pop	r28
    2b16:	df 91       	pop	r29
    2b18:	08 95       	ret

00002b1a <UART_sendString>:

void UART_sendString(uint8 *str) {
    2b1a:	df 93       	push	r29
    2b1c:	cf 93       	push	r28
    2b1e:	00 d0       	rcall	.+0      	; 0x2b20 <UART_sendString+0x6>
    2b20:	cd b7       	in	r28, 0x3d	; 61
    2b22:	de b7       	in	r29, 0x3e	; 62
    2b24:	9a 83       	std	Y+2, r25	; 0x02
    2b26:	89 83       	std	Y+1, r24	; 0x01
    2b28:	0a c0       	rjmp	.+20     	; 0x2b3e <UART_sendString+0x24>

	/* Send each byte in array until null terminator*/
	while (*str != '\0') {
		UART_sendByte(*str);
    2b2a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b2c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b2e:	80 81       	ld	r24, Z
    2b30:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendByte>
		++str;
    2b34:	89 81       	ldd	r24, Y+1	; 0x01
    2b36:	9a 81       	ldd	r25, Y+2	; 0x02
    2b38:	01 96       	adiw	r24, 0x01	; 1
    2b3a:	9a 83       	std	Y+2, r25	; 0x02
    2b3c:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(uint8 *str) {

	/* Send each byte in array until null terminator*/
	while (*str != '\0') {
    2b3e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b40:	fa 81       	ldd	r31, Y+2	; 0x02
    2b42:	80 81       	ld	r24, Z
    2b44:	88 23       	and	r24, r24
    2b46:	89 f7       	brne	.-30     	; 0x2b2a <UART_sendString+0x10>
		UART_sendByte(*str);
		++str;
	}

}
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	cf 91       	pop	r28
    2b4e:	df 91       	pop	r29
    2b50:	08 95       	ret

00002b52 <UART_receiveString>:
void UART_receiveString(uint8 *str) {
    2b52:	0f 93       	push	r16
    2b54:	1f 93       	push	r17
    2b56:	df 93       	push	r29
    2b58:	cf 93       	push	r28
    2b5a:	00 d0       	rcall	.+0      	; 0x2b5c <UART_receiveString+0xa>
    2b5c:	0f 92       	push	r0
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
    2b62:	9b 83       	std	Y+3, r25	; 0x03
    2b64:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b66:	19 82       	std	Y+1, r1	; 0x01
	/* Receive each byte until pre-defined End of string character */

	str[i] = UART_receiveByte();
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	28 2f       	mov	r18, r24
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b70:	9b 81       	ldd	r25, Y+3	; 0x03
    2b72:	8c 01       	movw	r16, r24
    2b74:	02 0f       	add	r16, r18
    2b76:	13 1f       	adc	r17, r19
    2b78:	0e 94 7e 15 	call	0x2afc	; 0x2afc <UART_receiveByte>
    2b7c:	f8 01       	movw	r30, r16
    2b7e:	80 83       	st	Z, r24
	do {
		i++;
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	8f 5f       	subi	r24, 0xFF	; 255
    2b84:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_receiveByte();
    2b86:	89 81       	ldd	r24, Y+1	; 0x01
    2b88:	28 2f       	mov	r18, r24
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b90:	8c 01       	movw	r16, r24
    2b92:	02 0f       	add	r16, r18
    2b94:	13 1f       	adc	r17, r19
    2b96:	0e 94 7e 15 	call	0x2afc	; 0x2afc <UART_receiveByte>
    2b9a:	f8 01       	movw	r30, r16
    2b9c:	80 83       	st	Z, r24
	} while (str[i] != UART_EOS);
    2b9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ba0:	28 2f       	mov	r18, r24
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba8:	fc 01       	movw	r30, r24
    2baa:	e2 0f       	add	r30, r18
    2bac:	f3 1f       	adc	r31, r19
    2bae:	80 81       	ld	r24, Z
    2bb0:	83 32       	cpi	r24, 0x23	; 35
    2bb2:	31 f7       	brne	.-52     	; 0x2b80 <UART_receiveString+0x2e>
	/* Add null terminator to string*/
	str[i] = '\0';
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	28 2f       	mov	r18, r24
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	e2 0f       	add	r30, r18
    2bc2:	f3 1f       	adc	r31, r19
    2bc4:	10 82       	st	Z, r1
}
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	cf 91       	pop	r28
    2bce:	df 91       	pop	r29
    2bd0:	1f 91       	pop	r17
    2bd2:	0f 91       	pop	r16
    2bd4:	08 95       	ret

00002bd6 <UART_setTXCallback_Notif>:

void UART_setTXCallback_Notif(void (*a_callBackNotif_ptr)(void)) {
    2bd6:	df 93       	push	r29
    2bd8:	cf 93       	push	r28
    2bda:	00 d0       	rcall	.+0      	; 0x2bdc <UART_setTXCallback_Notif+0x6>
    2bdc:	cd b7       	in	r28, 0x3d	; 61
    2bde:	de b7       	in	r29, 0x3e	; 62
    2be0:	9a 83       	std	Y+2, r25	; 0x02
    2be2:	89 83       	std	Y+1, r24	; 0x01
	g_UART_TXC_Callback = a_callBackNotif_ptr;
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
    2be6:	9a 81       	ldd	r25, Y+2	; 0x02
    2be8:	90 93 9c 01 	sts	0x019C, r25
    2bec:	80 93 9b 01 	sts	0x019B, r24
}
    2bf0:	0f 90       	pop	r0
    2bf2:	0f 90       	pop	r0
    2bf4:	cf 91       	pop	r28
    2bf6:	df 91       	pop	r29
    2bf8:	08 95       	ret

00002bfa <UART_setRXCallback_Notif>:
void UART_setRXCallback_Notif(void (*a_callBackNotif_ptr)(void)) {
    2bfa:	df 93       	push	r29
    2bfc:	cf 93       	push	r28
    2bfe:	00 d0       	rcall	.+0      	; 0x2c00 <UART_setRXCallback_Notif+0x6>
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
    2c04:	9a 83       	std	Y+2, r25	; 0x02
    2c06:	89 83       	std	Y+1, r24	; 0x01
	g_UART_RXC_Callback = a_callBackNotif_ptr;
    2c08:	89 81       	ldd	r24, Y+1	; 0x01
    2c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c0c:	90 93 9e 01 	sts	0x019E, r25
    2c10:	80 93 9d 01 	sts	0x019D, r24
}
    2c14:	0f 90       	pop	r0
    2c16:	0f 90       	pop	r0
    2c18:	cf 91       	pop	r28
    2c1a:	df 91       	pop	r29
    2c1c:	08 95       	ret

00002c1e <UART_setUDRECallback_Notif>:
void UART_setUDRECallback_Notif(void (*a_callBackNotif_ptr)(void)) {
    2c1e:	df 93       	push	r29
    2c20:	cf 93       	push	r28
    2c22:	00 d0       	rcall	.+0      	; 0x2c24 <UART_setUDRECallback_Notif+0x6>
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62
    2c28:	9a 83       	std	Y+2, r25	; 0x02
    2c2a:	89 83       	std	Y+1, r24	; 0x01
	g_UART_UDRE_Callback = a_callBackNotif_ptr;
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c30:	90 93 a0 01 	sts	0x01A0, r25
    2c34:	80 93 9f 01 	sts	0x019F, r24
}
    2c38:	0f 90       	pop	r0
    2c3a:	0f 90       	pop	r0
    2c3c:	cf 91       	pop	r28
    2c3e:	df 91       	pop	r29
    2c40:	08 95       	ret

00002c42 <UART_DeInit>:
void UART_DeInit(void) {
    2c42:	df 93       	push	r29
    2c44:	cf 93       	push	r28
    2c46:	cd b7       	in	r28, 0x3d	; 61
    2c48:	de b7       	in	r29, 0x3e	; 62
	UCSRA = UCSRB = UCSRC = 0;
    2c4a:	2b e2       	ldi	r18, 0x2B	; 43
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	aa e2       	ldi	r26, 0x2A	; 42
    2c50:	b0 e0       	ldi	r27, 0x00	; 0
    2c52:	e0 e4       	ldi	r30, 0x40	; 64
    2c54:	f0 e0       	ldi	r31, 0x00	; 0
    2c56:	10 82       	st	Z, r1
    2c58:	80 81       	ld	r24, Z
    2c5a:	8c 93       	st	X, r24
    2c5c:	8c 91       	ld	r24, X
    2c5e:	f9 01       	movw	r30, r18
    2c60:	80 83       	st	Z, r24

}
    2c62:	cf 91       	pop	r28
    2c64:	df 91       	pop	r29
    2c66:	08 95       	ret

00002c68 <__mulsi3>:
    2c68:	62 9f       	mul	r22, r18
    2c6a:	d0 01       	movw	r26, r0
    2c6c:	73 9f       	mul	r23, r19
    2c6e:	f0 01       	movw	r30, r0
    2c70:	82 9f       	mul	r24, r18
    2c72:	e0 0d       	add	r30, r0
    2c74:	f1 1d       	adc	r31, r1
    2c76:	64 9f       	mul	r22, r20
    2c78:	e0 0d       	add	r30, r0
    2c7a:	f1 1d       	adc	r31, r1
    2c7c:	92 9f       	mul	r25, r18
    2c7e:	f0 0d       	add	r31, r0
    2c80:	83 9f       	mul	r24, r19
    2c82:	f0 0d       	add	r31, r0
    2c84:	74 9f       	mul	r23, r20
    2c86:	f0 0d       	add	r31, r0
    2c88:	65 9f       	mul	r22, r21
    2c8a:	f0 0d       	add	r31, r0
    2c8c:	99 27       	eor	r25, r25
    2c8e:	72 9f       	mul	r23, r18
    2c90:	b0 0d       	add	r27, r0
    2c92:	e1 1d       	adc	r30, r1
    2c94:	f9 1f       	adc	r31, r25
    2c96:	63 9f       	mul	r22, r19
    2c98:	b0 0d       	add	r27, r0
    2c9a:	e1 1d       	adc	r30, r1
    2c9c:	f9 1f       	adc	r31, r25
    2c9e:	bd 01       	movw	r22, r26
    2ca0:	cf 01       	movw	r24, r30
    2ca2:	11 24       	eor	r1, r1
    2ca4:	08 95       	ret

00002ca6 <__udivmodsi4>:
    2ca6:	a1 e2       	ldi	r26, 0x21	; 33
    2ca8:	1a 2e       	mov	r1, r26
    2caa:	aa 1b       	sub	r26, r26
    2cac:	bb 1b       	sub	r27, r27
    2cae:	fd 01       	movw	r30, r26
    2cb0:	0d c0       	rjmp	.+26     	; 0x2ccc <__udivmodsi4_ep>

00002cb2 <__udivmodsi4_loop>:
    2cb2:	aa 1f       	adc	r26, r26
    2cb4:	bb 1f       	adc	r27, r27
    2cb6:	ee 1f       	adc	r30, r30
    2cb8:	ff 1f       	adc	r31, r31
    2cba:	a2 17       	cp	r26, r18
    2cbc:	b3 07       	cpc	r27, r19
    2cbe:	e4 07       	cpc	r30, r20
    2cc0:	f5 07       	cpc	r31, r21
    2cc2:	20 f0       	brcs	.+8      	; 0x2ccc <__udivmodsi4_ep>
    2cc4:	a2 1b       	sub	r26, r18
    2cc6:	b3 0b       	sbc	r27, r19
    2cc8:	e4 0b       	sbc	r30, r20
    2cca:	f5 0b       	sbc	r31, r21

00002ccc <__udivmodsi4_ep>:
    2ccc:	66 1f       	adc	r22, r22
    2cce:	77 1f       	adc	r23, r23
    2cd0:	88 1f       	adc	r24, r24
    2cd2:	99 1f       	adc	r25, r25
    2cd4:	1a 94       	dec	r1
    2cd6:	69 f7       	brne	.-38     	; 0x2cb2 <__udivmodsi4_loop>
    2cd8:	60 95       	com	r22
    2cda:	70 95       	com	r23
    2cdc:	80 95       	com	r24
    2cde:	90 95       	com	r25
    2ce0:	9b 01       	movw	r18, r22
    2ce2:	ac 01       	movw	r20, r24
    2ce4:	bd 01       	movw	r22, r26
    2ce6:	cf 01       	movw	r24, r30
    2ce8:	08 95       	ret

00002cea <__prologue_saves__>:
    2cea:	2f 92       	push	r2
    2cec:	3f 92       	push	r3
    2cee:	4f 92       	push	r4
    2cf0:	5f 92       	push	r5
    2cf2:	6f 92       	push	r6
    2cf4:	7f 92       	push	r7
    2cf6:	8f 92       	push	r8
    2cf8:	9f 92       	push	r9
    2cfa:	af 92       	push	r10
    2cfc:	bf 92       	push	r11
    2cfe:	cf 92       	push	r12
    2d00:	df 92       	push	r13
    2d02:	ef 92       	push	r14
    2d04:	ff 92       	push	r15
    2d06:	0f 93       	push	r16
    2d08:	1f 93       	push	r17
    2d0a:	cf 93       	push	r28
    2d0c:	df 93       	push	r29
    2d0e:	cd b7       	in	r28, 0x3d	; 61
    2d10:	de b7       	in	r29, 0x3e	; 62
    2d12:	ca 1b       	sub	r28, r26
    2d14:	db 0b       	sbc	r29, r27
    2d16:	0f b6       	in	r0, 0x3f	; 63
    2d18:	f8 94       	cli
    2d1a:	de bf       	out	0x3e, r29	; 62
    2d1c:	0f be       	out	0x3f, r0	; 63
    2d1e:	cd bf       	out	0x3d, r28	; 61
    2d20:	09 94       	ijmp

00002d22 <__epilogue_restores__>:
    2d22:	2a 88       	ldd	r2, Y+18	; 0x12
    2d24:	39 88       	ldd	r3, Y+17	; 0x11
    2d26:	48 88       	ldd	r4, Y+16	; 0x10
    2d28:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d2a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d2c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d2e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d30:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d32:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d34:	b9 84       	ldd	r11, Y+9	; 0x09
    2d36:	c8 84       	ldd	r12, Y+8	; 0x08
    2d38:	df 80       	ldd	r13, Y+7	; 0x07
    2d3a:	ee 80       	ldd	r14, Y+6	; 0x06
    2d3c:	fd 80       	ldd	r15, Y+5	; 0x05
    2d3e:	0c 81       	ldd	r16, Y+4	; 0x04
    2d40:	1b 81       	ldd	r17, Y+3	; 0x03
    2d42:	aa 81       	ldd	r26, Y+2	; 0x02
    2d44:	b9 81       	ldd	r27, Y+1	; 0x01
    2d46:	ce 0f       	add	r28, r30
    2d48:	d1 1d       	adc	r29, r1
    2d4a:	0f b6       	in	r0, 0x3f	; 63
    2d4c:	f8 94       	cli
    2d4e:	de bf       	out	0x3e, r29	; 62
    2d50:	0f be       	out	0x3f, r0	; 63
    2d52:	cd bf       	out	0x3d, r28	; 61
    2d54:	ed 01       	movw	r28, r26
    2d56:	08 95       	ret

00002d58 <round>:
    2d58:	50 d0       	rcall	.+160    	; 0x2dfa <__fp_splitA>
    2d5a:	e0 f0       	brcs	.+56     	; 0x2d94 <round+0x3c>
    2d5c:	9e 37       	cpi	r25, 0x7E	; 126
    2d5e:	d8 f0       	brcs	.+54     	; 0x2d96 <round+0x3e>
    2d60:	96 39       	cpi	r25, 0x96	; 150
    2d62:	b8 f4       	brcc	.+46     	; 0x2d92 <round+0x3a>
    2d64:	9e 38       	cpi	r25, 0x8E	; 142
    2d66:	48 f4       	brcc	.+18     	; 0x2d7a <round+0x22>
    2d68:	67 2f       	mov	r22, r23
    2d6a:	78 2f       	mov	r23, r24
    2d6c:	88 27       	eor	r24, r24
    2d6e:	98 5f       	subi	r25, 0xF8	; 248
    2d70:	f9 cf       	rjmp	.-14     	; 0x2d64 <round+0xc>
    2d72:	86 95       	lsr	r24
    2d74:	77 95       	ror	r23
    2d76:	67 95       	ror	r22
    2d78:	93 95       	inc	r25
    2d7a:	95 39       	cpi	r25, 0x95	; 149
    2d7c:	d0 f3       	brcs	.-12     	; 0x2d72 <round+0x1a>
    2d7e:	b6 2f       	mov	r27, r22
    2d80:	b1 70       	andi	r27, 0x01	; 1
    2d82:	6b 0f       	add	r22, r27
    2d84:	71 1d       	adc	r23, r1
    2d86:	81 1d       	adc	r24, r1
    2d88:	20 f4       	brcc	.+8      	; 0x2d92 <round+0x3a>
    2d8a:	87 95       	ror	r24
    2d8c:	77 95       	ror	r23
    2d8e:	67 95       	ror	r22
    2d90:	93 95       	inc	r25
    2d92:	02 c0       	rjmp	.+4      	; 0x2d98 <__fp_mintl>
    2d94:	1c c0       	rjmp	.+56     	; 0x2dce <__fp_mpack>
    2d96:	4c c0       	rjmp	.+152    	; 0x2e30 <__fp_szero>

00002d98 <__fp_mintl>:
    2d98:	88 23       	and	r24, r24
    2d9a:	71 f4       	brne	.+28     	; 0x2db8 <__fp_mintl+0x20>
    2d9c:	77 23       	and	r23, r23
    2d9e:	21 f0       	breq	.+8      	; 0x2da8 <__fp_mintl+0x10>
    2da0:	98 50       	subi	r25, 0x08	; 8
    2da2:	87 2b       	or	r24, r23
    2da4:	76 2f       	mov	r23, r22
    2da6:	07 c0       	rjmp	.+14     	; 0x2db6 <__fp_mintl+0x1e>
    2da8:	66 23       	and	r22, r22
    2daa:	11 f4       	brne	.+4      	; 0x2db0 <__fp_mintl+0x18>
    2dac:	99 27       	eor	r25, r25
    2dae:	0d c0       	rjmp	.+26     	; 0x2dca <__fp_mintl+0x32>
    2db0:	90 51       	subi	r25, 0x10	; 16
    2db2:	86 2b       	or	r24, r22
    2db4:	70 e0       	ldi	r23, 0x00	; 0
    2db6:	60 e0       	ldi	r22, 0x00	; 0
    2db8:	2a f0       	brmi	.+10     	; 0x2dc4 <__fp_mintl+0x2c>
    2dba:	9a 95       	dec	r25
    2dbc:	66 0f       	add	r22, r22
    2dbe:	77 1f       	adc	r23, r23
    2dc0:	88 1f       	adc	r24, r24
    2dc2:	da f7       	brpl	.-10     	; 0x2dba <__fp_mintl+0x22>
    2dc4:	88 0f       	add	r24, r24
    2dc6:	96 95       	lsr	r25
    2dc8:	87 95       	ror	r24
    2dca:	97 f9       	bld	r25, 7
    2dcc:	08 95       	ret

00002dce <__fp_mpack>:
    2dce:	9f 3f       	cpi	r25, 0xFF	; 255
    2dd0:	31 f0       	breq	.+12     	; 0x2dde <__fp_mpack_finite+0xc>

00002dd2 <__fp_mpack_finite>:
    2dd2:	91 50       	subi	r25, 0x01	; 1
    2dd4:	20 f4       	brcc	.+8      	; 0x2dde <__fp_mpack_finite+0xc>
    2dd6:	87 95       	ror	r24
    2dd8:	77 95       	ror	r23
    2dda:	67 95       	ror	r22
    2ddc:	b7 95       	ror	r27
    2dde:	88 0f       	add	r24, r24
    2de0:	91 1d       	adc	r25, r1
    2de2:	96 95       	lsr	r25
    2de4:	87 95       	ror	r24
    2de6:	97 f9       	bld	r25, 7
    2de8:	08 95       	ret

00002dea <__fp_split3>:
    2dea:	57 fd       	sbrc	r21, 7
    2dec:	90 58       	subi	r25, 0x80	; 128
    2dee:	44 0f       	add	r20, r20
    2df0:	55 1f       	adc	r21, r21
    2df2:	59 f0       	breq	.+22     	; 0x2e0a <__fp_splitA+0x10>
    2df4:	5f 3f       	cpi	r21, 0xFF	; 255
    2df6:	71 f0       	breq	.+28     	; 0x2e14 <__fp_splitA+0x1a>
    2df8:	47 95       	ror	r20

00002dfa <__fp_splitA>:
    2dfa:	88 0f       	add	r24, r24
    2dfc:	97 fb       	bst	r25, 7
    2dfe:	99 1f       	adc	r25, r25
    2e00:	61 f0       	breq	.+24     	; 0x2e1a <__fp_splitA+0x20>
    2e02:	9f 3f       	cpi	r25, 0xFF	; 255
    2e04:	79 f0       	breq	.+30     	; 0x2e24 <__fp_splitA+0x2a>
    2e06:	87 95       	ror	r24
    2e08:	08 95       	ret
    2e0a:	12 16       	cp	r1, r18
    2e0c:	13 06       	cpc	r1, r19
    2e0e:	14 06       	cpc	r1, r20
    2e10:	55 1f       	adc	r21, r21
    2e12:	f2 cf       	rjmp	.-28     	; 0x2df8 <__fp_split3+0xe>
    2e14:	46 95       	lsr	r20
    2e16:	f1 df       	rcall	.-30     	; 0x2dfa <__fp_splitA>
    2e18:	08 c0       	rjmp	.+16     	; 0x2e2a <__fp_splitA+0x30>
    2e1a:	16 16       	cp	r1, r22
    2e1c:	17 06       	cpc	r1, r23
    2e1e:	18 06       	cpc	r1, r24
    2e20:	99 1f       	adc	r25, r25
    2e22:	f1 cf       	rjmp	.-30     	; 0x2e06 <__fp_splitA+0xc>
    2e24:	86 95       	lsr	r24
    2e26:	71 05       	cpc	r23, r1
    2e28:	61 05       	cpc	r22, r1
    2e2a:	08 94       	sec
    2e2c:	08 95       	ret

00002e2e <__fp_zero>:
    2e2e:	e8 94       	clt

00002e30 <__fp_szero>:
    2e30:	bb 27       	eor	r27, r27
    2e32:	66 27       	eor	r22, r22
    2e34:	77 27       	eor	r23, r23
    2e36:	cb 01       	movw	r24, r22
    2e38:	97 f9       	bld	r25, 7
    2e3a:	08 95       	ret

00002e3c <_exit>:
    2e3c:	f8 94       	cli

00002e3e <__stop_program>:
    2e3e:	ff cf       	rjmp	.-2      	; 0x2e3e <__stop_program>
