
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000351c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  0000351c  000035b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008000ee  008000ee  0000363e  2**0
                  ALLOC
  3 .stab         000029f4  00000000  00000000  00003640  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001203  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007237  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007397  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007526  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000956b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a66c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b5f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b770  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000ba32  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c2c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3e       	cpi	r26, 0xEE	; 238
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ee       	ldi	r26, 0xEE	; 238
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3f       	cpi	r26, 0xFB	; 251
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <main>
      8a:	0c 94 8c 1a 	jmp	0x3518	; 0x3518 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ee       	ldi	r26, 0xE2	; 226
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	82 ee       	ldi	r24, 0xE2	; 226
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 ee       	ldi	r22, 0xE2	; 226
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 34 1a 	jmp	0x3468	; 0x3468 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 20 1a 	jmp	0x3440	; 0x3440 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 3c 1a 	jmp	0x3478	; 0x3478 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction) {
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <GPIO_setupPinDirection+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <GPIO_setupPinDirection+0x8>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	6a 83       	std	Y+2, r22	; 0x02
     cb0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	88 30       	cpi	r24, 0x08	; 8
     cb6:	08 f0       	brcs	.+2      	; 0xcba <GPIO_setupPinDirection+0x1c>
     cb8:	d5 c0       	rjmp	.+426    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	84 30       	cpi	r24, 0x04	; 4
     cbe:	08 f0       	brcs	.+2      	; 0xcc2 <GPIO_setupPinDirection+0x24>
     cc0:	d1 c0       	rjmp	.+418    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	} else {
		/* Setup the pin direction as required */
		switch (port_num) {
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	3d 83       	std	Y+5, r19	; 0x05
     cca:	2c 83       	std	Y+4, r18	; 0x04
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	9d 81       	ldd	r25, Y+5	; 0x05
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	91 05       	cpc	r25, r1
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <GPIO_setupPinDirection+0x3a>
     cd6:	43 c0       	rjmp	.+134    	; 0xd5e <GPIO_setupPinDirection+0xc0>
     cd8:	2c 81       	ldd	r18, Y+4	; 0x04
     cda:	3d 81       	ldd	r19, Y+5	; 0x05
     cdc:	22 30       	cpi	r18, 0x02	; 2
     cde:	31 05       	cpc	r19, r1
     ce0:	2c f4       	brge	.+10     	; 0xcec <GPIO_setupPinDirection+0x4e>
     ce2:	8c 81       	ldd	r24, Y+4	; 0x04
     ce4:	9d 81       	ldd	r25, Y+5	; 0x05
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	71 f0       	breq	.+28     	; 0xd06 <GPIO_setupPinDirection+0x68>
     cea:	bc c0       	rjmp	.+376    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
     cec:	2c 81       	ldd	r18, Y+4	; 0x04
     cee:	3d 81       	ldd	r19, Y+5	; 0x05
     cf0:	22 30       	cpi	r18, 0x02	; 2
     cf2:	31 05       	cpc	r19, r1
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <GPIO_setupPinDirection+0x5a>
     cf6:	5f c0       	rjmp	.+190    	; 0xdb6 <GPIO_setupPinDirection+0x118>
     cf8:	8c 81       	ldd	r24, Y+4	; 0x04
     cfa:	9d 81       	ldd	r25, Y+5	; 0x05
     cfc:	83 30       	cpi	r24, 0x03	; 3
     cfe:	91 05       	cpc	r25, r1
     d00:	09 f4       	brne	.+2      	; 0xd04 <GPIO_setupPinDirection+0x66>
     d02:	85 c0       	rjmp	.+266    	; 0xe0e <GPIO_setupPinDirection+0x170>
     d04:	af c0       	rjmp	.+350    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	a1 f4       	brne	.+40     	; 0xd34 <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_num);
     d0c:	aa e3       	ldi	r26, 0x3A	; 58
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	ea e3       	ldi	r30, 0x3A	; 58
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <GPIO_setupPinDirection+0x8c>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <GPIO_setupPinDirection+0x88>
     d2e:	84 2b       	or	r24, r20
     d30:	8c 93       	st	X, r24
     d32:	98 c0       	rjmp	.+304    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_num);
     d34:	aa e3       	ldi	r26, 0x3A	; 58
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	ea e3       	ldi	r30, 0x3A	; 58
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	48 2f       	mov	r20, r24
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	02 2e       	mov	r0, r18
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <GPIO_setupPinDirection+0xb4>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	0a 94       	dec	r0
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <GPIO_setupPinDirection+0xb0>
     d56:	80 95       	com	r24
     d58:	84 23       	and	r24, r20
     d5a:	8c 93       	st	X, r24
     d5c:	83 c0       	rjmp	.+262    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	81 30       	cpi	r24, 0x01	; 1
     d62:	a1 f4       	brne	.+40     	; 0xd8c <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
     d64:	a7 e3       	ldi	r26, 0x37	; 55
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e7 e3       	ldi	r30, 0x37	; 55
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	8a 81       	ldd	r24, Y+2	; 0x02
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 2e       	mov	r0, r18
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <GPIO_setupPinDirection+0xe4>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	0a 94       	dec	r0
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <GPIO_setupPinDirection+0xe0>
     d86:	84 2b       	or	r24, r20
     d88:	8c 93       	st	X, r24
     d8a:	6c c0       	rjmp	.+216    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_num);
     d8c:	a7 e3       	ldi	r26, 0x37	; 55
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e7 e3       	ldi	r30, 0x37	; 55
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	48 2f       	mov	r20, r24
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	02 2e       	mov	r0, r18
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <GPIO_setupPinDirection+0x10c>
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	0a 94       	dec	r0
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <GPIO_setupPinDirection+0x108>
     dae:	80 95       	com	r24
     db0:	84 23       	and	r24, r20
     db2:	8c 93       	st	X, r24
     db4:	57 c0       	rjmp	.+174    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	a1 f4       	brne	.+40     	; 0xde4 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
     dbc:	a4 e3       	ldi	r26, 0x34	; 52
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e4 e3       	ldi	r30, 0x34	; 52
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	48 2f       	mov	r20, r24
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	02 2e       	mov	r0, r18
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <GPIO_setupPinDirection+0x13c>
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	0a 94       	dec	r0
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <GPIO_setupPinDirection+0x138>
     dde:	84 2b       	or	r24, r20
     de0:	8c 93       	st	X, r24
     de2:	40 c0       	rjmp	.+128    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_num);
     de4:	a4 e3       	ldi	r26, 0x34	; 52
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e4 e3       	ldi	r30, 0x34	; 52
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	48 2f       	mov	r20, r24
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	02 2e       	mov	r0, r18
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <GPIO_setupPinDirection+0x164>
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	0a 94       	dec	r0
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <GPIO_setupPinDirection+0x160>
     e06:	80 95       	com	r24
     e08:	84 23       	and	r24, r20
     e0a:	8c 93       	st	X, r24
     e0c:	2b c0       	rjmp	.+86     	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	81 30       	cpi	r24, 0x01	; 1
     e12:	a1 f4       	brne	.+40     	; 0xe3c <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
     e14:	a1 e3       	ldi	r26, 0x31	; 49
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e1 e3       	ldi	r30, 0x31	; 49
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <GPIO_setupPinDirection+0x194>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <GPIO_setupPinDirection+0x190>
     e36:	84 2b       	or	r24, r20
     e38:	8c 93       	st	X, r24
     e3a:	14 c0       	rjmp	.+40     	; 0xe64 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_num);
     e3c:	a1 e3       	ldi	r26, 0x31	; 49
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e1 e3       	ldi	r30, 0x31	; 49
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <GPIO_setupPinDirection+0x1bc>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <GPIO_setupPinDirection+0x1b8>
     e5e:	80 95       	com	r24
     e60:	84 23       	and	r24, r20
     e62:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	00 d0       	rcall	.+0      	; 0xe7a <GPIO_writePin+0x6>
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <GPIO_writePin+0x8>
     e7c:	0f 92       	push	r0
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	6a 83       	std	Y+2, r22	; 0x02
     e86:	4b 83       	std	Y+3, r20	; 0x03
	/*Invalid input*/
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	88 30       	cpi	r24, 0x08	; 8
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <GPIO_writePin+0x1c>
     e8e:	e4 c0       	rjmp	.+456    	; 0x1058 <GPIO_writePin+0x1e4>
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	84 30       	cpi	r24, 0x04	; 4
     e94:	08 f0       	brcs	.+2      	; 0xe98 <GPIO_writePin+0x24>
     e96:	e0 c0       	rjmp	.+448    	; 0x1058 <GPIO_writePin+0x1e4>
		/*Do nothing*/

	} else {
		switch (port_num) {
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	3d 83       	std	Y+5, r19	; 0x05
     ea0:	2c 83       	std	Y+4, r18	; 0x04
     ea2:	8c 81       	ldd	r24, Y+4	; 0x04
     ea4:	9d 81       	ldd	r25, Y+5	; 0x05
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	91 05       	cpc	r25, r1
     eaa:	09 f4       	brne	.+2      	; 0xeae <GPIO_writePin+0x3a>
     eac:	47 c0       	rjmp	.+142    	; 0xf3c <GPIO_writePin+0xc8>
     eae:	2c 81       	ldd	r18, Y+4	; 0x04
     eb0:	3d 81       	ldd	r19, Y+5	; 0x05
     eb2:	22 30       	cpi	r18, 0x02	; 2
     eb4:	31 05       	cpc	r19, r1
     eb6:	2c f4       	brge	.+10     	; 0xec2 <GPIO_writePin+0x4e>
     eb8:	8c 81       	ldd	r24, Y+4	; 0x04
     eba:	9d 81       	ldd	r25, Y+5	; 0x05
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	71 f0       	breq	.+28     	; 0xedc <GPIO_writePin+0x68>
     ec0:	cb c0       	rjmp	.+406    	; 0x1058 <GPIO_writePin+0x1e4>
     ec2:	2c 81       	ldd	r18, Y+4	; 0x04
     ec4:	3d 81       	ldd	r19, Y+5	; 0x05
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	09 f4       	brne	.+2      	; 0xece <GPIO_writePin+0x5a>
     ecc:	67 c0       	rjmp	.+206    	; 0xf9c <GPIO_writePin+0x128>
     ece:	8c 81       	ldd	r24, Y+4	; 0x04
     ed0:	9d 81       	ldd	r25, Y+5	; 0x05
     ed2:	83 30       	cpi	r24, 0x03	; 3
     ed4:	91 05       	cpc	r25, r1
     ed6:	09 f4       	brne	.+2      	; 0xeda <GPIO_writePin+0x66>
     ed8:	91 c0       	rjmp	.+290    	; 0xffc <GPIO_writePin+0x188>
     eda:	be c0       	rjmp	.+380    	; 0x1058 <GPIO_writePin+0x1e4>
		case PORTA_ID:
			if (value == LOGIC_HIGH) {
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	a1 f4       	brne	.+40     	; 0xf0a <GPIO_writePin+0x96>
				SET_BIT(PORTA, pin_num);
     ee2:	ab e3       	ldi	r26, 0x3B	; 59
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	eb e3       	ldi	r30, 0x3B	; 59
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <GPIO_writePin+0x8c>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <GPIO_writePin+0x88>
     f04:	84 2b       	or	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	a7 c0       	rjmp	.+334    	; 0x1058 <GPIO_writePin+0x1e4>
			} else if (value == LOGIC_LOW) {
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	88 23       	and	r24, r24
     f0e:	09 f0       	breq	.+2      	; 0xf12 <GPIO_writePin+0x9e>
     f10:	a3 c0       	rjmp	.+326    	; 0x1058 <GPIO_writePin+0x1e4>
				CLEAR_BIT(PORTA, pin_num);
     f12:	ab e3       	ldi	r26, 0x3B	; 59
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	eb e3       	ldi	r30, 0x3B	; 59
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	48 2f       	mov	r20, r24
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 2e       	mov	r0, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <GPIO_writePin+0xbc>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	0a 94       	dec	r0
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <GPIO_writePin+0xb8>
     f34:	80 95       	com	r24
     f36:	84 23       	and	r24, r20
     f38:	8c 93       	st	X, r24
     f3a:	8e c0       	rjmp	.+284    	; 0x1058 <GPIO_writePin+0x1e4>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH) {
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	a1 f4       	brne	.+40     	; 0xf6a <GPIO_writePin+0xf6>
				SET_BIT(PORTB, pin_num);
     f42:	a8 e3       	ldi	r26, 0x38	; 56
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e8 e3       	ldi	r30, 0x38	; 56
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <GPIO_writePin+0xec>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <GPIO_writePin+0xe8>
     f64:	84 2b       	or	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	77 c0       	rjmp	.+238    	; 0x1058 <GPIO_writePin+0x1e4>
			} else if (value == LOGIC_LOW) {
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	88 23       	and	r24, r24
     f6e:	09 f0       	breq	.+2      	; 0xf72 <GPIO_writePin+0xfe>
     f70:	73 c0       	rjmp	.+230    	; 0x1058 <GPIO_writePin+0x1e4>
				CLEAR_BIT(PORTB, pin_num);
     f72:	a8 e3       	ldi	r26, 0x38	; 56
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e8 e3       	ldi	r30, 0x38	; 56
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 2e       	mov	r0, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <GPIO_writePin+0x11c>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <GPIO_writePin+0x118>
     f94:	80 95       	com	r24
     f96:	84 23       	and	r24, r20
     f98:	8c 93       	st	X, r24
     f9a:	5e c0       	rjmp	.+188    	; 0x1058 <GPIO_writePin+0x1e4>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH) {
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	a1 f4       	brne	.+40     	; 0xfca <GPIO_writePin+0x156>
				SET_BIT(PORTC, pin_num);
     fa2:	a5 e3       	ldi	r26, 0x35	; 53
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e5 e3       	ldi	r30, 0x35	; 53
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 2e       	mov	r0, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <GPIO_writePin+0x14c>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <GPIO_writePin+0x148>
     fc4:	84 2b       	or	r24, r20
     fc6:	8c 93       	st	X, r24
     fc8:	47 c0       	rjmp	.+142    	; 0x1058 <GPIO_writePin+0x1e4>
			} else if (value == LOGIC_LOW) {
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	88 23       	and	r24, r24
     fce:	09 f0       	breq	.+2      	; 0xfd2 <GPIO_writePin+0x15e>
     fd0:	43 c0       	rjmp	.+134    	; 0x1058 <GPIO_writePin+0x1e4>
				CLEAR_BIT(PORTC, pin_num);
     fd2:	a5 e3       	ldi	r26, 0x35	; 53
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e5 e3       	ldi	r30, 0x35	; 53
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <GPIO_writePin+0x17c>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <GPIO_writePin+0x178>
     ff4:	80 95       	com	r24
     ff6:	84 23       	and	r24, r20
     ff8:	8c 93       	st	X, r24
     ffa:	2e c0       	rjmp	.+92     	; 0x1058 <GPIO_writePin+0x1e4>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH) {
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	a1 f4       	brne	.+40     	; 0x102a <GPIO_writePin+0x1b6>
				SET_BIT(PORTD, pin_num);
    1002:	a2 e3       	ldi	r26, 0x32	; 50
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e2 e3       	ldi	r30, 0x32	; 50
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 2e       	mov	r0, r18
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <GPIO_writePin+0x1ac>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	0a 94       	dec	r0
    1022:	e2 f7       	brpl	.-8      	; 0x101c <GPIO_writePin+0x1a8>
    1024:	84 2b       	or	r24, r20
    1026:	8c 93       	st	X, r24
    1028:	17 c0       	rjmp	.+46     	; 0x1058 <GPIO_writePin+0x1e4>
			} else if (value == LOGIC_LOW) {
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	88 23       	and	r24, r24
    102e:	a1 f4       	brne	.+40     	; 0x1058 <GPIO_writePin+0x1e4>
				CLEAR_BIT(PORTD, pin_num);
    1030:	a2 e3       	ldi	r26, 0x32	; 50
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e2 e3       	ldi	r30, 0x32	; 50
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <GPIO_writePin+0x1da>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <GPIO_writePin+0x1d6>
    1052:	80 95       	com	r24
    1054:	84 23       	and	r24, r20
    1056:	8c 93       	st	X, r24
			}
			break;

		}
	}
}
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	08 95       	ret

00001068 <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	00 d0       	rcall	.+0      	; 0x106e <GPIO_readPin+0x6>
    106e:	00 d0       	rcall	.+0      	; 0x1070 <GPIO_readPin+0x8>
    1070:	00 d0       	rcall	.+0      	; 0x1072 <GPIO_readPin+0xa>
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	8a 83       	std	Y+2, r24	; 0x02
    1078:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_state = 0;
    107a:	19 82       	std	Y+1, r1	; 0x01
	/*Invalid input*/
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	88 30       	cpi	r24, 0x08	; 8
    1080:	18 f4       	brcc	.+6      	; 0x1088 <GPIO_readPin+0x20>
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	84 30       	cpi	r24, 0x04	; 4
    1086:	10 f0       	brcs	.+4      	; 0x108c <GPIO_readPin+0x24>
		/*Return logic low*/
		return LOGIC_LOW;
    1088:	1e 82       	std	Y+6, r1	; 0x06
    108a:	d4 c0       	rjmp	.+424    	; 0x1234 <GPIO_readPin+0x1cc>
	} else {
		switch (port_num) {
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	3d 83       	std	Y+5, r19	; 0x05
    1094:	2c 83       	std	Y+4, r18	; 0x04
    1096:	4c 81       	ldd	r20, Y+4	; 0x04
    1098:	5d 81       	ldd	r21, Y+5	; 0x05
    109a:	41 30       	cpi	r20, 0x01	; 1
    109c:	51 05       	cpc	r21, r1
    109e:	09 f4       	brne	.+2      	; 0x10a2 <GPIO_readPin+0x3a>
    10a0:	44 c0       	rjmp	.+136    	; 0x112a <GPIO_readPin+0xc2>
    10a2:	8c 81       	ldd	r24, Y+4	; 0x04
    10a4:	9d 81       	ldd	r25, Y+5	; 0x05
    10a6:	82 30       	cpi	r24, 0x02	; 2
    10a8:	91 05       	cpc	r25, r1
    10aa:	34 f4       	brge	.+12     	; 0x10b8 <GPIO_readPin+0x50>
    10ac:	2c 81       	ldd	r18, Y+4	; 0x04
    10ae:	3d 81       	ldd	r19, Y+5	; 0x05
    10b0:	21 15       	cp	r18, r1
    10b2:	31 05       	cpc	r19, r1
    10b4:	71 f0       	breq	.+28     	; 0x10d2 <GPIO_readPin+0x6a>
    10b6:	bb c0       	rjmp	.+374    	; 0x122e <GPIO_readPin+0x1c6>
    10b8:	4c 81       	ldd	r20, Y+4	; 0x04
    10ba:	5d 81       	ldd	r21, Y+5	; 0x05
    10bc:	42 30       	cpi	r20, 0x02	; 2
    10be:	51 05       	cpc	r21, r1
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <GPIO_readPin+0x5c>
    10c2:	5f c0       	rjmp	.+190    	; 0x1182 <GPIO_readPin+0x11a>
    10c4:	8c 81       	ldd	r24, Y+4	; 0x04
    10c6:	9d 81       	ldd	r25, Y+5	; 0x05
    10c8:	83 30       	cpi	r24, 0x03	; 3
    10ca:	91 05       	cpc	r25, r1
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <GPIO_readPin+0x68>
    10ce:	84 c0       	rjmp	.+264    	; 0x11d8 <GPIO_readPin+0x170>
    10d0:	ae c0       	rjmp	.+348    	; 0x122e <GPIO_readPin+0x1c6>
		case PORTA_ID:
			if (BIT_IS_SET(PINA, pin_num)) {
    10d2:	e9 e3       	ldi	r30, 0x39	; 57
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	88 2f       	mov	r24, r24
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	a9 01       	movw	r20, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <GPIO_readPin+0x82>
    10e6:	55 95       	asr	r21
    10e8:	47 95       	ror	r20
    10ea:	8a 95       	dec	r24
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <GPIO_readPin+0x7e>
    10ee:	ca 01       	movw	r24, r20
    10f0:	81 70       	andi	r24, 0x01	; 1
    10f2:	90 70       	andi	r25, 0x00	; 0
    10f4:	88 23       	and	r24, r24
    10f6:	19 f0       	breq	.+6      	; 0x10fe <GPIO_readPin+0x96>
				pin_state = LOGIC_HIGH;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	89 83       	std	Y+1, r24	; 0x01
    10fc:	99 c0       	rjmp	.+306    	; 0x1230 <GPIO_readPin+0x1c8>
			} else if (BIT_IS_CLEAR(PINA, pin_num)) {
    10fe:	e9 e3       	ldi	r30, 0x39	; 57
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	a9 01       	movw	r20, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <GPIO_readPin+0xae>
    1112:	55 95       	asr	r21
    1114:	47 95       	ror	r20
    1116:	8a 95       	dec	r24
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <GPIO_readPin+0xaa>
    111a:	ca 01       	movw	r24, r20
    111c:	81 70       	andi	r24, 0x01	; 1
    111e:	90 70       	andi	r25, 0x00	; 0
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	09 f0       	breq	.+2      	; 0x1126 <GPIO_readPin+0xbe>
    1124:	85 c0       	rjmp	.+266    	; 0x1230 <GPIO_readPin+0x1c8>
				pin_state = LOGIC_LOW;
    1126:	19 82       	std	Y+1, r1	; 0x01
    1128:	83 c0       	rjmp	.+262    	; 0x1230 <GPIO_readPin+0x1c8>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB, pin_num)) {
    112a:	e6 e3       	ldi	r30, 0x36	; 54
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	88 2f       	mov	r24, r24
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a9 01       	movw	r20, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <GPIO_readPin+0xda>
    113e:	55 95       	asr	r21
    1140:	47 95       	ror	r20
    1142:	8a 95       	dec	r24
    1144:	e2 f7       	brpl	.-8      	; 0x113e <GPIO_readPin+0xd6>
    1146:	ca 01       	movw	r24, r20
    1148:	81 70       	andi	r24, 0x01	; 1
    114a:	90 70       	andi	r25, 0x00	; 0
    114c:	88 23       	and	r24, r24
    114e:	19 f0       	breq	.+6      	; 0x1156 <GPIO_readPin+0xee>
				pin_state = LOGIC_HIGH;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	89 83       	std	Y+1, r24	; 0x01
    1154:	6d c0       	rjmp	.+218    	; 0x1230 <GPIO_readPin+0x1c8>
			} else if (BIT_IS_CLEAR(PINB, pin_num)) {
    1156:	e6 e3       	ldi	r30, 0x36	; 54
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	88 2f       	mov	r24, r24
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	a9 01       	movw	r20, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <GPIO_readPin+0x106>
    116a:	55 95       	asr	r21
    116c:	47 95       	ror	r20
    116e:	8a 95       	dec	r24
    1170:	e2 f7       	brpl	.-8      	; 0x116a <GPIO_readPin+0x102>
    1172:	ca 01       	movw	r24, r20
    1174:	81 70       	andi	r24, 0x01	; 1
    1176:	90 70       	andi	r25, 0x00	; 0
    1178:	00 97       	sbiw	r24, 0x00	; 0
    117a:	09 f0       	breq	.+2      	; 0x117e <GPIO_readPin+0x116>
    117c:	59 c0       	rjmp	.+178    	; 0x1230 <GPIO_readPin+0x1c8>
				pin_state = LOGIC_LOW;
    117e:	19 82       	std	Y+1, r1	; 0x01
    1180:	57 c0       	rjmp	.+174    	; 0x1230 <GPIO_readPin+0x1c8>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC, pin_num)) {
    1182:	e3 e3       	ldi	r30, 0x33	; 51
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	88 2f       	mov	r24, r24
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	a9 01       	movw	r20, r18
    1194:	02 c0       	rjmp	.+4      	; 0x119a <GPIO_readPin+0x132>
    1196:	55 95       	asr	r21
    1198:	47 95       	ror	r20
    119a:	8a 95       	dec	r24
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <GPIO_readPin+0x12e>
    119e:	ca 01       	movw	r24, r20
    11a0:	81 70       	andi	r24, 0x01	; 1
    11a2:	90 70       	andi	r25, 0x00	; 0
    11a4:	88 23       	and	r24, r24
    11a6:	19 f0       	breq	.+6      	; 0x11ae <GPIO_readPin+0x146>
				pin_state = LOGIC_HIGH;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	89 83       	std	Y+1, r24	; 0x01
    11ac:	41 c0       	rjmp	.+130    	; 0x1230 <GPIO_readPin+0x1c8>
			} else if (BIT_IS_CLEAR(PINC, pin_num)) {
    11ae:	e3 e3       	ldi	r30, 0x33	; 51
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	88 2f       	mov	r24, r24
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	a9 01       	movw	r20, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <GPIO_readPin+0x15e>
    11c2:	55 95       	asr	r21
    11c4:	47 95       	ror	r20
    11c6:	8a 95       	dec	r24
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <GPIO_readPin+0x15a>
    11ca:	ca 01       	movw	r24, r20
    11cc:	81 70       	andi	r24, 0x01	; 1
    11ce:	90 70       	andi	r25, 0x00	; 0
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	71 f5       	brne	.+92     	; 0x1230 <GPIO_readPin+0x1c8>
				pin_state = LOGIC_LOW;
    11d4:	19 82       	std	Y+1, r1	; 0x01
    11d6:	2c c0       	rjmp	.+88     	; 0x1230 <GPIO_readPin+0x1c8>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND, pin_num)) {
    11d8:	e0 e3       	ldi	r30, 0x30	; 48
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	88 2f       	mov	r24, r24
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	a9 01       	movw	r20, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <GPIO_readPin+0x188>
    11ec:	55 95       	asr	r21
    11ee:	47 95       	ror	r20
    11f0:	8a 95       	dec	r24
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <GPIO_readPin+0x184>
    11f4:	ca 01       	movw	r24, r20
    11f6:	81 70       	andi	r24, 0x01	; 1
    11f8:	90 70       	andi	r25, 0x00	; 0
    11fa:	88 23       	and	r24, r24
    11fc:	19 f0       	breq	.+6      	; 0x1204 <GPIO_readPin+0x19c>
				pin_state = LOGIC_HIGH;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	16 c0       	rjmp	.+44     	; 0x1230 <GPIO_readPin+0x1c8>
			} else if (BIT_IS_CLEAR(PIND, pin_num)) {
    1204:	e0 e3       	ldi	r30, 0x30	; 48
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	88 2f       	mov	r24, r24
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	a9 01       	movw	r20, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <GPIO_readPin+0x1b4>
    1218:	55 95       	asr	r21
    121a:	47 95       	ror	r20
    121c:	8a 95       	dec	r24
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <GPIO_readPin+0x1b0>
    1220:	ca 01       	movw	r24, r20
    1222:	81 70       	andi	r24, 0x01	; 1
    1224:	90 70       	andi	r25, 0x00	; 0
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	19 f4       	brne	.+6      	; 0x1230 <GPIO_readPin+0x1c8>
				pin_state = LOGIC_LOW;
    122a:	19 82       	std	Y+1, r1	; 0x01
    122c:	01 c0       	rjmp	.+2      	; 0x1230 <GPIO_readPin+0x1c8>
			}
			break;
		default:
			pin_state = LOGIC_LOW;
    122e:	19 82       	std	Y+1, r1	; 0x01
			break;
		}

	}
	return pin_state;
    1230:	59 81       	ldd	r21, Y+1	; 0x01
    1232:	5e 83       	std	Y+6, r21	; 0x06
    1234:	8e 81       	ldd	r24, Y+6	; 0x06

}
    1236:	26 96       	adiw	r28, 0x06	; 6
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	00 d0       	rcall	.+0      	; 0x124e <GPIO_setupPortDirection+0x6>
    124e:	00 d0       	rcall	.+0      	; 0x1250 <GPIO_setupPortDirection+0x8>
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	84 30       	cpi	r24, 0x04	; 4
    125c:	90 f5       	brcc	.+100    	; 0x12c2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	} else {
		/* Setup the port direction as required */
		switch (port_num) {
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	3c 83       	std	Y+4, r19	; 0x04
    1266:	2b 83       	std	Y+3, r18	; 0x03
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	9c 81       	ldd	r25, Y+4	; 0x04
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	91 05       	cpc	r25, r1
    1270:	d1 f0       	breq	.+52     	; 0x12a6 <GPIO_setupPortDirection+0x5e>
    1272:	2b 81       	ldd	r18, Y+3	; 0x03
    1274:	3c 81       	ldd	r19, Y+4	; 0x04
    1276:	22 30       	cpi	r18, 0x02	; 2
    1278:	31 05       	cpc	r19, r1
    127a:	2c f4       	brge	.+10     	; 0x1286 <GPIO_setupPortDirection+0x3e>
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	9c 81       	ldd	r25, Y+4	; 0x04
    1280:	00 97       	sbiw	r24, 0x00	; 0
    1282:	61 f0       	breq	.+24     	; 0x129c <GPIO_setupPortDirection+0x54>
    1284:	1e c0       	rjmp	.+60     	; 0x12c2 <GPIO_setupPortDirection+0x7a>
    1286:	2b 81       	ldd	r18, Y+3	; 0x03
    1288:	3c 81       	ldd	r19, Y+4	; 0x04
    128a:	22 30       	cpi	r18, 0x02	; 2
    128c:	31 05       	cpc	r19, r1
    128e:	81 f0       	breq	.+32     	; 0x12b0 <GPIO_setupPortDirection+0x68>
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	9c 81       	ldd	r25, Y+4	; 0x04
    1294:	83 30       	cpi	r24, 0x03	; 3
    1296:	91 05       	cpc	r25, r1
    1298:	81 f0       	breq	.+32     	; 0x12ba <GPIO_setupPortDirection+0x72>
    129a:	13 c0       	rjmp	.+38     	; 0x12c2 <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    129c:	ea e3       	ldi	r30, 0x3A	; 58
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	80 83       	st	Z, r24
    12a4:	0e c0       	rjmp	.+28     	; 0x12c2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    12a6:	e7 e3       	ldi	r30, 0x37	; 55
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	80 83       	st	Z, r24
    12ae:	09 c0       	rjmp	.+18     	; 0x12c2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    12b0:	e4 e3       	ldi	r30, 0x34	; 52
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	80 83       	st	Z, r24
    12b8:	04 c0       	rjmp	.+8      	; 0x12c2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    12ba:	e1 e3       	ldi	r30, 0x31	; 49
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	80 83       	st	Z, r24
			break;
		}
	}
}
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <GPIO_writePort+0x6>
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <GPIO_writePort+0x8>
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	6a 83       	std	Y+2, r22	; 0x02
	if ((port_num >= NUM_OF_PORTS)) {
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	84 30       	cpi	r24, 0x04	; 4
    12e4:	90 f5       	brcc	.+100    	; 0x134a <GPIO_writePort+0x7a>
		/*Do nothing*/
	} else {
		switch (port_num) {
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	3c 83       	std	Y+4, r19	; 0x04
    12ee:	2b 83       	std	Y+3, r18	; 0x03
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	91 05       	cpc	r25, r1
    12f8:	d1 f0       	breq	.+52     	; 0x132e <GPIO_writePort+0x5e>
    12fa:	2b 81       	ldd	r18, Y+3	; 0x03
    12fc:	3c 81       	ldd	r19, Y+4	; 0x04
    12fe:	22 30       	cpi	r18, 0x02	; 2
    1300:	31 05       	cpc	r19, r1
    1302:	2c f4       	brge	.+10     	; 0x130e <GPIO_writePort+0x3e>
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	9c 81       	ldd	r25, Y+4	; 0x04
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	61 f0       	breq	.+24     	; 0x1324 <GPIO_writePort+0x54>
    130c:	1e c0       	rjmp	.+60     	; 0x134a <GPIO_writePort+0x7a>
    130e:	2b 81       	ldd	r18, Y+3	; 0x03
    1310:	3c 81       	ldd	r19, Y+4	; 0x04
    1312:	22 30       	cpi	r18, 0x02	; 2
    1314:	31 05       	cpc	r19, r1
    1316:	81 f0       	breq	.+32     	; 0x1338 <GPIO_writePort+0x68>
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	9c 81       	ldd	r25, Y+4	; 0x04
    131c:	83 30       	cpi	r24, 0x03	; 3
    131e:	91 05       	cpc	r25, r1
    1320:	81 f0       	breq	.+32     	; 0x1342 <GPIO_writePort+0x72>
    1322:	13 c0       	rjmp	.+38     	; 0x134a <GPIO_writePort+0x7a>

		case PORTA_ID:
			PORTA = value;
    1324:	eb e3       	ldi	r30, 0x3B	; 59
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	80 83       	st	Z, r24
    132c:	0e c0       	rjmp	.+28     	; 0x134a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    132e:	e8 e3       	ldi	r30, 0x38	; 56
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	80 83       	st	Z, r24
    1336:	09 c0       	rjmp	.+18     	; 0x134a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1338:	e5 e3       	ldi	r30, 0x35	; 53
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	80 83       	st	Z, r24
    1340:	04 c0       	rjmp	.+8      	; 0x134a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1342:	e2 e3       	ldi	r30, 0x32	; 50
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	80 83       	st	Z, r24
			break;

		}
	}
}
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	00 d0       	rcall	.+0      	; 0x135e <GPIO_readPort+0x6>
    135e:	00 d0       	rcall	.+0      	; 0x1360 <GPIO_readPort+0x8>
    1360:	0f 92       	push	r0
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value = 0;
    1368:	19 82       	std	Y+1, r1	; 0x01
	if (port_num >= NUM_OF_PORTS) {
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	84 30       	cpi	r24, 0x04	; 4
    136e:	10 f0       	brcs	.+4      	; 0x1374 <GPIO_readPort+0x1c>
		/*Return 0*/
		return 0x00;
    1370:	1d 82       	std	Y+5, r1	; 0x05
    1372:	34 c0       	rjmp	.+104    	; 0x13dc <GPIO_readPort+0x84>
	} else {
		switch (port_num) {
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	3c 83       	std	Y+4, r19	; 0x04
    137c:	2b 83       	std	Y+3, r18	; 0x03
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	9c 81       	ldd	r25, Y+4	; 0x04
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	91 05       	cpc	r25, r1
    1386:	d1 f0       	breq	.+52     	; 0x13bc <GPIO_readPort+0x64>
    1388:	2b 81       	ldd	r18, Y+3	; 0x03
    138a:	3c 81       	ldd	r19, Y+4	; 0x04
    138c:	22 30       	cpi	r18, 0x02	; 2
    138e:	31 05       	cpc	r19, r1
    1390:	2c f4       	brge	.+10     	; 0x139c <GPIO_readPort+0x44>
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	9c 81       	ldd	r25, Y+4	; 0x04
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	61 f0       	breq	.+24     	; 0x13b2 <GPIO_readPort+0x5a>
    139a:	1e c0       	rjmp	.+60     	; 0x13d8 <GPIO_readPort+0x80>
    139c:	2b 81       	ldd	r18, Y+3	; 0x03
    139e:	3c 81       	ldd	r19, Y+4	; 0x04
    13a0:	22 30       	cpi	r18, 0x02	; 2
    13a2:	31 05       	cpc	r19, r1
    13a4:	81 f0       	breq	.+32     	; 0x13c6 <GPIO_readPort+0x6e>
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	9c 81       	ldd	r25, Y+4	; 0x04
    13aa:	83 30       	cpi	r24, 0x03	; 3
    13ac:	91 05       	cpc	r25, r1
    13ae:	81 f0       	breq	.+32     	; 0x13d0 <GPIO_readPort+0x78>
    13b0:	13 c0       	rjmp	.+38     	; 0x13d8 <GPIO_readPort+0x80>
		case PORTA_ID:
			port_value = PINA;
    13b2:	e9 e3       	ldi	r30, 0x39	; 57
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	89 83       	std	Y+1, r24	; 0x01
    13ba:	0e c0       	rjmp	.+28     	; 0x13d8 <GPIO_readPort+0x80>
			break;
		case PORTB_ID:
			port_value = PINB;
    13bc:	e6 e3       	ldi	r30, 0x36	; 54
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	89 83       	std	Y+1, r24	; 0x01
    13c4:	09 c0       	rjmp	.+18     	; 0x13d8 <GPIO_readPort+0x80>
			break;
		case PORTC_ID:
			port_value = PINC;
    13c6:	e3 e3       	ldi	r30, 0x33	; 51
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	04 c0       	rjmp	.+8      	; 0x13d8 <GPIO_readPort+0x80>
			break;
		case PORTD_ID:
			port_value = PIND;
    13d0:	e0 e3       	ldi	r30, 0x30	; 48
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return port_value;
    13d8:	99 81       	ldd	r25, Y+1	; 0x01
    13da:	9d 83       	std	Y+5, r25	; 0x05
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	08 95       	ret

000013ee <getSendPasswordSync>:
 * Sends Sync and password string to control ECU for processing.
 *
 * UART_SENDS# = 2
 * UART_REC#   = 0
 */
static void getSendPasswordSync(void) {
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	2f 97       	sbiw	r28, 0x0f	; 15
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	cd bf       	out	0x3d, r28	; 61
	/* For every keypad press, print asterisk and store pressed key*/
	for (uint8 i = 0; i < PASSWORD_LENGTH - 2; i++) {
    1406:	1f 86       	std	Y+15, r1	; 0x0f
    1408:	99 c0       	rjmp	.+306    	; 0x153c <getSendPasswordSync+0x14e>
		g_password_buffer[i] = KEYPAD_getPressedKey();
    140a:	8f 85       	ldd	r24, Y+15	; 0x0f
    140c:	08 2f       	mov	r16, r24
    140e:	10 e0       	ldi	r17, 0x00	; 0
    1410:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <KEYPAD_getPressedKey>
    1414:	f8 01       	movw	r30, r16
    1416:	e2 51       	subi	r30, 0x12	; 18
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	80 83       	st	Z, r24
		/* Adjust number to contain ASCII if its a number so that the number '0'
		 * is not counted as a null terminator character,
		 * if it's a symbol like '#','+','*'... then no need to adjust.
		 * */
		if (g_password_buffer[i] < 10) {
    141c:	8f 85       	ldd	r24, Y+15	; 0x0f
    141e:	88 2f       	mov	r24, r24
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	fc 01       	movw	r30, r24
    1424:	e2 51       	subi	r30, 0x12	; 18
    1426:	ff 4f       	sbci	r31, 0xFF	; 255
    1428:	80 81       	ld	r24, Z
    142a:	8a 30       	cpi	r24, 0x0A	; 10
    142c:	78 f4       	brcc	.+30     	; 0x144c <getSendPasswordSync+0x5e>
			g_password_buffer[i] += '0';
    142e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	8f 85       	ldd	r24, Y+15	; 0x0f
    1436:	88 2f       	mov	r24, r24
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	fc 01       	movw	r30, r24
    143c:	e2 51       	subi	r30, 0x12	; 18
    143e:	ff 4f       	sbci	r31, 0xFF	; 255
    1440:	80 81       	ld	r24, Z
    1442:	80 5d       	subi	r24, 0xD0	; 208
    1444:	f9 01       	movw	r30, r18
    1446:	e2 51       	subi	r30, 0x12	; 18
    1448:	ff 4f       	sbci	r31, 0xFF	; 255
    144a:	80 83       	st	Z, r24
		}
		LCD_displayCharacter('*');
    144c:	8a e2       	ldi	r24, 0x2A	; 42
    144e:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_displayCharacter>
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	a8 ec       	ldi	r26, 0xC8	; 200
    1458:	b3 e4       	ldi	r27, 0x43	; 67
    145a:	8b 87       	std	Y+11, r24	; 0x0b
    145c:	9c 87       	std	Y+12, r25	; 0x0c
    145e:	ad 87       	std	Y+13, r26	; 0x0d
    1460:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1462:	6b 85       	ldd	r22, Y+11	; 0x0b
    1464:	7c 85       	ldd	r23, Y+12	; 0x0c
    1466:	8d 85       	ldd	r24, Y+13	; 0x0d
    1468:	9e 85       	ldd	r25, Y+14	; 0x0e
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	4a ef       	ldi	r20, 0xFA	; 250
    1470:	54 e4       	ldi	r21, 0x44	; 68
    1472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	8f 83       	std	Y+7, r24	; 0x07
    147c:	98 87       	std	Y+8, r25	; 0x08
    147e:	a9 87       	std	Y+9, r26	; 0x09
    1480:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1482:	6f 81       	ldd	r22, Y+7	; 0x07
    1484:	78 85       	ldd	r23, Y+8	; 0x08
    1486:	89 85       	ldd	r24, Y+9	; 0x09
    1488:	9a 85       	ldd	r25, Y+10	; 0x0a
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	40 e8       	ldi	r20, 0x80	; 128
    1490:	5f e3       	ldi	r21, 0x3F	; 63
    1492:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1496:	88 23       	and	r24, r24
    1498:	2c f4       	brge	.+10     	; 0x14a4 <getSendPasswordSync+0xb6>
		__ticks = 1;
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	9e 83       	std	Y+6, r25	; 0x06
    14a0:	8d 83       	std	Y+5, r24	; 0x05
    14a2:	3f c0       	rjmp	.+126    	; 0x1522 <getSendPasswordSync+0x134>
	else if (__tmp > 65535)
    14a4:	6f 81       	ldd	r22, Y+7	; 0x07
    14a6:	78 85       	ldd	r23, Y+8	; 0x08
    14a8:	89 85       	ldd	r24, Y+9	; 0x09
    14aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	3f ef       	ldi	r19, 0xFF	; 255
    14b0:	4f e7       	ldi	r20, 0x7F	; 127
    14b2:	57 e4       	ldi	r21, 0x47	; 71
    14b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14b8:	18 16       	cp	r1, r24
    14ba:	4c f5       	brge	.+82     	; 0x150e <getSendPasswordSync+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14be:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	40 e2       	ldi	r20, 0x20	; 32
    14ca:	51 e4       	ldi	r21, 0x41	; 65
    14cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	bc 01       	movw	r22, r24
    14d6:	cd 01       	movw	r24, r26
    14d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	9e 83       	std	Y+6, r25	; 0x06
    14e2:	8d 83       	std	Y+5, r24	; 0x05
    14e4:	0f c0       	rjmp	.+30     	; 0x1504 <getSendPasswordSync+0x116>
    14e6:	88 ec       	ldi	r24, 0xC8	; 200
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	9c 83       	std	Y+4, r25	; 0x04
    14ec:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	9c 81       	ldd	r25, Y+4	; 0x04
    14f2:	01 97       	sbiw	r24, 0x01	; 1
    14f4:	f1 f7       	brne	.-4      	; 0x14f2 <getSendPasswordSync+0x104>
    14f6:	9c 83       	std	Y+4, r25	; 0x04
    14f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14fa:	8d 81       	ldd	r24, Y+5	; 0x05
    14fc:	9e 81       	ldd	r25, Y+6	; 0x06
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	9e 83       	std	Y+6, r25	; 0x06
    1502:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1504:	8d 81       	ldd	r24, Y+5	; 0x05
    1506:	9e 81       	ldd	r25, Y+6	; 0x06
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	69 f7       	brne	.-38     	; 0x14e6 <getSendPasswordSync+0xf8>
    150c:	14 c0       	rjmp	.+40     	; 0x1536 <getSendPasswordSync+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    150e:	6f 81       	ldd	r22, Y+7	; 0x07
    1510:	78 85       	ldd	r23, Y+8	; 0x08
    1512:	89 85       	ldd	r24, Y+9	; 0x09
    1514:	9a 85       	ldd	r25, Y+10	; 0x0a
    1516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	9e 83       	std	Y+6, r25	; 0x06
    1520:	8d 83       	std	Y+5, r24	; 0x05
    1522:	8d 81       	ldd	r24, Y+5	; 0x05
    1524:	9e 81       	ldd	r25, Y+6	; 0x06
    1526:	9a 83       	std	Y+2, r25	; 0x02
    1528:	89 83       	std	Y+1, r24	; 0x01
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	9a 81       	ldd	r25, Y+2	; 0x02
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	f1 f7       	brne	.-4      	; 0x152e <getSendPasswordSync+0x140>
    1532:	9a 83       	std	Y+2, r25	; 0x02
    1534:	89 83       	std	Y+1, r24	; 0x01
 * UART_SENDS# = 2
 * UART_REC#   = 0
 */
static void getSendPasswordSync(void) {
	/* For every keypad press, print asterisk and store pressed key*/
	for (uint8 i = 0; i < PASSWORD_LENGTH - 2; i++) {
    1536:	8f 85       	ldd	r24, Y+15	; 0x0f
    1538:	8f 5f       	subi	r24, 0xFF	; 255
    153a:	8f 87       	std	Y+15, r24	; 0x0f
    153c:	8f 85       	ldd	r24, Y+15	; 0x0f
    153e:	85 30       	cpi	r24, 0x05	; 5
    1540:	08 f4       	brcc	.+2      	; 0x1544 <getSendPasswordSync+0x156>
    1542:	63 cf       	rjmp	.-314    	; 0x140a <getSendPasswordSync+0x1c>
		}
		LCD_displayCharacter('*');
		_delay_ms(400);
	};
	/* Send password after syncing with control */
	UART_sendByte(SYNC_HANDSHAKE);
    1544:	8d ee       	ldi	r24, 0xED	; 237
    1546:	0e 94 2d 19 	call	0x325a	; 0x325a <UART_sendByte>
	UART_sendString(g_password_buffer);
    154a:	8e ee       	ldi	r24, 0xEE	; 238
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	0e 94 53 19 	call	0x32a6	; 0x32a6 <UART_sendString>

}
    1552:	2f 96       	adiw	r28, 0x0f	; 15
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	f8 94       	cli
    1558:	de bf       	out	0x3e, r29	; 62
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	cd bf       	out	0x3d, r28	; 61
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	1f 91       	pop	r17
    1564:	0f 91       	pop	r16
    1566:	08 95       	ret

00001568 <printFirstBootMenu1>:
/*
 * Description :
 * Displays first boot menu for password entry try #1
 */
static void printFirstBootMenu1(void) {
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1570:	0e 94 65 18 	call	0x30ca	; 0x30ca <LCD_clearScreen>
	LCD_displayString((const uint8*) "Please enter");
    1574:	80 e6       	ldi	r24, 0x60	; 96
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	0e 94 dd 17 	call	0x2fba	; 0x2fba <LCD_displayString>
	LCD_displayStringRowColumn(LCD_ROW_1, 0, (const uint8*) "new pass: ");
    157c:	2d e6       	ldi	r18, 0x6D	; 109
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	60 e0       	ldi	r22, 0x00	; 0
    1584:	a9 01       	movw	r20, r18
    1586:	0e 94 4c 18 	call	0x3098	; 0x3098 <LCD_displayStringRowColumn>
}
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <printFirstBootMenu2>:
/*
 * Description :
 * Displays first boot menu for password entry try #2
 */
static void printFirstBootMenu2(void) {
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1598:	0e 94 65 18 	call	0x30ca	; 0x30ca <LCD_clearScreen>
	LCD_displayString((const uint8*) "Please re-enter");
    159c:	88 e7       	ldi	r24, 0x78	; 120
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	0e 94 dd 17 	call	0x2fba	; 0x2fba <LCD_displayString>
	LCD_displayStringRowColumn(LCD_ROW_1, 0, (const uint8*) "new pass: ");
    15a4:	2d e6       	ldi	r18, 0x6D	; 109
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	60 e0       	ldi	r22, 0x00	; 0
    15ac:	a9 01       	movw	r20, r18
    15ae:	0e 94 4c 18 	call	0x3098	; 0x3098 <LCD_displayStringRowColumn>
}
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <printMainMenu>:
/*
 * Description :
 * Print options for the user on LCD.
 */
static void printMainMenu(void) {
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    15c0:	0e 94 65 18 	call	0x30ca	; 0x30ca <LCD_clearScreen>
	LCD_displayString((const uint8*) "+ : Open door");
    15c4:	88 e8       	ldi	r24, 0x88	; 136
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	0e 94 dd 17 	call	0x2fba	; 0x2fba <LCD_displayString>
	LCD_displayStringRowColumn(LCD_ROW_1, 0, (const uint8*) "- : Change pass");
    15cc:	26 e9       	ldi	r18, 0x96	; 150
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	60 e0       	ldi	r22, 0x00	; 0
    15d4:	a9 01       	movw	r20, r18
    15d6:	0e 94 4c 18 	call	0x3098	; 0x3098 <LCD_displayStringRowColumn>
}
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <printLockedMenu>:
/*
 * Description :
 * Prints password prompt message for the user on LCD.
 */
static void printLockedMenu(void) {
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    15e8:	0e 94 65 18 	call	0x30ca	; 0x30ca <LCD_clearScreen>
	LCD_displayString((const uint8*) "Enter pass: ");
    15ec:	86 ea       	ldi	r24, 0xA6	; 166
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	0e 94 dd 17 	call	0x2fba	; 0x2fba <LCD_displayString>
	LCD_moveCursor(LCD_ROW_1, 0);
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	60 e0       	ldi	r22, 0x00	; 0
    15f8:	0e 94 06 18 	call	0x300c	; 0x300c <LCD_moveCursor>
}
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <printAlarmMessage>:
/*
 * Description :
 * Error message for alarm mode when password is entered incorrectly
 */
static void printAlarmMessage(void) {
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    160a:	0e 94 65 18 	call	0x30ca	; 0x30ca <LCD_clearScreen>
	LCD_displayString((const uint8*) "   !!!ERROR!!!");
    160e:	83 eb       	ldi	r24, 0xB3	; 179
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	0e 94 dd 17 	call	0x2fba	; 0x2fba <LCD_displayString>
}
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	08 95       	ret

0000161c <printDoorUnlockingMessage>:
/*
 * Description :
 * Prints the door status for the user on LCD while unlocking.
 */
static void printDoorUnlockingMessage(void) {
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1624:	0e 94 65 18 	call	0x30ca	; 0x30ca <LCD_clearScreen>
	LCD_displayString((const uint8*) "Door is");
    1628:	82 ec       	ldi	r24, 0xC2	; 194
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	0e 94 dd 17 	call	0x2fba	; 0x2fba <LCD_displayString>
	LCD_displayStringRowColumn(LCD_ROW_1, 0, (const uint8*) "unlocking...");
    1630:	2a ec       	ldi	r18, 0xCA	; 202
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	60 e0       	ldi	r22, 0x00	; 0
    1638:	a9 01       	movw	r20, r18
    163a:	0e 94 4c 18 	call	0x3098	; 0x3098 <LCD_displayStringRowColumn>
}
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <printDoorLockingMessage>:
/*
 * Description :
 * Prints the door status for the user on LCD while locking.
 */
static void printDoorLockingMessage(void) {
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    164c:	0e 94 65 18 	call	0x30ca	; 0x30ca <LCD_clearScreen>
	LCD_displayString((const uint8*) "Door is");
    1650:	82 ec       	ldi	r24, 0xC2	; 194
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 dd 17 	call	0x2fba	; 0x2fba <LCD_displayString>
	LCD_displayStringRowColumn(LCD_ROW_1, 0, (const uint8*) "locking...");
    1658:	27 ed       	ldi	r18, 0xD7	; 215
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	60 e0       	ldi	r22, 0x00	; 0
    1660:	a9 01       	movw	r20, r18
    1662:	0e 94 4c 18 	call	0x3098	; 0x3098 <LCD_displayStringRowColumn>
}
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <attemptPassword>:
 * triggers alarm mode.
 *
 * UART_SENDS# = 2
 * UART_REC#   = 2
 */
static void attemptPassword(uint8 *password_match) {
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	60 97       	sbiw	r28, 0x10	; 16
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	f8 94       	cli
    167a:	de bf       	out	0x3e, r29	; 62
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	cd bf       	out	0x3d, r28	; 61
    1680:	98 8b       	std	Y+16, r25	; 0x10
    1682:	8f 87       	std	Y+15, r24	; 0x0f
	do {
		/* Get and send password to CONTROL ECU */
		printLockedMenu();
    1684:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <printLockedMenu>
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	a6 e9       	ldi	r26, 0x96	; 150
    168e:	b3 e4       	ldi	r27, 0x43	; 67
    1690:	8b 87       	std	Y+11, r24	; 0x0b
    1692:	9c 87       	std	Y+12, r25	; 0x0c
    1694:	ad 87       	std	Y+13, r26	; 0x0d
    1696:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1698:	6b 85       	ldd	r22, Y+11	; 0x0b
    169a:	7c 85       	ldd	r23, Y+12	; 0x0c
    169c:	8d 85       	ldd	r24, Y+13	; 0x0d
    169e:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	4a ef       	ldi	r20, 0xFA	; 250
    16a6:	54 e4       	ldi	r21, 0x44	; 68
    16a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	8f 83       	std	Y+7, r24	; 0x07
    16b2:	98 87       	std	Y+8, r25	; 0x08
    16b4:	a9 87       	std	Y+9, r26	; 0x09
    16b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16b8:	6f 81       	ldd	r22, Y+7	; 0x07
    16ba:	78 85       	ldd	r23, Y+8	; 0x08
    16bc:	89 85       	ldd	r24, Y+9	; 0x09
    16be:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	40 e8       	ldi	r20, 0x80	; 128
    16c6:	5f e3       	ldi	r21, 0x3F	; 63
    16c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16cc:	88 23       	and	r24, r24
    16ce:	2c f4       	brge	.+10     	; 0x16da <attemptPassword+0x6e>
		__ticks = 1;
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	9e 83       	std	Y+6, r25	; 0x06
    16d6:	8d 83       	std	Y+5, r24	; 0x05
    16d8:	3f c0       	rjmp	.+126    	; 0x1758 <attemptPassword+0xec>
	else if (__tmp > 65535)
    16da:	6f 81       	ldd	r22, Y+7	; 0x07
    16dc:	78 85       	ldd	r23, Y+8	; 0x08
    16de:	89 85       	ldd	r24, Y+9	; 0x09
    16e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	3f ef       	ldi	r19, 0xFF	; 255
    16e6:	4f e7       	ldi	r20, 0x7F	; 127
    16e8:	57 e4       	ldi	r21, 0x47	; 71
    16ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16ee:	18 16       	cp	r1, r24
    16f0:	4c f5       	brge	.+82     	; 0x1744 <attemptPassword+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	40 e2       	ldi	r20, 0x20	; 32
    1700:	51 e4       	ldi	r21, 0x41	; 65
    1702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	bc 01       	movw	r22, r24
    170c:	cd 01       	movw	r24, r26
    170e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	9e 83       	std	Y+6, r25	; 0x06
    1718:	8d 83       	std	Y+5, r24	; 0x05
    171a:	0f c0       	rjmp	.+30     	; 0x173a <attemptPassword+0xce>
    171c:	88 ec       	ldi	r24, 0xC8	; 200
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	9c 83       	std	Y+4, r25	; 0x04
    1722:	8b 83       	std	Y+3, r24	; 0x03
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	9c 81       	ldd	r25, Y+4	; 0x04
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	f1 f7       	brne	.-4      	; 0x1728 <attemptPassword+0xbc>
    172c:	9c 83       	std	Y+4, r25	; 0x04
    172e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1730:	8d 81       	ldd	r24, Y+5	; 0x05
    1732:	9e 81       	ldd	r25, Y+6	; 0x06
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	9e 83       	std	Y+6, r25	; 0x06
    1738:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173a:	8d 81       	ldd	r24, Y+5	; 0x05
    173c:	9e 81       	ldd	r25, Y+6	; 0x06
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	69 f7       	brne	.-38     	; 0x171c <attemptPassword+0xb0>
    1742:	14 c0       	rjmp	.+40     	; 0x176c <attemptPassword+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1744:	6f 81       	ldd	r22, Y+7	; 0x07
    1746:	78 85       	ldd	r23, Y+8	; 0x08
    1748:	89 85       	ldd	r24, Y+9	; 0x09
    174a:	9a 85       	ldd	r25, Y+10	; 0x0a
    174c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	9e 83       	std	Y+6, r25	; 0x06
    1756:	8d 83       	std	Y+5, r24	; 0x05
    1758:	8d 81       	ldd	r24, Y+5	; 0x05
    175a:	9e 81       	ldd	r25, Y+6	; 0x06
    175c:	9a 83       	std	Y+2, r25	; 0x02
    175e:	89 83       	std	Y+1, r24	; 0x01
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	9a 81       	ldd	r25, Y+2	; 0x02
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	f1 f7       	brne	.-4      	; 0x1764 <attemptPassword+0xf8>
    1768:	9a 83       	std	Y+2, r25	; 0x02
    176a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
		getSendPasswordSync();
    176c:	0e 94 f7 09 	call	0x13ee	; 0x13ee <getSendPasswordSync>

		*password_match = UART_receiveByte();
    1770:	0e 94 44 19 	call	0x3288	; 0x3288 <UART_receiveByte>
    1774:	ef 85       	ldd	r30, Y+15	; 0x0f
    1776:	f8 89       	ldd	r31, Y+16	; 0x10
    1778:	80 83       	st	Z, r24
		/* Receive next status from CONTROL ECU */
		HMI_status = UART_receiveByte();
    177a:	0e 94 44 19 	call	0x3288	; 0x3288 <UART_receiveByte>
    177e:	80 93 ea 00 	sts	0x00EA, r24
	} while (!(*password_match) && (HMI_status != MODE_ALARM_MODE));
    1782:	ef 85       	ldd	r30, Y+15	; 0x0f
    1784:	f8 89       	ldd	r31, Y+16	; 0x10
    1786:	80 81       	ld	r24, Z
    1788:	88 23       	and	r24, r24
    178a:	29 f4       	brne	.+10     	; 0x1796 <attemptPassword+0x12a>
    178c:	80 91 ea 00 	lds	r24, 0x00EA
    1790:	83 30       	cpi	r24, 0x03	; 3
    1792:	09 f0       	breq	.+2      	; 0x1796 <attemptPassword+0x12a>
    1794:	77 cf       	rjmp	.-274    	; 0x1684 <attemptPassword+0x18>

}
    1796:	60 96       	adiw	r28, 0x10	; 16
    1798:	0f b6       	in	r0, 0x3f	; 63
    179a:	f8 94       	cli
    179c:	de bf       	out	0x3e, r29	; 62
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	cd bf       	out	0x3d, r28	; 61
    17a2:	cf 91       	pop	r28
    17a4:	df 91       	pop	r29
    17a6:	08 95       	ret

000017a8 <main>:

int main(void) {
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	6a 97       	sbiw	r28, 0x1a	; 26
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
	/* Initialize last element in buffer with null terminator for UART send string function to work correctly*/
	g_password_buffer[PASSWORD_LENGTH - 1] = '\0';
    17bc:	10 92 f4 00 	sts	0x00F4, r1
	/* Initialize element before last element in buffer with UART end of string character: '#'
	 *  for UART receive string function to work correctly*/
	g_password_buffer[PASSWORD_LENGTH - 2] = UART_EOS;
    17c0:	83 e2       	ldi	r24, 0x23	; 35
    17c2:	80 93 f3 00 	sts	0x00F3, r24
	boolean password_match = FALSE;
    17c6:	18 8a       	std	Y+16, r1	; 0x10
	 * 	Baudrate = 9600 bps
	 * 	Character size = 8 bits
	 * 	Parity type = Disabled
	 * 	1 Stop bit
	 * */
	UART_ConfigType conf = {9600,{0,PARITY_DISABLED,UART_CH_SIZE_8}};
    17c8:	9e 01       	movw	r18, r28
    17ca:	2f 5e       	subi	r18, 0xEF	; 239
    17cc:	3f 4f       	sbci	r19, 0xFF	; 255
    17ce:	3f 8b       	std	Y+23, r19	; 0x17
    17d0:	2e 8b       	std	Y+22, r18	; 0x16
    17d2:	8b ee       	ldi	r24, 0xEB	; 235
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	99 8f       	std	Y+25, r25	; 0x19
    17d8:	88 8f       	std	Y+24, r24	; 0x18
    17da:	93 e0       	ldi	r25, 0x03	; 3
    17dc:	9a 8f       	std	Y+26, r25	; 0x1a
    17de:	e8 8d       	ldd	r30, Y+24	; 0x18
    17e0:	f9 8d       	ldd	r31, Y+25	; 0x19
    17e2:	00 80       	ld	r0, Z
    17e4:	28 8d       	ldd	r18, Y+24	; 0x18
    17e6:	39 8d       	ldd	r19, Y+25	; 0x19
    17e8:	2f 5f       	subi	r18, 0xFF	; 255
    17ea:	3f 4f       	sbci	r19, 0xFF	; 255
    17ec:	39 8f       	std	Y+25, r19	; 0x19
    17ee:	28 8f       	std	Y+24, r18	; 0x18
    17f0:	ee 89       	ldd	r30, Y+22	; 0x16
    17f2:	ff 89       	ldd	r31, Y+23	; 0x17
    17f4:	00 82       	st	Z, r0
    17f6:	2e 89       	ldd	r18, Y+22	; 0x16
    17f8:	3f 89       	ldd	r19, Y+23	; 0x17
    17fa:	2f 5f       	subi	r18, 0xFF	; 255
    17fc:	3f 4f       	sbci	r19, 0xFF	; 255
    17fe:	3f 8b       	std	Y+23, r19	; 0x17
    1800:	2e 8b       	std	Y+22, r18	; 0x16
    1802:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1804:	31 50       	subi	r19, 0x01	; 1
    1806:	3a 8f       	std	Y+26, r19	; 0x1a
    1808:	8a 8d       	ldd	r24, Y+26	; 0x1a
    180a:	88 23       	and	r24, r24
    180c:	41 f7       	brne	.-48     	; 0x17de <main+0x36>

	/* Modules initialization */
	UART_init(&conf);
    180e:	ce 01       	movw	r24, r28
    1810:	41 96       	adiw	r24, 0x11	; 17
    1812:	0e 94 92 18 	call	0x3124	; 0x3124 <UART_init>
	LCD_init();
    1816:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <LCD_init>
	/*Super loop*/
	for (;;) {
		switch (HMI_status) {
    181a:	80 91 ea 00 	lds	r24, 0x00EA
    181e:	e8 2f       	mov	r30, r24
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	fd 8b       	std	Y+21, r31	; 0x15
    1824:	ec 8b       	std	Y+20, r30	; 0x14
    1826:	2c 89       	ldd	r18, Y+20	; 0x14
    1828:	3d 89       	ldd	r19, Y+21	; 0x15
    182a:	22 30       	cpi	r18, 0x02	; 2
    182c:	31 05       	cpc	r19, r1
    182e:	89 f1       	breq	.+98     	; 0x1892 <main+0xea>
    1830:	8c 89       	ldd	r24, Y+20	; 0x14
    1832:	9d 89       	ldd	r25, Y+21	; 0x15
    1834:	83 30       	cpi	r24, 0x03	; 3
    1836:	91 05       	cpc	r25, r1
    1838:	2c f4       	brge	.+10     	; 0x1844 <main+0x9c>
    183a:	ec 89       	ldd	r30, Y+20	; 0x14
    183c:	fd 89       	ldd	r31, Y+21	; 0x15
    183e:	30 97       	sbiw	r30, 0x00	; 0
    1840:	19 f1       	breq	.+70     	; 0x1888 <main+0xe0>
    1842:	eb cf       	rjmp	.-42     	; 0x181a <main+0x72>
    1844:	2c 89       	ldd	r18, Y+20	; 0x14
    1846:	3d 89       	ldd	r19, Y+21	; 0x15
    1848:	23 30       	cpi	r18, 0x03	; 3
    184a:	31 05       	cpc	r19, r1
    184c:	09 f4       	brne	.+2      	; 0x1850 <main+0xa8>
    184e:	c9 c0       	rjmp	.+402    	; 0x19e2 <main+0x23a>
    1850:	8c 89       	ldd	r24, Y+20	; 0x14
    1852:	9d 89       	ldd	r25, Y+21	; 0x15
    1854:	8f 3f       	cpi	r24, 0xFF	; 255
    1856:	91 05       	cpc	r25, r1
    1858:	01 f7       	brne	.-64     	; 0x181a <main+0x72>

		/************************** First boot, setting up new password  **************************/
		case MODE_FIRST_BOOT:
			/* Get first password  */
			printFirstBootMenu1();
    185a:	0e 94 b4 0a 	call	0x1568	; 0x1568 <printFirstBootMenu1>
			getSendPasswordSync();
    185e:	0e 94 f7 09 	call	0x13ee	; 0x13ee <getSendPasswordSync>
			/* Get second password */
			printFirstBootMenu2();
    1862:	0e 94 c8 0a 	call	0x1590	; 0x1590 <printFirstBootMenu2>
			getSendPasswordSync();
    1866:	0e 94 f7 09 	call	0x13ee	; 0x13ee <getSendPasswordSync>
			/* SYNC UART */
			while (UART_receiveByte() != SYNC_HANDSHAKE) {
    186a:	0e 94 44 19 	call	0x3288	; 0x3288 <UART_receiveByte>
    186e:	8d 3e       	cpi	r24, 0xED	; 237
    1870:	e1 f7       	brne	.-8      	; 0x186a <main+0xc2>
			}
			password_match = UART_receiveByte();
    1872:	0e 94 44 19 	call	0x3288	; 0x3288 <UART_receiveByte>
    1876:	88 8b       	std	Y+16, r24	; 0x10
			/* If passwords match, change mode to main menu mode */
			if (password_match) {
    1878:	88 89       	ldd	r24, Y+16	; 0x10
    187a:	88 23       	and	r24, r24
    187c:	71 f2       	breq	.-100    	; 0x181a <main+0x72>
				password_match = FALSE;
    187e:	18 8a       	std	Y+16, r1	; 0x10
				HMI_status = MODE_NORMAL_BOOT_MAIN;
    1880:	82 e0       	ldi	r24, 0x02	; 2
    1882:	80 93 ea 00 	sts	0x00EA, r24
    1886:	c9 cf       	rjmp	.-110    	; 0x181a <main+0x72>
			}
			break;
		case MODE_NORMAL_BOOT_LOCKED:
			/*********************** Mode for password attempts by the user ***********************/
			attemptPassword(&password_match);
    1888:	ce 01       	movw	r24, r28
    188a:	40 96       	adiw	r24, 0x10	; 16
    188c:	0e 94 36 0b 	call	0x166c	; 0x166c <attemptPassword>
    1890:	c4 cf       	rjmp	.-120    	; 0x181a <main+0x72>
			break;
		case MODE_NORMAL_BOOT_MAIN:
			printMainMenu();
    1892:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <printMainMenu>
			/* Await +/- to be pressed by user */
			do {
				keyPressed = KEYPAD_getPressedKey();
    1896:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <KEYPAD_getPressedKey>
    189a:	8f 87       	std	Y+15, r24	; 0x0f
			} while (keyPressed != '+' && keyPressed != '-');
    189c:	8f 85       	ldd	r24, Y+15	; 0x0f
    189e:	8b 32       	cpi	r24, 0x2B	; 43
    18a0:	19 f0       	breq	.+6      	; 0x18a8 <main+0x100>
    18a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    18a4:	8d 32       	cpi	r24, 0x2D	; 45
    18a6:	b9 f7       	brne	.-18     	; 0x1896 <main+0xee>
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	a8 ec       	ldi	r26, 0xC8	; 200
    18ae:	b3 e4       	ldi	r27, 0x43	; 67
    18b0:	8b 87       	std	Y+11, r24	; 0x0b
    18b2:	9c 87       	std	Y+12, r25	; 0x0c
    18b4:	ad 87       	std	Y+13, r26	; 0x0d
    18b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    18bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    18be:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	4a ef       	ldi	r20, 0xFA	; 250
    18c6:	54 e4       	ldi	r21, 0x44	; 68
    18c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	8f 83       	std	Y+7, r24	; 0x07
    18d2:	98 87       	std	Y+8, r25	; 0x08
    18d4:	a9 87       	std	Y+9, r26	; 0x09
    18d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18d8:	6f 81       	ldd	r22, Y+7	; 0x07
    18da:	78 85       	ldd	r23, Y+8	; 0x08
    18dc:	89 85       	ldd	r24, Y+9	; 0x09
    18de:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	40 e8       	ldi	r20, 0x80	; 128
    18e6:	5f e3       	ldi	r21, 0x3F	; 63
    18e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18ec:	88 23       	and	r24, r24
    18ee:	2c f4       	brge	.+10     	; 0x18fa <main+0x152>
		__ticks = 1;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	9e 83       	std	Y+6, r25	; 0x06
    18f6:	8d 83       	std	Y+5, r24	; 0x05
    18f8:	3f c0       	rjmp	.+126    	; 0x1978 <main+0x1d0>
	else if (__tmp > 65535)
    18fa:	6f 81       	ldd	r22, Y+7	; 0x07
    18fc:	78 85       	ldd	r23, Y+8	; 0x08
    18fe:	89 85       	ldd	r24, Y+9	; 0x09
    1900:	9a 85       	ldd	r25, Y+10	; 0x0a
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	3f ef       	ldi	r19, 0xFF	; 255
    1906:	4f e7       	ldi	r20, 0x7F	; 127
    1908:	57 e4       	ldi	r21, 0x47	; 71
    190a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    190e:	18 16       	cp	r1, r24
    1910:	4c f5       	brge	.+82     	; 0x1964 <main+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1912:	6b 85       	ldd	r22, Y+11	; 0x0b
    1914:	7c 85       	ldd	r23, Y+12	; 0x0c
    1916:	8d 85       	ldd	r24, Y+13	; 0x0d
    1918:	9e 85       	ldd	r25, Y+14	; 0x0e
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	40 e2       	ldi	r20, 0x20	; 32
    1920:	51 e4       	ldi	r21, 0x41	; 65
    1922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	bc 01       	movw	r22, r24
    192c:	cd 01       	movw	r24, r26
    192e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	9e 83       	std	Y+6, r25	; 0x06
    1938:	8d 83       	std	Y+5, r24	; 0x05
    193a:	0f c0       	rjmp	.+30     	; 0x195a <main+0x1b2>
    193c:	88 ec       	ldi	r24, 0xC8	; 200
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	9c 83       	std	Y+4, r25	; 0x04
    1942:	8b 83       	std	Y+3, r24	; 0x03
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	9c 81       	ldd	r25, Y+4	; 0x04
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <main+0x1a0>
    194c:	9c 83       	std	Y+4, r25	; 0x04
    194e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1950:	8d 81       	ldd	r24, Y+5	; 0x05
    1952:	9e 81       	ldd	r25, Y+6	; 0x06
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	9e 83       	std	Y+6, r25	; 0x06
    1958:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    195a:	8d 81       	ldd	r24, Y+5	; 0x05
    195c:	9e 81       	ldd	r25, Y+6	; 0x06
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	69 f7       	brne	.-38     	; 0x193c <main+0x194>
    1962:	14 c0       	rjmp	.+40     	; 0x198c <main+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1964:	6f 81       	ldd	r22, Y+7	; 0x07
    1966:	78 85       	ldd	r23, Y+8	; 0x08
    1968:	89 85       	ldd	r24, Y+9	; 0x09
    196a:	9a 85       	ldd	r25, Y+10	; 0x0a
    196c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	9e 83       	std	Y+6, r25	; 0x06
    1976:	8d 83       	std	Y+5, r24	; 0x05
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	9e 81       	ldd	r25, Y+6	; 0x06
    197c:	9a 83       	std	Y+2, r25	; 0x02
    197e:	89 83       	std	Y+1, r24	; 0x01
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	9a 81       	ldd	r25, Y+2	; 0x02
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	f1 f7       	brne	.-4      	; 0x1984 <main+0x1dc>
    1988:	9a 83       	std	Y+2, r25	; 0x02
    198a:	89 83       	std	Y+1, r24	; 0x01
			/* Delay to avoid de-bounce that triggers a wrong keystroke when attempting password*/
			_delay_ms(400);

			/* User wants to open the door (pressed '+' key),
			 * request old password first*/
			if (keyPressed == '+') {
    198c:	8f 85       	ldd	r24, Y+15	; 0x0f
    198e:	8b 32       	cpi	r24, 0x2B	; 43
    1990:	e1 f4       	brne	.+56     	; 0x19ca <main+0x222>
				/* Send open door request to Control ECU and attempt password entry*/
				UART_sendByte(SYNC_HANDSHAKE);
    1992:	8d ee       	ldi	r24, 0xED	; 237
    1994:	0e 94 2d 19 	call	0x325a	; 0x325a <UART_sendByte>
				/* Send request to Control ECU to open the door */
				UART_sendByte(OPEN_DOOR_REQUEST);
    1998:	84 e0       	ldi	r24, 0x04	; 4
    199a:	0e 94 2d 19 	call	0x325a	; 0x325a <UART_sendByte>
				/* Allow user to attempt the password before proceeding */
				attemptPassword(&password_match);
    199e:	ce 01       	movw	r24, r28
    19a0:	40 96       	adiw	r24, 0x10	; 16
    19a2:	0e 94 36 0b 	call	0x166c	; 0x166c <attemptPassword>
				/* Password attempt was successful */

				if (HMI_status != MODE_ALARM_MODE) {
    19a6:	80 91 ea 00 	lds	r24, 0x00EA
    19aa:	83 30       	cpi	r24, 0x03	; 3
    19ac:	61 f0       	breq	.+24     	; 0x19c6 <main+0x21e>
					printDoorUnlockingMessage();
    19ae:	0e 94 0e 0b 	call	0x161c	; 0x161c <printDoorUnlockingMessage>
					/* Wait until Control ECU opens the door */
					while (UART_receiveByte() != SYNC_HANDSHAKE)
    19b2:	0e 94 44 19 	call	0x3288	; 0x3288 <UART_receiveByte>
    19b6:	8d 3e       	cpi	r24, 0xED	; 237
    19b8:	e1 f7       	brne	.-8      	; 0x19b2 <main+0x20a>
						;
					printDoorLockingMessage();
    19ba:	0e 94 22 0b 	call	0x1644	; 0x1644 <printDoorLockingMessage>
					/* Wait until Control ECU closes the door */
					while (UART_receiveByte() != SYNC_HANDSHAKE)
    19be:	0e 94 44 19 	call	0x3288	; 0x3288 <UART_receiveByte>
    19c2:	8d 3e       	cpi	r24, 0xED	; 237
    19c4:	e1 f7       	brne	.-8      	; 0x19be <main+0x216>
					/* Password attempt was unsuccessful */
				} else {
					/* Skip over to alarm mode*/
				}
				/* Reset key press to receive new press */
				keyPressed = 0;
    19c6:	1f 86       	std	Y+15, r1	; 0x0f
    19c8:	28 cf       	rjmp	.-432    	; 0x181a <main+0x72>
			}

			/* User wants to change password (pressed '-' key,
			 * request old password first*/
			else {
				UART_sendByte(SYNC_HANDSHAKE);
    19ca:	8d ee       	ldi	r24, 0xED	; 237
    19cc:	0e 94 2d 19 	call	0x325a	; 0x325a <UART_sendByte>
				/* Send request to Control ECU to change the password */
				UART_sendByte(CHANGE_PASS_REQUEST);
    19d0:	85 e0       	ldi	r24, 0x05	; 5
    19d2:	0e 94 2d 19 	call	0x325a	; 0x325a <UART_sendByte>
				/* Allow user to attempt the password before proceeding */
				attemptPassword(&password_match);
    19d6:	ce 01       	movw	r24, r28
    19d8:	40 96       	adiw	r24, 0x10	; 16
    19da:	0e 94 36 0b 	call	0x166c	; 0x166c <attemptPassword>

				/* Reset key press to receive new press */
				keyPressed = 0;
    19de:	1f 86       	std	Y+15, r1	; 0x0f
    19e0:	1c cf       	rjmp	.-456    	; 0x181a <main+0x72>
			}
			break;
			/******** Alarm mode triggered by wrong password entry, displays error message ********/
		case MODE_ALARM_MODE:
			printAlarmMessage();
    19e2:	0e 94 01 0b 	call	0x1602	; 0x1602 <printAlarmMessage>
			/* Wait for a notification from Control ECU to exit alarm mode */
			while (UART_receiveByte() != SYNC_HANDSHAKE)
    19e6:	0e 94 44 19 	call	0x3288	; 0x3288 <UART_receiveByte>
    19ea:	8d 3e       	cpi	r24, 0xED	; 237
    19ec:	e1 f7       	brne	.-8      	; 0x19e6 <main+0x23e>
				;
			HMI_status = UART_receiveByte();
    19ee:	0e 94 44 19 	call	0x3288	; 0x3288 <UART_receiveByte>
    19f2:	80 93 ea 00 	sts	0x00EA, r24
    19f6:	11 cf       	rjmp	.-478    	; 0x181a <main+0x72>

000019f8 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	00 d0       	rcall	.+0      	; 0x19fe <KEYPAD_getPressedKey+0x6>
    19fe:	0f 92       	push	r0
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1a04:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1a06:	1b 82       	std	Y+3, r1	; 0x03
    1a08:	43 c0       	rjmp	.+134    	; 0x1a90 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	60 e0       	ldi	r22, 0x00	; 0
    1a0e:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	98 2f       	mov	r25, r24
    1a16:	9c 5f       	subi	r25, 0xFC	; 252
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	69 2f       	mov	r22, r25
    1a1c:	41 e0       	ldi	r20, 0x01	; 1
    1a1e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	88 2f       	mov	r24, r24
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	9c 01       	movw	r18, r24
    1a2a:	2c 5f       	subi	r18, 0xFC	; 252
    1a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <KEYPAD_getPressedKey+0x40>
    1a34:	88 0f       	add	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	2a 95       	dec	r18
    1a3a:	e2 f7       	brpl	.-8      	; 0x1a34 <KEYPAD_getPressedKey+0x3c>
    1a3c:	80 95       	com	r24
    1a3e:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	69 81       	ldd	r22, Y+1	; 0x01
    1a44:	0e 94 68 09 	call	0x12d0	; 0x12d0 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1a48:	1a 82       	std	Y+2, r1	; 0x02
    1a4a:	1c c0       	rjmp	.+56     	; 0x1a84 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	6a 81       	ldd	r22, Y+2	; 0x02
    1a50:	0e 94 34 08 	call	0x1068	; 0x1068 <GPIO_readPin>
    1a54:	88 23       	and	r24, r24
    1a56:	99 f4       	brne	.+38     	; 0x1a7e <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	88 2f       	mov	r24, r24
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	88 0f       	add	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	98 2f       	mov	r25, r24
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	89 0f       	add	r24, r25
    1a6c:	8f 5f       	subi	r24, 0xFF	; 255
    1a6e:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	8f 5f       	subi	r24, 0xFF	; 255
    1a82:	8a 83       	std	Y+2, r24	; 0x02
    1a84:	8a 81       	ldd	r24, Y+2	; 0x02
    1a86:	84 30       	cpi	r24, 0x04	; 4
    1a88:	08 f3       	brcs	.-62     	; 0x1a4c <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	8f 5f       	subi	r24, 0xFF	; 255
    1a8e:	8b 83       	std	Y+3, r24	; 0x03
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	84 30       	cpi	r24, 0x04	; 4
    1a94:	08 f4       	brcc	.+2      	; 0x1a98 <KEYPAD_getPressedKey+0xa0>
    1a96:	b9 cf       	rjmp	.-142    	; 0x1a0a <KEYPAD_getPressedKey+0x12>
    1a98:	b6 cf       	rjmp	.-148    	; 0x1a06 <KEYPAD_getPressedKey+0xe>

00001a9a <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	00 d0       	rcall	.+0      	; 0x1aa0 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1aa8:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	3c 83       	std	Y+4, r19	; 0x04
    1ab2:	2b 83       	std	Y+3, r18	; 0x03
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab8:	88 30       	cpi	r24, 0x08	; 8
    1aba:	91 05       	cpc	r25, r1
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1abe:	70 c0       	rjmp	.+224    	; 0x1ba0 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1ac0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac4:	29 30       	cpi	r18, 0x09	; 9
    1ac6:	31 05       	cpc	r19, r1
    1ac8:	5c f5       	brge	.+86     	; 0x1b20 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ace:	84 30       	cpi	r24, 0x04	; 4
    1ad0:	91 05       	cpc	r25, r1
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1ad4:	59 c0       	rjmp	.+178    	; 0x1b88 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1ad6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad8:	3c 81       	ldd	r19, Y+4	; 0x04
    1ada:	25 30       	cpi	r18, 0x05	; 5
    1adc:	31 05       	cpc	r19, r1
    1ade:	9c f4       	brge	.+38     	; 0x1b06 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae4:	82 30       	cpi	r24, 0x02	; 2
    1ae6:	91 05       	cpc	r25, r1
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <KEYPAD_4x4_adjustKeyNumber+0x52>
    1aea:	48 c0       	rjmp	.+144    	; 0x1b7c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1aec:	2b 81       	ldd	r18, Y+3	; 0x03
    1aee:	3c 81       	ldd	r19, Y+4	; 0x04
    1af0:	23 30       	cpi	r18, 0x03	; 3
    1af2:	31 05       	cpc	r19, r1
    1af4:	0c f0       	brlt	.+2      	; 0x1af8 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1af6:	45 c0       	rjmp	.+138    	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1af8:	8b 81       	ldd	r24, Y+3	; 0x03
    1afa:	9c 81       	ldd	r25, Y+4	; 0x04
    1afc:	81 30       	cpi	r24, 0x01	; 1
    1afe:	91 05       	cpc	r25, r1
    1b00:	09 f4       	brne	.+2      	; 0x1b04 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1b02:	39 c0       	rjmp	.+114    	; 0x1b76 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1b04:	67 c0       	rjmp	.+206    	; 0x1bd4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1b06:	2b 81       	ldd	r18, Y+3	; 0x03
    1b08:	3c 81       	ldd	r19, Y+4	; 0x04
    1b0a:	26 30       	cpi	r18, 0x06	; 6
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1b10:	41 c0       	rjmp	.+130    	; 0x1b94 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	9c 81       	ldd	r25, Y+4	; 0x04
    1b16:	87 30       	cpi	r24, 0x07	; 7
    1b18:	91 05       	cpc	r25, r1
    1b1a:	0c f0       	brlt	.+2      	; 0x1b1e <KEYPAD_4x4_adjustKeyNumber+0x84>
    1b1c:	3e c0       	rjmp	.+124    	; 0x1b9a <KEYPAD_4x4_adjustKeyNumber+0x100>
    1b1e:	37 c0       	rjmp	.+110    	; 0x1b8e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1b20:	2b 81       	ldd	r18, Y+3	; 0x03
    1b22:	3c 81       	ldd	r19, Y+4	; 0x04
    1b24:	2c 30       	cpi	r18, 0x0C	; 12
    1b26:	31 05       	cpc	r19, r1
    1b28:	09 f4       	brne	.+2      	; 0x1b2c <KEYPAD_4x4_adjustKeyNumber+0x92>
    1b2a:	46 c0       	rjmp	.+140    	; 0x1bb8 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b30:	8d 30       	cpi	r24, 0x0D	; 13
    1b32:	91 05       	cpc	r25, r1
    1b34:	5c f4       	brge	.+22     	; 0x1b4c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1b36:	2b 81       	ldd	r18, Y+3	; 0x03
    1b38:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3a:	2a 30       	cpi	r18, 0x0A	; 10
    1b3c:	31 05       	cpc	r19, r1
    1b3e:	b1 f1       	breq	.+108    	; 0x1bac <KEYPAD_4x4_adjustKeyNumber+0x112>
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	9c 81       	ldd	r25, Y+4	; 0x04
    1b44:	8b 30       	cpi	r24, 0x0B	; 11
    1b46:	91 05       	cpc	r25, r1
    1b48:	a4 f5       	brge	.+104    	; 0x1bb2 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1b4a:	2d c0       	rjmp	.+90     	; 0x1ba6 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1b4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b50:	2e 30       	cpi	r18, 0x0E	; 14
    1b52:	31 05       	cpc	r19, r1
    1b54:	b9 f1       	breq	.+110    	; 0x1bc4 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5a:	8e 30       	cpi	r24, 0x0E	; 14
    1b5c:	91 05       	cpc	r25, r1
    1b5e:	7c f1       	brlt	.+94     	; 0x1bbe <KEYPAD_4x4_adjustKeyNumber+0x124>
    1b60:	2b 81       	ldd	r18, Y+3	; 0x03
    1b62:	3c 81       	ldd	r19, Y+4	; 0x04
    1b64:	2f 30       	cpi	r18, 0x0F	; 15
    1b66:	31 05       	cpc	r19, r1
    1b68:	79 f1       	breq	.+94     	; 0x1bc8 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6e:	80 31       	cpi	r24, 0x10	; 16
    1b70:	91 05       	cpc	r25, r1
    1b72:	69 f1       	breq	.+90     	; 0x1bce <KEYPAD_4x4_adjustKeyNumber+0x134>
    1b74:	2f c0       	rjmp	.+94     	; 0x1bd4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1b76:	87 e0       	ldi	r24, 0x07	; 7
    1b78:	89 83       	std	Y+1, r24	; 0x01
    1b7a:	2e c0       	rjmp	.+92     	; 0x1bd8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1b7c:	88 e0       	ldi	r24, 0x08	; 8
    1b7e:	89 83       	std	Y+1, r24	; 0x01
    1b80:	2b c0       	rjmp	.+86     	; 0x1bd8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1b82:	89 e0       	ldi	r24, 0x09	; 9
    1b84:	89 83       	std	Y+1, r24	; 0x01
    1b86:	28 c0       	rjmp	.+80     	; 0x1bd8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1b88:	85 e2       	ldi	r24, 0x25	; 37
    1b8a:	89 83       	std	Y+1, r24	; 0x01
    1b8c:	25 c0       	rjmp	.+74     	; 0x1bd8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1b8e:	84 e0       	ldi	r24, 0x04	; 4
    1b90:	89 83       	std	Y+1, r24	; 0x01
    1b92:	22 c0       	rjmp	.+68     	; 0x1bd8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1b94:	85 e0       	ldi	r24, 0x05	; 5
    1b96:	89 83       	std	Y+1, r24	; 0x01
    1b98:	1f c0       	rjmp	.+62     	; 0x1bd8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1b9a:	86 e0       	ldi	r24, 0x06	; 6
    1b9c:	89 83       	std	Y+1, r24	; 0x01
    1b9e:	1c c0       	rjmp	.+56     	; 0x1bd8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1ba0:	8a e2       	ldi	r24, 0x2A	; 42
    1ba2:	89 83       	std	Y+1, r24	; 0x01
    1ba4:	19 c0       	rjmp	.+50     	; 0x1bd8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	89 83       	std	Y+1, r24	; 0x01
    1baa:	16 c0       	rjmp	.+44     	; 0x1bd8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1bac:	82 e0       	ldi	r24, 0x02	; 2
    1bae:	89 83       	std	Y+1, r24	; 0x01
    1bb0:	13 c0       	rjmp	.+38     	; 0x1bd8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1bb2:	83 e0       	ldi	r24, 0x03	; 3
    1bb4:	89 83       	std	Y+1, r24	; 0x01
    1bb6:	10 c0       	rjmp	.+32     	; 0x1bd8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1bb8:	8d e2       	ldi	r24, 0x2D	; 45
    1bba:	89 83       	std	Y+1, r24	; 0x01
    1bbc:	0d c0       	rjmp	.+26     	; 0x1bd8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1bbe:	8d e0       	ldi	r24, 0x0D	; 13
    1bc0:	89 83       	std	Y+1, r24	; 0x01
    1bc2:	0a c0       	rjmp	.+20     	; 0x1bd8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1bc4:	19 82       	std	Y+1, r1	; 0x01
    1bc6:	08 c0       	rjmp	.+16     	; 0x1bd8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1bc8:	8d e3       	ldi	r24, 0x3D	; 61
    1bca:	89 83       	std	Y+1, r24	; 0x01
    1bcc:	05 c0       	rjmp	.+10     	; 0x1bd8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1bce:	8b e2       	ldi	r24, 0x2B	; 43
    1bd0:	89 83       	std	Y+1, r24	; 0x01
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	08 95       	ret

00001be8 <LCD_sendCommand>:
#include "gpio.h"
#include "util/delay.h"
#include <stdlib.h>	/*To use itoa function*/

/*Description: Sends a command to the LCD as given by a_data */
void LCD_sendCommand(uint8 a_data) {
    1be8:	0f 93       	push	r16
    1bea:	1f 93       	push	r17
    1bec:	df 93       	push	r29
    1bee:	cf 93       	push	r28
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	c9 57       	subi	r28, 0x79	; 121
    1bf6:	d0 40       	sbci	r29, 0x00	; 0
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	f8 94       	cli
    1bfc:	de bf       	out	0x3e, r29	; 62
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	cd bf       	out	0x3d, r28	; 61
    1c02:	fe 01       	movw	r30, r28
    1c04:	e7 58       	subi	r30, 0x87	; 135
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	80 83       	st	Z, r24

	/*RS = 0 to send command*/
	GPIO_writePin(LCD_CONTROL_PORT, LCD_RS, LOGIC_LOW);
    1c0a:	83 e0       	ldi	r24, 0x03	; 3
    1c0c:	62 e0       	ldi	r22, 0x02	; 2
    1c0e:	40 e0       	ldi	r20, 0x00	; 0
    1c10:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>

	/*R/W = 0 to write to LCD*/
	GPIO_writePin(LCD_CONTROL_PORT, LCD_RW, LOGIC_LOW);
    1c14:	83 e0       	ldi	r24, 0x03	; 3
    1c16:	63 e0       	ldi	r22, 0x03	; 3
    1c18:	40 e0       	ldi	r20, 0x00	; 0
    1c1a:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    1c1e:	fe 01       	movw	r30, r28
    1c20:	eb 58       	subi	r30, 0x8B	; 139
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	a0 ea       	ldi	r26, 0xA0	; 160
    1c2a:	b1 e4       	ldi	r27, 0x41	; 65
    1c2c:	80 83       	st	Z, r24
    1c2e:	91 83       	std	Z+1, r25	; 0x01
    1c30:	a2 83       	std	Z+2, r26	; 0x02
    1c32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c34:	8e 01       	movw	r16, r28
    1c36:	0f 58       	subi	r16, 0x8F	; 143
    1c38:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	eb 58       	subi	r30, 0x8B	; 139
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	60 81       	ld	r22, Z
    1c42:	71 81       	ldd	r23, Z+1	; 0x01
    1c44:	82 81       	ldd	r24, Z+2	; 0x02
    1c46:	93 81       	ldd	r25, Z+3	; 0x03
    1c48:	2b ea       	ldi	r18, 0xAB	; 171
    1c4a:	3a ea       	ldi	r19, 0xAA	; 170
    1c4c:	4a ea       	ldi	r20, 0xAA	; 170
    1c4e:	5e e3       	ldi	r21, 0x3E	; 62
    1c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	f8 01       	movw	r30, r16
    1c5a:	80 83       	st	Z, r24
    1c5c:	91 83       	std	Z+1, r25	; 0x01
    1c5e:	a2 83       	std	Z+2, r26	; 0x02
    1c60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c62:	fe 01       	movw	r30, r28
    1c64:	ef 58       	subi	r30, 0x8F	; 143
    1c66:	ff 4f       	sbci	r31, 0xFF	; 255
    1c68:	60 81       	ld	r22, Z
    1c6a:	71 81       	ldd	r23, Z+1	; 0x01
    1c6c:	82 81       	ldd	r24, Z+2	; 0x02
    1c6e:	93 81       	ldd	r25, Z+3	; 0x03
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	40 e8       	ldi	r20, 0x80	; 128
    1c76:	5f e3       	ldi	r21, 0x3F	; 63
    1c78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c7c:	88 23       	and	r24, r24
    1c7e:	34 f4       	brge	.+12     	; 0x1c8c <LCD_sendCommand+0xa4>
		__ticks = 1;
    1c80:	fe 01       	movw	r30, r28
    1c82:	e0 59       	subi	r30, 0x90	; 144
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	80 83       	st	Z, r24
    1c8a:	e0 c0       	rjmp	.+448    	; 0x1e4c <LCD_sendCommand+0x264>
	else if (__tmp > 255)
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	ef 58       	subi	r30, 0x8F	; 143
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	60 81       	ld	r22, Z
    1c94:	71 81       	ldd	r23, Z+1	; 0x01
    1c96:	82 81       	ldd	r24, Z+2	; 0x02
    1c98:	93 81       	ldd	r25, Z+3	; 0x03
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ca0:	53 e4       	ldi	r21, 0x43	; 67
    1ca2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ca6:	18 16       	cp	r1, r24
    1ca8:	0c f0       	brlt	.+2      	; 0x1cac <LCD_sendCommand+0xc4>
    1caa:	c0 c0       	rjmp	.+384    	; 0x1e2c <LCD_sendCommand+0x244>
	{
		_delay_ms(__us / 1000.0);
    1cac:	fe 01       	movw	r30, r28
    1cae:	eb 58       	subi	r30, 0x8B	; 139
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	60 81       	ld	r22, Z
    1cb4:	71 81       	ldd	r23, Z+1	; 0x01
    1cb6:	82 81       	ldd	r24, Z+2	; 0x02
    1cb8:	93 81       	ldd	r25, Z+3	; 0x03
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	4a e7       	ldi	r20, 0x7A	; 122
    1cc0:	54 e4       	ldi	r21, 0x44	; 68
    1cc2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	fe 01       	movw	r30, r28
    1ccc:	e4 59       	subi	r30, 0x94	; 148
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	80 83       	st	Z, r24
    1cd2:	91 83       	std	Z+1, r25	; 0x01
    1cd4:	a2 83       	std	Z+2, r26	; 0x02
    1cd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd8:	8e 01       	movw	r16, r28
    1cda:	08 59       	subi	r16, 0x98	; 152
    1cdc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cde:	fe 01       	movw	r30, r28
    1ce0:	e4 59       	subi	r30, 0x94	; 148
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	60 81       	ld	r22, Z
    1ce6:	71 81       	ldd	r23, Z+1	; 0x01
    1ce8:	82 81       	ldd	r24, Z+2	; 0x02
    1cea:	93 81       	ldd	r25, Z+3	; 0x03
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	4a e7       	ldi	r20, 0x7A	; 122
    1cf2:	53 e4       	ldi	r21, 0x43	; 67
    1cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	f8 01       	movw	r30, r16
    1cfe:	80 83       	st	Z, r24
    1d00:	91 83       	std	Z+1, r25	; 0x01
    1d02:	a2 83       	std	Z+2, r26	; 0x02
    1d04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d06:	fe 01       	movw	r30, r28
    1d08:	e8 59       	subi	r30, 0x98	; 152
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	60 81       	ld	r22, Z
    1d0e:	71 81       	ldd	r23, Z+1	; 0x01
    1d10:	82 81       	ldd	r24, Z+2	; 0x02
    1d12:	93 81       	ldd	r25, Z+3	; 0x03
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	40 e8       	ldi	r20, 0x80	; 128
    1d1a:	5f e3       	ldi	r21, 0x3F	; 63
    1d1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d20:	88 23       	and	r24, r24
    1d22:	44 f4       	brge	.+16     	; 0x1d34 <LCD_sendCommand+0x14c>
		__ticks = 1;
    1d24:	fe 01       	movw	r30, r28
    1d26:	ea 59       	subi	r30, 0x9A	; 154
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	91 83       	std	Z+1, r25	; 0x01
    1d30:	80 83       	st	Z, r24
    1d32:	64 c0       	rjmp	.+200    	; 0x1dfc <LCD_sendCommand+0x214>
	else if (__tmp > 65535)
    1d34:	fe 01       	movw	r30, r28
    1d36:	e8 59       	subi	r30, 0x98	; 152
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	60 81       	ld	r22, Z
    1d3c:	71 81       	ldd	r23, Z+1	; 0x01
    1d3e:	82 81       	ldd	r24, Z+2	; 0x02
    1d40:	93 81       	ldd	r25, Z+3	; 0x03
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	3f ef       	ldi	r19, 0xFF	; 255
    1d46:	4f e7       	ldi	r20, 0x7F	; 127
    1d48:	57 e4       	ldi	r21, 0x47	; 71
    1d4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d4e:	18 16       	cp	r1, r24
    1d50:	0c f0       	brlt	.+2      	; 0x1d54 <LCD_sendCommand+0x16c>
    1d52:	43 c0       	rjmp	.+134    	; 0x1dda <LCD_sendCommand+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d54:	fe 01       	movw	r30, r28
    1d56:	e4 59       	subi	r30, 0x94	; 148
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	60 81       	ld	r22, Z
    1d5c:	71 81       	ldd	r23, Z+1	; 0x01
    1d5e:	82 81       	ldd	r24, Z+2	; 0x02
    1d60:	93 81       	ldd	r25, Z+3	; 0x03
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	40 e2       	ldi	r20, 0x20	; 32
    1d68:	51 e4       	ldi	r21, 0x41	; 65
    1d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	8e 01       	movw	r16, r28
    1d74:	0a 59       	subi	r16, 0x9A	; 154
    1d76:	1f 4f       	sbci	r17, 0xFF	; 255
    1d78:	bc 01       	movw	r22, r24
    1d7a:	cd 01       	movw	r24, r26
    1d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	f8 01       	movw	r30, r16
    1d86:	91 83       	std	Z+1, r25	; 0x01
    1d88:	80 83       	st	Z, r24
    1d8a:	1f c0       	rjmp	.+62     	; 0x1dca <LCD_sendCommand+0x1e2>
    1d8c:	fe 01       	movw	r30, r28
    1d8e:	ec 59       	subi	r30, 0x9C	; 156
    1d90:	ff 4f       	sbci	r31, 0xFF	; 255
    1d92:	89 e1       	ldi	r24, 0x19	; 25
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	91 83       	std	Z+1, r25	; 0x01
    1d98:	80 83       	st	Z, r24
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	ec 59       	subi	r30, 0x9C	; 156
    1d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1da0:	80 81       	ld	r24, Z
    1da2:	91 81       	ldd	r25, Z+1	; 0x01
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	f1 f7       	brne	.-4      	; 0x1da4 <LCD_sendCommand+0x1bc>
    1da8:	fe 01       	movw	r30, r28
    1daa:	ec 59       	subi	r30, 0x9C	; 156
    1dac:	ff 4f       	sbci	r31, 0xFF	; 255
    1dae:	91 83       	std	Z+1, r25	; 0x01
    1db0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db2:	de 01       	movw	r26, r28
    1db4:	aa 59       	subi	r26, 0x9A	; 154
    1db6:	bf 4f       	sbci	r27, 0xFF	; 255
    1db8:	fe 01       	movw	r30, r28
    1dba:	ea 59       	subi	r30, 0x9A	; 154
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	80 81       	ld	r24, Z
    1dc0:	91 81       	ldd	r25, Z+1	; 0x01
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	11 96       	adiw	r26, 0x01	; 1
    1dc6:	9c 93       	st	X, r25
    1dc8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dca:	fe 01       	movw	r30, r28
    1dcc:	ea 59       	subi	r30, 0x9A	; 154
    1dce:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd0:	80 81       	ld	r24, Z
    1dd2:	91 81       	ldd	r25, Z+1	; 0x01
    1dd4:	00 97       	sbiw	r24, 0x00	; 0
    1dd6:	d1 f6       	brne	.-76     	; 0x1d8c <LCD_sendCommand+0x1a4>
    1dd8:	4b c0       	rjmp	.+150    	; 0x1e70 <LCD_sendCommand+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dda:	8e 01       	movw	r16, r28
    1ddc:	0a 59       	subi	r16, 0x9A	; 154
    1dde:	1f 4f       	sbci	r17, 0xFF	; 255
    1de0:	fe 01       	movw	r30, r28
    1de2:	e8 59       	subi	r30, 0x98	; 152
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	60 81       	ld	r22, Z
    1de8:	71 81       	ldd	r23, Z+1	; 0x01
    1dea:	82 81       	ldd	r24, Z+2	; 0x02
    1dec:	93 81       	ldd	r25, Z+3	; 0x03
    1dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	f8 01       	movw	r30, r16
    1df8:	91 83       	std	Z+1, r25	; 0x01
    1dfa:	80 83       	st	Z, r24
    1dfc:	de 01       	movw	r26, r28
    1dfe:	ae 59       	subi	r26, 0x9E	; 158
    1e00:	bf 4f       	sbci	r27, 0xFF	; 255
    1e02:	fe 01       	movw	r30, r28
    1e04:	ea 59       	subi	r30, 0x9A	; 154
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	80 81       	ld	r24, Z
    1e0a:	91 81       	ldd	r25, Z+1	; 0x01
    1e0c:	11 96       	adiw	r26, 0x01	; 1
    1e0e:	9c 93       	st	X, r25
    1e10:	8e 93       	st	-X, r24
    1e12:	fe 01       	movw	r30, r28
    1e14:	ee 59       	subi	r30, 0x9E	; 158
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	80 81       	ld	r24, Z
    1e1a:	91 81       	ldd	r25, Z+1	; 0x01
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <LCD_sendCommand+0x234>
    1e20:	fe 01       	movw	r30, r28
    1e22:	ee 59       	subi	r30, 0x9E	; 158
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	91 83       	std	Z+1, r25	; 0x01
    1e28:	80 83       	st	Z, r24
    1e2a:	22 c0       	rjmp	.+68     	; 0x1e70 <LCD_sendCommand+0x288>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e2c:	8e 01       	movw	r16, r28
    1e2e:	00 59       	subi	r16, 0x90	; 144
    1e30:	1f 4f       	sbci	r17, 0xFF	; 255
    1e32:	fe 01       	movw	r30, r28
    1e34:	ef 58       	subi	r30, 0x8F	; 143
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	60 81       	ld	r22, Z
    1e3a:	71 81       	ldd	r23, Z+1	; 0x01
    1e3c:	82 81       	ldd	r24, Z+2	; 0x02
    1e3e:	93 81       	ldd	r25, Z+3	; 0x03
    1e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	f8 01       	movw	r30, r16
    1e4a:	80 83       	st	Z, r24
    1e4c:	de 01       	movw	r26, r28
    1e4e:	af 59       	subi	r26, 0x9F	; 159
    1e50:	bf 4f       	sbci	r27, 0xFF	; 255
    1e52:	fe 01       	movw	r30, r28
    1e54:	e0 59       	subi	r30, 0x90	; 144
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	80 81       	ld	r24, Z
    1e5a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	ef 59       	subi	r30, 0x9F	; 159
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	80 81       	ld	r24, Z
    1e64:	8a 95       	dec	r24
    1e66:	f1 f7       	brne	.-4      	; 0x1e64 <LCD_sendCommand+0x27c>
    1e68:	fe 01       	movw	r30, r28
    1e6a:	ef 59       	subi	r30, 0x9F	; 159
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	80 83       	st	Z, r24

	/*tas = 50ns*/
	_delay_us(20);

	/*Enable = 1 before sending data*/
	GPIO_writePin(LCD_CONTROL_PORT, LCD_ENABLE, LOGIC_HIGH);
    1e70:	83 e0       	ldi	r24, 0x03	; 3
    1e72:	64 e0       	ldi	r22, 0x04	; 4
    1e74:	41 e0       	ldi	r20, 0x01	; 1
    1e76:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	e3 5a       	subi	r30, 0xA3	; 163
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	a0 ea       	ldi	r26, 0xA0	; 160
    1e86:	b1 e4       	ldi	r27, 0x41	; 65
    1e88:	80 83       	st	Z, r24
    1e8a:	91 83       	std	Z+1, r25	; 0x01
    1e8c:	a2 83       	std	Z+2, r26	; 0x02
    1e8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e90:	8e 01       	movw	r16, r28
    1e92:	07 5a       	subi	r16, 0xA7	; 167
    1e94:	1f 4f       	sbci	r17, 0xFF	; 255
    1e96:	fe 01       	movw	r30, r28
    1e98:	e3 5a       	subi	r30, 0xA3	; 163
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	60 81       	ld	r22, Z
    1e9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ea0:	82 81       	ldd	r24, Z+2	; 0x02
    1ea2:	93 81       	ldd	r25, Z+3	; 0x03
    1ea4:	2b ea       	ldi	r18, 0xAB	; 171
    1ea6:	3a ea       	ldi	r19, 0xAA	; 170
    1ea8:	4a ea       	ldi	r20, 0xAA	; 170
    1eaa:	5e e3       	ldi	r21, 0x3E	; 62
    1eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	f8 01       	movw	r30, r16
    1eb6:	80 83       	st	Z, r24
    1eb8:	91 83       	std	Z+1, r25	; 0x01
    1eba:	a2 83       	std	Z+2, r26	; 0x02
    1ebc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	e7 5a       	subi	r30, 0xA7	; 167
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	60 81       	ld	r22, Z
    1ec6:	71 81       	ldd	r23, Z+1	; 0x01
    1ec8:	82 81       	ldd	r24, Z+2	; 0x02
    1eca:	93 81       	ldd	r25, Z+3	; 0x03
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	40 e8       	ldi	r20, 0x80	; 128
    1ed2:	5f e3       	ldi	r21, 0x3F	; 63
    1ed4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ed8:	88 23       	and	r24, r24
    1eda:	34 f4       	brge	.+12     	; 0x1ee8 <LCD_sendCommand+0x300>
		__ticks = 1;
    1edc:	fe 01       	movw	r30, r28
    1ede:	e8 5a       	subi	r30, 0xA8	; 168
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	80 83       	st	Z, r24
    1ee6:	e0 c0       	rjmp	.+448    	; 0x20a8 <LCD_sendCommand+0x4c0>
	else if (__tmp > 255)
    1ee8:	fe 01       	movw	r30, r28
    1eea:	e7 5a       	subi	r30, 0xA7	; 167
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	60 81       	ld	r22, Z
    1ef0:	71 81       	ldd	r23, Z+1	; 0x01
    1ef2:	82 81       	ldd	r24, Z+2	; 0x02
    1ef4:	93 81       	ldd	r25, Z+3	; 0x03
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	4f e7       	ldi	r20, 0x7F	; 127
    1efc:	53 e4       	ldi	r21, 0x43	; 67
    1efe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f02:	18 16       	cp	r1, r24
    1f04:	0c f0       	brlt	.+2      	; 0x1f08 <LCD_sendCommand+0x320>
    1f06:	c0 c0       	rjmp	.+384    	; 0x2088 <LCD_sendCommand+0x4a0>
	{
		_delay_ms(__us / 1000.0);
    1f08:	fe 01       	movw	r30, r28
    1f0a:	e3 5a       	subi	r30, 0xA3	; 163
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	60 81       	ld	r22, Z
    1f10:	71 81       	ldd	r23, Z+1	; 0x01
    1f12:	82 81       	ldd	r24, Z+2	; 0x02
    1f14:	93 81       	ldd	r25, Z+3	; 0x03
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	4a e7       	ldi	r20, 0x7A	; 122
    1f1c:	54 e4       	ldi	r21, 0x44	; 68
    1f1e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	fe 01       	movw	r30, r28
    1f28:	ec 5a       	subi	r30, 0xAC	; 172
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	80 83       	st	Z, r24
    1f2e:	91 83       	std	Z+1, r25	; 0x01
    1f30:	a2 83       	std	Z+2, r26	; 0x02
    1f32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f34:	8e 01       	movw	r16, r28
    1f36:	00 5b       	subi	r16, 0xB0	; 176
    1f38:	1f 4f       	sbci	r17, 0xFF	; 255
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	ec 5a       	subi	r30, 0xAC	; 172
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	60 81       	ld	r22, Z
    1f42:	71 81       	ldd	r23, Z+1	; 0x01
    1f44:	82 81       	ldd	r24, Z+2	; 0x02
    1f46:	93 81       	ldd	r25, Z+3	; 0x03
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	4a e7       	ldi	r20, 0x7A	; 122
    1f4e:	53 e4       	ldi	r21, 0x43	; 67
    1f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	f8 01       	movw	r30, r16
    1f5a:	80 83       	st	Z, r24
    1f5c:	91 83       	std	Z+1, r25	; 0x01
    1f5e:	a2 83       	std	Z+2, r26	; 0x02
    1f60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f62:	fe 01       	movw	r30, r28
    1f64:	e0 5b       	subi	r30, 0xB0	; 176
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	60 81       	ld	r22, Z
    1f6a:	71 81       	ldd	r23, Z+1	; 0x01
    1f6c:	82 81       	ldd	r24, Z+2	; 0x02
    1f6e:	93 81       	ldd	r25, Z+3	; 0x03
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e8       	ldi	r20, 0x80	; 128
    1f76:	5f e3       	ldi	r21, 0x3F	; 63
    1f78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f7c:	88 23       	and	r24, r24
    1f7e:	44 f4       	brge	.+16     	; 0x1f90 <LCD_sendCommand+0x3a8>
		__ticks = 1;
    1f80:	fe 01       	movw	r30, r28
    1f82:	e2 5b       	subi	r30, 0xB2	; 178
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	91 83       	std	Z+1, r25	; 0x01
    1f8c:	80 83       	st	Z, r24
    1f8e:	64 c0       	rjmp	.+200    	; 0x2058 <LCD_sendCommand+0x470>
	else if (__tmp > 65535)
    1f90:	fe 01       	movw	r30, r28
    1f92:	e0 5b       	subi	r30, 0xB0	; 176
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	60 81       	ld	r22, Z
    1f98:	71 81       	ldd	r23, Z+1	; 0x01
    1f9a:	82 81       	ldd	r24, Z+2	; 0x02
    1f9c:	93 81       	ldd	r25, Z+3	; 0x03
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	3f ef       	ldi	r19, 0xFF	; 255
    1fa2:	4f e7       	ldi	r20, 0x7F	; 127
    1fa4:	57 e4       	ldi	r21, 0x47	; 71
    1fa6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1faa:	18 16       	cp	r1, r24
    1fac:	0c f0       	brlt	.+2      	; 0x1fb0 <LCD_sendCommand+0x3c8>
    1fae:	43 c0       	rjmp	.+134    	; 0x2036 <LCD_sendCommand+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	ec 5a       	subi	r30, 0xAC	; 172
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	60 81       	ld	r22, Z
    1fb8:	71 81       	ldd	r23, Z+1	; 0x01
    1fba:	82 81       	ldd	r24, Z+2	; 0x02
    1fbc:	93 81       	ldd	r25, Z+3	; 0x03
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e2       	ldi	r20, 0x20	; 32
    1fc4:	51 e4       	ldi	r21, 0x41	; 65
    1fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	8e 01       	movw	r16, r28
    1fd0:	02 5b       	subi	r16, 0xB2	; 178
    1fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd4:	bc 01       	movw	r22, r24
    1fd6:	cd 01       	movw	r24, r26
    1fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	f8 01       	movw	r30, r16
    1fe2:	91 83       	std	Z+1, r25	; 0x01
    1fe4:	80 83       	st	Z, r24
    1fe6:	1f c0       	rjmp	.+62     	; 0x2026 <LCD_sendCommand+0x43e>
    1fe8:	fe 01       	movw	r30, r28
    1fea:	e4 5b       	subi	r30, 0xB4	; 180
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	89 e1       	ldi	r24, 0x19	; 25
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	91 83       	std	Z+1, r25	; 0x01
    1ff4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	e4 5b       	subi	r30, 0xB4	; 180
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	80 81       	ld	r24, Z
    1ffe:	91 81       	ldd	r25, Z+1	; 0x01
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	f1 f7       	brne	.-4      	; 0x2000 <LCD_sendCommand+0x418>
    2004:	fe 01       	movw	r30, r28
    2006:	e4 5b       	subi	r30, 0xB4	; 180
    2008:	ff 4f       	sbci	r31, 0xFF	; 255
    200a:	91 83       	std	Z+1, r25	; 0x01
    200c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200e:	de 01       	movw	r26, r28
    2010:	a2 5b       	subi	r26, 0xB2	; 178
    2012:	bf 4f       	sbci	r27, 0xFF	; 255
    2014:	fe 01       	movw	r30, r28
    2016:	e2 5b       	subi	r30, 0xB2	; 178
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	80 81       	ld	r24, Z
    201c:	91 81       	ldd	r25, Z+1	; 0x01
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	11 96       	adiw	r26, 0x01	; 1
    2022:	9c 93       	st	X, r25
    2024:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2026:	fe 01       	movw	r30, r28
    2028:	e2 5b       	subi	r30, 0xB2	; 178
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	80 81       	ld	r24, Z
    202e:	91 81       	ldd	r25, Z+1	; 0x01
    2030:	00 97       	sbiw	r24, 0x00	; 0
    2032:	d1 f6       	brne	.-76     	; 0x1fe8 <LCD_sendCommand+0x400>
    2034:	4b c0       	rjmp	.+150    	; 0x20cc <LCD_sendCommand+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2036:	8e 01       	movw	r16, r28
    2038:	02 5b       	subi	r16, 0xB2	; 178
    203a:	1f 4f       	sbci	r17, 0xFF	; 255
    203c:	fe 01       	movw	r30, r28
    203e:	e0 5b       	subi	r30, 0xB0	; 176
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	60 81       	ld	r22, Z
    2044:	71 81       	ldd	r23, Z+1	; 0x01
    2046:	82 81       	ldd	r24, Z+2	; 0x02
    2048:	93 81       	ldd	r25, Z+3	; 0x03
    204a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	f8 01       	movw	r30, r16
    2054:	91 83       	std	Z+1, r25	; 0x01
    2056:	80 83       	st	Z, r24
    2058:	de 01       	movw	r26, r28
    205a:	a6 5b       	subi	r26, 0xB6	; 182
    205c:	bf 4f       	sbci	r27, 0xFF	; 255
    205e:	fe 01       	movw	r30, r28
    2060:	e2 5b       	subi	r30, 0xB2	; 178
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	80 81       	ld	r24, Z
    2066:	91 81       	ldd	r25, Z+1	; 0x01
    2068:	11 96       	adiw	r26, 0x01	; 1
    206a:	9c 93       	st	X, r25
    206c:	8e 93       	st	-X, r24
    206e:	fe 01       	movw	r30, r28
    2070:	e6 5b       	subi	r30, 0xB6	; 182
    2072:	ff 4f       	sbci	r31, 0xFF	; 255
    2074:	80 81       	ld	r24, Z
    2076:	91 81       	ldd	r25, Z+1	; 0x01
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	f1 f7       	brne	.-4      	; 0x2078 <LCD_sendCommand+0x490>
    207c:	fe 01       	movw	r30, r28
    207e:	e6 5b       	subi	r30, 0xB6	; 182
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	91 83       	std	Z+1, r25	; 0x01
    2084:	80 83       	st	Z, r24
    2086:	22 c0       	rjmp	.+68     	; 0x20cc <LCD_sendCommand+0x4e4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2088:	8e 01       	movw	r16, r28
    208a:	08 5a       	subi	r16, 0xA8	; 168
    208c:	1f 4f       	sbci	r17, 0xFF	; 255
    208e:	fe 01       	movw	r30, r28
    2090:	e7 5a       	subi	r30, 0xA7	; 167
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	60 81       	ld	r22, Z
    2096:	71 81       	ldd	r23, Z+1	; 0x01
    2098:	82 81       	ldd	r24, Z+2	; 0x02
    209a:	93 81       	ldd	r25, Z+3	; 0x03
    209c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	f8 01       	movw	r30, r16
    20a6:	80 83       	st	Z, r24
    20a8:	de 01       	movw	r26, r28
    20aa:	a7 5b       	subi	r26, 0xB7	; 183
    20ac:	bf 4f       	sbci	r27, 0xFF	; 255
    20ae:	fe 01       	movw	r30, r28
    20b0:	e8 5a       	subi	r30, 0xA8	; 168
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	80 81       	ld	r24, Z
    20b6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20b8:	fe 01       	movw	r30, r28
    20ba:	e7 5b       	subi	r30, 0xB7	; 183
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	80 81       	ld	r24, Z
    20c0:	8a 95       	dec	r24
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <LCD_sendCommand+0x4d8>
    20c4:	fe 01       	movw	r30, r28
    20c6:	e7 5b       	subi	r30, 0xB7	; 183
    20c8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ca:	80 83       	st	Z, r24
#elif	 (LCD_4BIT_MODE==4 && LCD_LAST_4_PINS==1)
	GPIO_writePort(LCD_DATA_PORT,
			(a_data & 0xF0) | (GPIO_readPort(LCD_DATA_PORT) & 0x0F));

#else
	GPIO_writePort(LCD_DATA_PORT, (a_data));
    20cc:	fe 01       	movw	r30, r28
    20ce:	e7 58       	subi	r30, 0x87	; 135
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	82 e0       	ldi	r24, 0x02	; 2
    20d4:	60 81       	ld	r22, Z
    20d6:	0e 94 68 09 	call	0x12d0	; 0x12d0 <GPIO_writePort>
    20da:	fe 01       	movw	r30, r28
    20dc:	eb 5b       	subi	r30, 0xBB	; 187
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	a0 ea       	ldi	r26, 0xA0	; 160
    20e6:	b1 e4       	ldi	r27, 0x41	; 65
    20e8:	80 83       	st	Z, r24
    20ea:	91 83       	std	Z+1, r25	; 0x01
    20ec:	a2 83       	std	Z+2, r26	; 0x02
    20ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20f0:	8e 01       	movw	r16, r28
    20f2:	0f 5b       	subi	r16, 0xBF	; 191
    20f4:	1f 4f       	sbci	r17, 0xFF	; 255
    20f6:	fe 01       	movw	r30, r28
    20f8:	eb 5b       	subi	r30, 0xBB	; 187
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	60 81       	ld	r22, Z
    20fe:	71 81       	ldd	r23, Z+1	; 0x01
    2100:	82 81       	ldd	r24, Z+2	; 0x02
    2102:	93 81       	ldd	r25, Z+3	; 0x03
    2104:	2b ea       	ldi	r18, 0xAB	; 171
    2106:	3a ea       	ldi	r19, 0xAA	; 170
    2108:	4a ea       	ldi	r20, 0xAA	; 170
    210a:	5e e3       	ldi	r21, 0x3E	; 62
    210c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	f8 01       	movw	r30, r16
    2116:	80 83       	st	Z, r24
    2118:	91 83       	std	Z+1, r25	; 0x01
    211a:	a2 83       	std	Z+2, r26	; 0x02
    211c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    211e:	fe 01       	movw	r30, r28
    2120:	ef 5b       	subi	r30, 0xBF	; 191
    2122:	ff 4f       	sbci	r31, 0xFF	; 255
    2124:	60 81       	ld	r22, Z
    2126:	71 81       	ldd	r23, Z+1	; 0x01
    2128:	82 81       	ldd	r24, Z+2	; 0x02
    212a:	93 81       	ldd	r25, Z+3	; 0x03
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e8       	ldi	r20, 0x80	; 128
    2132:	5f e3       	ldi	r21, 0x3F	; 63
    2134:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2138:	88 23       	and	r24, r24
    213a:	34 f4       	brge	.+12     	; 0x2148 <LCD_sendCommand+0x560>
		__ticks = 1;
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	fe 01       	movw	r30, r28
    2140:	e0 5c       	subi	r30, 0xC0	; 192
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	80 83       	st	Z, r24
    2146:	9d c0       	rjmp	.+314    	; 0x2282 <LCD_sendCommand+0x69a>
	else if (__tmp > 255)
    2148:	fe 01       	movw	r30, r28
    214a:	ef 5b       	subi	r30, 0xBF	; 191
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	60 81       	ld	r22, Z
    2150:	71 81       	ldd	r23, Z+1	; 0x01
    2152:	82 81       	ldd	r24, Z+2	; 0x02
    2154:	93 81       	ldd	r25, Z+3	; 0x03
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	4f e7       	ldi	r20, 0x7F	; 127
    215c:	53 e4       	ldi	r21, 0x43	; 67
    215e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2162:	18 16       	cp	r1, r24
    2164:	0c f0       	brlt	.+2      	; 0x2168 <LCD_sendCommand+0x580>
    2166:	7e c0       	rjmp	.+252    	; 0x2264 <LCD_sendCommand+0x67c>
	{
		_delay_ms(__us / 1000.0);
    2168:	fe 01       	movw	r30, r28
    216a:	eb 5b       	subi	r30, 0xBB	; 187
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	60 81       	ld	r22, Z
    2170:	71 81       	ldd	r23, Z+1	; 0x01
    2172:	82 81       	ldd	r24, Z+2	; 0x02
    2174:	93 81       	ldd	r25, Z+3	; 0x03
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	4a e7       	ldi	r20, 0x7A	; 122
    217c:	54 e4       	ldi	r21, 0x44	; 68
    217e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	8c af       	std	Y+60, r24	; 0x3c
    2188:	9d af       	std	Y+61, r25	; 0x3d
    218a:	ae af       	std	Y+62, r26	; 0x3e
    218c:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2190:	7d ad       	ldd	r23, Y+61	; 0x3d
    2192:	8e ad       	ldd	r24, Y+62	; 0x3e
    2194:	9f ad       	ldd	r25, Y+63	; 0x3f
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	4a e7       	ldi	r20, 0x7A	; 122
    219c:	53 e4       	ldi	r21, 0x43	; 67
    219e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	88 af       	std	Y+56, r24	; 0x38
    21a8:	99 af       	std	Y+57, r25	; 0x39
    21aa:	aa af       	std	Y+58, r26	; 0x3a
    21ac:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    21ae:	68 ad       	ldd	r22, Y+56	; 0x38
    21b0:	79 ad       	ldd	r23, Y+57	; 0x39
    21b2:	8a ad       	ldd	r24, Y+58	; 0x3a
    21b4:	9b ad       	ldd	r25, Y+59	; 0x3b
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	40 e8       	ldi	r20, 0x80	; 128
    21bc:	5f e3       	ldi	r21, 0x3F	; 63
    21be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21c2:	88 23       	and	r24, r24
    21c4:	2c f4       	brge	.+10     	; 0x21d0 <LCD_sendCommand+0x5e8>
		__ticks = 1;
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	9f ab       	std	Y+55, r25	; 0x37
    21cc:	8e ab       	std	Y+54, r24	; 0x36
    21ce:	3f c0       	rjmp	.+126    	; 0x224e <LCD_sendCommand+0x666>
	else if (__tmp > 65535)
    21d0:	68 ad       	ldd	r22, Y+56	; 0x38
    21d2:	79 ad       	ldd	r23, Y+57	; 0x39
    21d4:	8a ad       	ldd	r24, Y+58	; 0x3a
    21d6:	9b ad       	ldd	r25, Y+59	; 0x3b
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	3f ef       	ldi	r19, 0xFF	; 255
    21dc:	4f e7       	ldi	r20, 0x7F	; 127
    21de:	57 e4       	ldi	r21, 0x47	; 71
    21e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21e4:	18 16       	cp	r1, r24
    21e6:	4c f5       	brge	.+82     	; 0x223a <LCD_sendCommand+0x652>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e8:	6c ad       	ldd	r22, Y+60	; 0x3c
    21ea:	7d ad       	ldd	r23, Y+61	; 0x3d
    21ec:	8e ad       	ldd	r24, Y+62	; 0x3e
    21ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	40 e2       	ldi	r20, 0x20	; 32
    21f6:	51 e4       	ldi	r21, 0x41	; 65
    21f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	bc 01       	movw	r22, r24
    2202:	cd 01       	movw	r24, r26
    2204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	9f ab       	std	Y+55, r25	; 0x37
    220e:	8e ab       	std	Y+54, r24	; 0x36
    2210:	0f c0       	rjmp	.+30     	; 0x2230 <LCD_sendCommand+0x648>
    2212:	89 e1       	ldi	r24, 0x19	; 25
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	9d ab       	std	Y+53, r25	; 0x35
    2218:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    221a:	8c a9       	ldd	r24, Y+52	; 0x34
    221c:	9d a9       	ldd	r25, Y+53	; 0x35
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	f1 f7       	brne	.-4      	; 0x221e <LCD_sendCommand+0x636>
    2222:	9d ab       	std	Y+53, r25	; 0x35
    2224:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2226:	8e a9       	ldd	r24, Y+54	; 0x36
    2228:	9f a9       	ldd	r25, Y+55	; 0x37
    222a:	01 97       	sbiw	r24, 0x01	; 1
    222c:	9f ab       	std	Y+55, r25	; 0x37
    222e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2230:	8e a9       	ldd	r24, Y+54	; 0x36
    2232:	9f a9       	ldd	r25, Y+55	; 0x37
    2234:	00 97       	sbiw	r24, 0x00	; 0
    2236:	69 f7       	brne	.-38     	; 0x2212 <LCD_sendCommand+0x62a>
    2238:	2d c0       	rjmp	.+90     	; 0x2294 <LCD_sendCommand+0x6ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223a:	68 ad       	ldd	r22, Y+56	; 0x38
    223c:	79 ad       	ldd	r23, Y+57	; 0x39
    223e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2240:	9b ad       	ldd	r25, Y+59	; 0x3b
    2242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	9f ab       	std	Y+55, r25	; 0x37
    224c:	8e ab       	std	Y+54, r24	; 0x36
    224e:	8e a9       	ldd	r24, Y+54	; 0x36
    2250:	9f a9       	ldd	r25, Y+55	; 0x37
    2252:	9b ab       	std	Y+51, r25	; 0x33
    2254:	8a ab       	std	Y+50, r24	; 0x32
    2256:	8a a9       	ldd	r24, Y+50	; 0x32
    2258:	9b a9       	ldd	r25, Y+51	; 0x33
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	f1 f7       	brne	.-4      	; 0x225a <LCD_sendCommand+0x672>
    225e:	9b ab       	std	Y+51, r25	; 0x33
    2260:	8a ab       	std	Y+50, r24	; 0x32
    2262:	18 c0       	rjmp	.+48     	; 0x2294 <LCD_sendCommand+0x6ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2264:	fe 01       	movw	r30, r28
    2266:	ef 5b       	subi	r30, 0xBF	; 191
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	60 81       	ld	r22, Z
    226c:	71 81       	ldd	r23, Z+1	; 0x01
    226e:	82 81       	ldd	r24, Z+2	; 0x02
    2270:	93 81       	ldd	r25, Z+3	; 0x03
    2272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	fe 01       	movw	r30, r28
    227c:	e0 5c       	subi	r30, 0xC0	; 192
    227e:	ff 4f       	sbci	r31, 0xFF	; 255
    2280:	80 83       	st	Z, r24
    2282:	fe 01       	movw	r30, r28
    2284:	e0 5c       	subi	r30, 0xC0	; 192
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	80 81       	ld	r24, Z
    228a:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    228c:	89 a9       	ldd	r24, Y+49	; 0x31
    228e:	8a 95       	dec	r24
    2290:	f1 f7       	brne	.-4      	; 0x228e <LCD_sendCommand+0x6a6>
    2292:	89 ab       	std	Y+49, r24	; 0x31
#endif
	/*tdsw = 100ns*/
	_delay_us(20);

	/*Enable == 0 after sending data*/
	GPIO_writePin(LCD_CONTROL_PORT, LCD_ENABLE, LOGIC_LOW);
    2294:	83 e0       	ldi	r24, 0x03	; 3
    2296:	64 e0       	ldi	r22, 0x04	; 4
    2298:	40 e0       	ldi	r20, 0x00	; 0
    229a:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	a0 ea       	ldi	r26, 0xA0	; 160
    22a4:	b1 e4       	ldi	r27, 0x41	; 65
    22a6:	8d a7       	std	Y+45, r24	; 0x2d
    22a8:	9e a7       	std	Y+46, r25	; 0x2e
    22aa:	af a7       	std	Y+47, r26	; 0x2f
    22ac:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22ae:	6d a5       	ldd	r22, Y+45	; 0x2d
    22b0:	7e a5       	ldd	r23, Y+46	; 0x2e
    22b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    22b4:	98 a9       	ldd	r25, Y+48	; 0x30
    22b6:	2b ea       	ldi	r18, 0xAB	; 171
    22b8:	3a ea       	ldi	r19, 0xAA	; 170
    22ba:	4a ea       	ldi	r20, 0xAA	; 170
    22bc:	5e e3       	ldi	r21, 0x3E	; 62
    22be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	89 a7       	std	Y+41, r24	; 0x29
    22c8:	9a a7       	std	Y+42, r25	; 0x2a
    22ca:	ab a7       	std	Y+43, r26	; 0x2b
    22cc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    22ce:	69 a5       	ldd	r22, Y+41	; 0x29
    22d0:	7a a5       	ldd	r23, Y+42	; 0x2a
    22d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    22d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e8       	ldi	r20, 0x80	; 128
    22dc:	5f e3       	ldi	r21, 0x3F	; 63
    22de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22e2:	88 23       	and	r24, r24
    22e4:	1c f4       	brge	.+6      	; 0x22ec <LCD_sendCommand+0x704>
		__ticks = 1;
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	88 a7       	std	Y+40, r24	; 0x28
    22ea:	91 c0       	rjmp	.+290    	; 0x240e <LCD_sendCommand+0x826>
	else if (__tmp > 255)
    22ec:	69 a5       	ldd	r22, Y+41	; 0x29
    22ee:	7a a5       	ldd	r23, Y+42	; 0x2a
    22f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    22f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	4f e7       	ldi	r20, 0x7F	; 127
    22fa:	53 e4       	ldi	r21, 0x43	; 67
    22fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2300:	18 16       	cp	r1, r24
    2302:	0c f0       	brlt	.+2      	; 0x2306 <LCD_sendCommand+0x71e>
    2304:	7b c0       	rjmp	.+246    	; 0x23fc <LCD_sendCommand+0x814>
	{
		_delay_ms(__us / 1000.0);
    2306:	6d a5       	ldd	r22, Y+45	; 0x2d
    2308:	7e a5       	ldd	r23, Y+46	; 0x2e
    230a:	8f a5       	ldd	r24, Y+47	; 0x2f
    230c:	98 a9       	ldd	r25, Y+48	; 0x30
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	4a e7       	ldi	r20, 0x7A	; 122
    2314:	54 e4       	ldi	r21, 0x44	; 68
    2316:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	8c a3       	std	Y+36, r24	; 0x24
    2320:	9d a3       	std	Y+37, r25	; 0x25
    2322:	ae a3       	std	Y+38, r26	; 0x26
    2324:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2326:	6c a1       	ldd	r22, Y+36	; 0x24
    2328:	7d a1       	ldd	r23, Y+37	; 0x25
    232a:	8e a1       	ldd	r24, Y+38	; 0x26
    232c:	9f a1       	ldd	r25, Y+39	; 0x27
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	4a e7       	ldi	r20, 0x7A	; 122
    2334:	53 e4       	ldi	r21, 0x43	; 67
    2336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	88 a3       	std	Y+32, r24	; 0x20
    2340:	99 a3       	std	Y+33, r25	; 0x21
    2342:	aa a3       	std	Y+34, r26	; 0x22
    2344:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2346:	68 a1       	ldd	r22, Y+32	; 0x20
    2348:	79 a1       	ldd	r23, Y+33	; 0x21
    234a:	8a a1       	ldd	r24, Y+34	; 0x22
    234c:	9b a1       	ldd	r25, Y+35	; 0x23
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	40 e8       	ldi	r20, 0x80	; 128
    2354:	5f e3       	ldi	r21, 0x3F	; 63
    2356:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    235a:	88 23       	and	r24, r24
    235c:	2c f4       	brge	.+10     	; 0x2368 <LCD_sendCommand+0x780>
		__ticks = 1;
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	9f 8f       	std	Y+31, r25	; 0x1f
    2364:	8e 8f       	std	Y+30, r24	; 0x1e
    2366:	3f c0       	rjmp	.+126    	; 0x23e6 <LCD_sendCommand+0x7fe>
	else if (__tmp > 65535)
    2368:	68 a1       	ldd	r22, Y+32	; 0x20
    236a:	79 a1       	ldd	r23, Y+33	; 0x21
    236c:	8a a1       	ldd	r24, Y+34	; 0x22
    236e:	9b a1       	ldd	r25, Y+35	; 0x23
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	3f ef       	ldi	r19, 0xFF	; 255
    2374:	4f e7       	ldi	r20, 0x7F	; 127
    2376:	57 e4       	ldi	r21, 0x47	; 71
    2378:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    237c:	18 16       	cp	r1, r24
    237e:	4c f5       	brge	.+82     	; 0x23d2 <LCD_sendCommand+0x7ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2380:	6c a1       	ldd	r22, Y+36	; 0x24
    2382:	7d a1       	ldd	r23, Y+37	; 0x25
    2384:	8e a1       	ldd	r24, Y+38	; 0x26
    2386:	9f a1       	ldd	r25, Y+39	; 0x27
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e2       	ldi	r20, 0x20	; 32
    238e:	51 e4       	ldi	r21, 0x41	; 65
    2390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	bc 01       	movw	r22, r24
    239a:	cd 01       	movw	r24, r26
    239c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	9f 8f       	std	Y+31, r25	; 0x1f
    23a6:	8e 8f       	std	Y+30, r24	; 0x1e
    23a8:	0f c0       	rjmp	.+30     	; 0x23c8 <LCD_sendCommand+0x7e0>
    23aa:	89 e1       	ldi	r24, 0x19	; 25
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	9d 8f       	std	Y+29, r25	; 0x1d
    23b0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23b2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23b4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	f1 f7       	brne	.-4      	; 0x23b6 <LCD_sendCommand+0x7ce>
    23ba:	9d 8f       	std	Y+29, r25	; 0x1d
    23bc:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23c0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	9f 8f       	std	Y+31, r25	; 0x1f
    23c6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23ca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23cc:	00 97       	sbiw	r24, 0x00	; 0
    23ce:	69 f7       	brne	.-38     	; 0x23aa <LCD_sendCommand+0x7c2>
    23d0:	24 c0       	rjmp	.+72     	; 0x241a <LCD_sendCommand+0x832>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d2:	68 a1       	ldd	r22, Y+32	; 0x20
    23d4:	79 a1       	ldd	r23, Y+33	; 0x21
    23d6:	8a a1       	ldd	r24, Y+34	; 0x22
    23d8:	9b a1       	ldd	r25, Y+35	; 0x23
    23da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	9f 8f       	std	Y+31, r25	; 0x1f
    23e4:	8e 8f       	std	Y+30, r24	; 0x1e
    23e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23e8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23ea:	9b 8f       	std	Y+27, r25	; 0x1b
    23ec:	8a 8f       	std	Y+26, r24	; 0x1a
    23ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23f0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	f1 f7       	brne	.-4      	; 0x23f2 <LCD_sendCommand+0x80a>
    23f6:	9b 8f       	std	Y+27, r25	; 0x1b
    23f8:	8a 8f       	std	Y+26, r24	; 0x1a
    23fa:	0f c0       	rjmp	.+30     	; 0x241a <LCD_sendCommand+0x832>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23fc:	69 a5       	ldd	r22, Y+41	; 0x29
    23fe:	7a a5       	ldd	r23, Y+42	; 0x2a
    2400:	8b a5       	ldd	r24, Y+43	; 0x2b
    2402:	9c a5       	ldd	r25, Y+44	; 0x2c
    2404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	88 a7       	std	Y+40, r24	; 0x28
    240e:	88 a5       	ldd	r24, Y+40	; 0x28
    2410:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2412:	89 8d       	ldd	r24, Y+25	; 0x19
    2414:	8a 95       	dec	r24
    2416:	f1 f7       	brne	.-4      	; 0x2414 <LCD_sendCommand+0x82c>
    2418:	89 8f       	std	Y+25, r24	; 0x19
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	a0 ea       	ldi	r26, 0xA0	; 160
    2420:	b1 e4       	ldi	r27, 0x41	; 65
    2422:	8d 8b       	std	Y+21, r24	; 0x15
    2424:	9e 8b       	std	Y+22, r25	; 0x16
    2426:	af 8b       	std	Y+23, r26	; 0x17
    2428:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    242a:	6d 89       	ldd	r22, Y+21	; 0x15
    242c:	7e 89       	ldd	r23, Y+22	; 0x16
    242e:	8f 89       	ldd	r24, Y+23	; 0x17
    2430:	98 8d       	ldd	r25, Y+24	; 0x18
    2432:	2b ea       	ldi	r18, 0xAB	; 171
    2434:	3a ea       	ldi	r19, 0xAA	; 170
    2436:	4a ea       	ldi	r20, 0xAA	; 170
    2438:	5e e3       	ldi	r21, 0x3E	; 62
    243a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	89 8b       	std	Y+17, r24	; 0x11
    2444:	9a 8b       	std	Y+18, r25	; 0x12
    2446:	ab 8b       	std	Y+19, r26	; 0x13
    2448:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    244a:	69 89       	ldd	r22, Y+17	; 0x11
    244c:	7a 89       	ldd	r23, Y+18	; 0x12
    244e:	8b 89       	ldd	r24, Y+19	; 0x13
    2450:	9c 89       	ldd	r25, Y+20	; 0x14
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	40 e8       	ldi	r20, 0x80	; 128
    2458:	5f e3       	ldi	r21, 0x3F	; 63
    245a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    245e:	88 23       	and	r24, r24
    2460:	1c f4       	brge	.+6      	; 0x2468 <LCD_sendCommand+0x880>
		__ticks = 1;
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	88 8b       	std	Y+16, r24	; 0x10
    2466:	91 c0       	rjmp	.+290    	; 0x258a <LCD_sendCommand+0x9a2>
	else if (__tmp > 255)
    2468:	69 89       	ldd	r22, Y+17	; 0x11
    246a:	7a 89       	ldd	r23, Y+18	; 0x12
    246c:	8b 89       	ldd	r24, Y+19	; 0x13
    246e:	9c 89       	ldd	r25, Y+20	; 0x14
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	4f e7       	ldi	r20, 0x7F	; 127
    2476:	53 e4       	ldi	r21, 0x43	; 67
    2478:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    247c:	18 16       	cp	r1, r24
    247e:	0c f0       	brlt	.+2      	; 0x2482 <LCD_sendCommand+0x89a>
    2480:	7b c0       	rjmp	.+246    	; 0x2578 <LCD_sendCommand+0x990>
	{
		_delay_ms(__us / 1000.0);
    2482:	6d 89       	ldd	r22, Y+21	; 0x15
    2484:	7e 89       	ldd	r23, Y+22	; 0x16
    2486:	8f 89       	ldd	r24, Y+23	; 0x17
    2488:	98 8d       	ldd	r25, Y+24	; 0x18
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	4a e7       	ldi	r20, 0x7A	; 122
    2490:	54 e4       	ldi	r21, 0x44	; 68
    2492:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	8c 87       	std	Y+12, r24	; 0x0c
    249c:	9d 87       	std	Y+13, r25	; 0x0d
    249e:	ae 87       	std	Y+14, r26	; 0x0e
    24a0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a2:	6c 85       	ldd	r22, Y+12	; 0x0c
    24a4:	7d 85       	ldd	r23, Y+13	; 0x0d
    24a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    24a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	4a e7       	ldi	r20, 0x7A	; 122
    24b0:	53 e4       	ldi	r21, 0x43	; 67
    24b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	88 87       	std	Y+8, r24	; 0x08
    24bc:	99 87       	std	Y+9, r25	; 0x09
    24be:	aa 87       	std	Y+10, r26	; 0x0a
    24c0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    24c2:	68 85       	ldd	r22, Y+8	; 0x08
    24c4:	79 85       	ldd	r23, Y+9	; 0x09
    24c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    24c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	40 e8       	ldi	r20, 0x80	; 128
    24d0:	5f e3       	ldi	r21, 0x3F	; 63
    24d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24d6:	88 23       	and	r24, r24
    24d8:	2c f4       	brge	.+10     	; 0x24e4 <LCD_sendCommand+0x8fc>
		__ticks = 1;
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	9f 83       	std	Y+7, r25	; 0x07
    24e0:	8e 83       	std	Y+6, r24	; 0x06
    24e2:	3f c0       	rjmp	.+126    	; 0x2562 <LCD_sendCommand+0x97a>
	else if (__tmp > 65535)
    24e4:	68 85       	ldd	r22, Y+8	; 0x08
    24e6:	79 85       	ldd	r23, Y+9	; 0x09
    24e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    24ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	3f ef       	ldi	r19, 0xFF	; 255
    24f0:	4f e7       	ldi	r20, 0x7F	; 127
    24f2:	57 e4       	ldi	r21, 0x47	; 71
    24f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24f8:	18 16       	cp	r1, r24
    24fa:	4c f5       	brge	.+82     	; 0x254e <LCD_sendCommand+0x966>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fc:	6c 85       	ldd	r22, Y+12	; 0x0c
    24fe:	7d 85       	ldd	r23, Y+13	; 0x0d
    2500:	8e 85       	ldd	r24, Y+14	; 0x0e
    2502:	9f 85       	ldd	r25, Y+15	; 0x0f
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	40 e2       	ldi	r20, 0x20	; 32
    250a:	51 e4       	ldi	r21, 0x41	; 65
    250c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	bc 01       	movw	r22, r24
    2516:	cd 01       	movw	r24, r26
    2518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	9f 83       	std	Y+7, r25	; 0x07
    2522:	8e 83       	std	Y+6, r24	; 0x06
    2524:	0f c0       	rjmp	.+30     	; 0x2544 <LCD_sendCommand+0x95c>
    2526:	89 e1       	ldi	r24, 0x19	; 25
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	9d 83       	std	Y+5, r25	; 0x05
    252c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    252e:	8c 81       	ldd	r24, Y+4	; 0x04
    2530:	9d 81       	ldd	r25, Y+5	; 0x05
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	f1 f7       	brne	.-4      	; 0x2532 <LCD_sendCommand+0x94a>
    2536:	9d 83       	std	Y+5, r25	; 0x05
    2538:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253a:	8e 81       	ldd	r24, Y+6	; 0x06
    253c:	9f 81       	ldd	r25, Y+7	; 0x07
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	9f 83       	std	Y+7, r25	; 0x07
    2542:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2544:	8e 81       	ldd	r24, Y+6	; 0x06
    2546:	9f 81       	ldd	r25, Y+7	; 0x07
    2548:	00 97       	sbiw	r24, 0x00	; 0
    254a:	69 f7       	brne	.-38     	; 0x2526 <LCD_sendCommand+0x93e>
    254c:	24 c0       	rjmp	.+72     	; 0x2596 <LCD_sendCommand+0x9ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254e:	68 85       	ldd	r22, Y+8	; 0x08
    2550:	79 85       	ldd	r23, Y+9	; 0x09
    2552:	8a 85       	ldd	r24, Y+10	; 0x0a
    2554:	9b 85       	ldd	r25, Y+11	; 0x0b
    2556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	9f 83       	std	Y+7, r25	; 0x07
    2560:	8e 83       	std	Y+6, r24	; 0x06
    2562:	8e 81       	ldd	r24, Y+6	; 0x06
    2564:	9f 81       	ldd	r25, Y+7	; 0x07
    2566:	9b 83       	std	Y+3, r25	; 0x03
    2568:	8a 83       	std	Y+2, r24	; 0x02
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	9b 81       	ldd	r25, Y+3	; 0x03
    256e:	01 97       	sbiw	r24, 0x01	; 1
    2570:	f1 f7       	brne	.-4      	; 0x256e <LCD_sendCommand+0x986>
    2572:	9b 83       	std	Y+3, r25	; 0x03
    2574:	8a 83       	std	Y+2, r24	; 0x02
    2576:	0f c0       	rjmp	.+30     	; 0x2596 <LCD_sendCommand+0x9ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2578:	69 89       	ldd	r22, Y+17	; 0x11
    257a:	7a 89       	ldd	r23, Y+18	; 0x12
    257c:	8b 89       	ldd	r24, Y+19	; 0x13
    257e:	9c 89       	ldd	r25, Y+20	; 0x14
    2580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	88 8b       	std	Y+16, r24	; 0x10
    258a:	88 89       	ldd	r24, Y+16	; 0x10
    258c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    258e:	89 81       	ldd	r24, Y+1	; 0x01
    2590:	8a 95       	dec	r24
    2592:	f1 f7       	brne	.-4      	; 0x2590 <LCD_sendCommand+0x9a8>
    2594:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_CONTROL_PORT, LCD_ENABLE, LOGIC_LOW);
#endif

	/*Safety*/
	_delay_us(20);
}
    2596:	c7 58       	subi	r28, 0x87	; 135
    2598:	df 4f       	sbci	r29, 0xFF	; 255
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	f8 94       	cli
    259e:	de bf       	out	0x3e, r29	; 62
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	cd bf       	out	0x3d, r28	; 61
    25a4:	cf 91       	pop	r28
    25a6:	df 91       	pop	r29
    25a8:	1f 91       	pop	r17
    25aa:	0f 91       	pop	r16
    25ac:	08 95       	ret

000025ae <LCD_displayCharacter>:

/*Description: Displays a single character given by a_char */
void LCD_displayCharacter(uint8 a_data) {
    25ae:	0f 93       	push	r16
    25b0:	1f 93       	push	r17
    25b2:	df 93       	push	r29
    25b4:	cf 93       	push	r28
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	c9 57       	subi	r28, 0x79	; 121
    25bc:	d0 40       	sbci	r29, 0x00	; 0
    25be:	0f b6       	in	r0, 0x3f	; 63
    25c0:	f8 94       	cli
    25c2:	de bf       	out	0x3e, r29	; 62
    25c4:	0f be       	out	0x3f, r0	; 63
    25c6:	cd bf       	out	0x3d, r28	; 61
    25c8:	fe 01       	movw	r30, r28
    25ca:	e7 58       	subi	r30, 0x87	; 135
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	80 83       	st	Z, r24

	/*RS = 1 to send data*/
	GPIO_writePin(LCD_CONTROL_PORT, LCD_RS, LOGIC_HIGH);
    25d0:	83 e0       	ldi	r24, 0x03	; 3
    25d2:	62 e0       	ldi	r22, 0x02	; 2
    25d4:	41 e0       	ldi	r20, 0x01	; 1
    25d6:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>

	/*R/W = 0 to write to LCD*/
	GPIO_writePin(LCD_CONTROL_PORT, LCD_RW, LOGIC_LOW);
    25da:	83 e0       	ldi	r24, 0x03	; 3
    25dc:	63 e0       	ldi	r22, 0x03	; 3
    25de:	40 e0       	ldi	r20, 0x00	; 0
    25e0:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    25e4:	fe 01       	movw	r30, r28
    25e6:	eb 58       	subi	r30, 0x8B	; 139
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	a0 ea       	ldi	r26, 0xA0	; 160
    25f0:	b1 e4       	ldi	r27, 0x41	; 65
    25f2:	80 83       	st	Z, r24
    25f4:	91 83       	std	Z+1, r25	; 0x01
    25f6:	a2 83       	std	Z+2, r26	; 0x02
    25f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25fa:	8e 01       	movw	r16, r28
    25fc:	0f 58       	subi	r16, 0x8F	; 143
    25fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2600:	fe 01       	movw	r30, r28
    2602:	eb 58       	subi	r30, 0x8B	; 139
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	60 81       	ld	r22, Z
    2608:	71 81       	ldd	r23, Z+1	; 0x01
    260a:	82 81       	ldd	r24, Z+2	; 0x02
    260c:	93 81       	ldd	r25, Z+3	; 0x03
    260e:	2b ea       	ldi	r18, 0xAB	; 171
    2610:	3a ea       	ldi	r19, 0xAA	; 170
    2612:	4a ea       	ldi	r20, 0xAA	; 170
    2614:	5e e3       	ldi	r21, 0x3E	; 62
    2616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	f8 01       	movw	r30, r16
    2620:	80 83       	st	Z, r24
    2622:	91 83       	std	Z+1, r25	; 0x01
    2624:	a2 83       	std	Z+2, r26	; 0x02
    2626:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2628:	fe 01       	movw	r30, r28
    262a:	ef 58       	subi	r30, 0x8F	; 143
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	60 81       	ld	r22, Z
    2630:	71 81       	ldd	r23, Z+1	; 0x01
    2632:	82 81       	ldd	r24, Z+2	; 0x02
    2634:	93 81       	ldd	r25, Z+3	; 0x03
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e8       	ldi	r20, 0x80	; 128
    263c:	5f e3       	ldi	r21, 0x3F	; 63
    263e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2642:	88 23       	and	r24, r24
    2644:	34 f4       	brge	.+12     	; 0x2652 <LCD_displayCharacter+0xa4>
		__ticks = 1;
    2646:	fe 01       	movw	r30, r28
    2648:	e0 59       	subi	r30, 0x90	; 144
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	80 83       	st	Z, r24
    2650:	e0 c0       	rjmp	.+448    	; 0x2812 <LCD_displayCharacter+0x264>
	else if (__tmp > 255)
    2652:	fe 01       	movw	r30, r28
    2654:	ef 58       	subi	r30, 0x8F	; 143
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	60 81       	ld	r22, Z
    265a:	71 81       	ldd	r23, Z+1	; 0x01
    265c:	82 81       	ldd	r24, Z+2	; 0x02
    265e:	93 81       	ldd	r25, Z+3	; 0x03
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	4f e7       	ldi	r20, 0x7F	; 127
    2666:	53 e4       	ldi	r21, 0x43	; 67
    2668:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    266c:	18 16       	cp	r1, r24
    266e:	0c f0       	brlt	.+2      	; 0x2672 <LCD_displayCharacter+0xc4>
    2670:	c0 c0       	rjmp	.+384    	; 0x27f2 <LCD_displayCharacter+0x244>
	{
		_delay_ms(__us / 1000.0);
    2672:	fe 01       	movw	r30, r28
    2674:	eb 58       	subi	r30, 0x8B	; 139
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	60 81       	ld	r22, Z
    267a:	71 81       	ldd	r23, Z+1	; 0x01
    267c:	82 81       	ldd	r24, Z+2	; 0x02
    267e:	93 81       	ldd	r25, Z+3	; 0x03
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	4a e7       	ldi	r20, 0x7A	; 122
    2686:	54 e4       	ldi	r21, 0x44	; 68
    2688:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	fe 01       	movw	r30, r28
    2692:	e4 59       	subi	r30, 0x94	; 148
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	80 83       	st	Z, r24
    2698:	91 83       	std	Z+1, r25	; 0x01
    269a:	a2 83       	std	Z+2, r26	; 0x02
    269c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269e:	8e 01       	movw	r16, r28
    26a0:	08 59       	subi	r16, 0x98	; 152
    26a2:	1f 4f       	sbci	r17, 0xFF	; 255
    26a4:	fe 01       	movw	r30, r28
    26a6:	e4 59       	subi	r30, 0x94	; 148
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	60 81       	ld	r22, Z
    26ac:	71 81       	ldd	r23, Z+1	; 0x01
    26ae:	82 81       	ldd	r24, Z+2	; 0x02
    26b0:	93 81       	ldd	r25, Z+3	; 0x03
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	4a e7       	ldi	r20, 0x7A	; 122
    26b8:	53 e4       	ldi	r21, 0x43	; 67
    26ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	f8 01       	movw	r30, r16
    26c4:	80 83       	st	Z, r24
    26c6:	91 83       	std	Z+1, r25	; 0x01
    26c8:	a2 83       	std	Z+2, r26	; 0x02
    26ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26cc:	fe 01       	movw	r30, r28
    26ce:	e8 59       	subi	r30, 0x98	; 152
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	60 81       	ld	r22, Z
    26d4:	71 81       	ldd	r23, Z+1	; 0x01
    26d6:	82 81       	ldd	r24, Z+2	; 0x02
    26d8:	93 81       	ldd	r25, Z+3	; 0x03
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	40 e8       	ldi	r20, 0x80	; 128
    26e0:	5f e3       	ldi	r21, 0x3F	; 63
    26e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26e6:	88 23       	and	r24, r24
    26e8:	44 f4       	brge	.+16     	; 0x26fa <LCD_displayCharacter+0x14c>
		__ticks = 1;
    26ea:	fe 01       	movw	r30, r28
    26ec:	ea 59       	subi	r30, 0x9A	; 154
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	91 83       	std	Z+1, r25	; 0x01
    26f6:	80 83       	st	Z, r24
    26f8:	64 c0       	rjmp	.+200    	; 0x27c2 <LCD_displayCharacter+0x214>
	else if (__tmp > 65535)
    26fa:	fe 01       	movw	r30, r28
    26fc:	e8 59       	subi	r30, 0x98	; 152
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	60 81       	ld	r22, Z
    2702:	71 81       	ldd	r23, Z+1	; 0x01
    2704:	82 81       	ldd	r24, Z+2	; 0x02
    2706:	93 81       	ldd	r25, Z+3	; 0x03
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	3f ef       	ldi	r19, 0xFF	; 255
    270c:	4f e7       	ldi	r20, 0x7F	; 127
    270e:	57 e4       	ldi	r21, 0x47	; 71
    2710:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2714:	18 16       	cp	r1, r24
    2716:	0c f0       	brlt	.+2      	; 0x271a <LCD_displayCharacter+0x16c>
    2718:	43 c0       	rjmp	.+134    	; 0x27a0 <LCD_displayCharacter+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271a:	fe 01       	movw	r30, r28
    271c:	e4 59       	subi	r30, 0x94	; 148
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	60 81       	ld	r22, Z
    2722:	71 81       	ldd	r23, Z+1	; 0x01
    2724:	82 81       	ldd	r24, Z+2	; 0x02
    2726:	93 81       	ldd	r25, Z+3	; 0x03
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	40 e2       	ldi	r20, 0x20	; 32
    272e:	51 e4       	ldi	r21, 0x41	; 65
    2730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	8e 01       	movw	r16, r28
    273a:	0a 59       	subi	r16, 0x9A	; 154
    273c:	1f 4f       	sbci	r17, 0xFF	; 255
    273e:	bc 01       	movw	r22, r24
    2740:	cd 01       	movw	r24, r26
    2742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	f8 01       	movw	r30, r16
    274c:	91 83       	std	Z+1, r25	; 0x01
    274e:	80 83       	st	Z, r24
    2750:	1f c0       	rjmp	.+62     	; 0x2790 <LCD_displayCharacter+0x1e2>
    2752:	fe 01       	movw	r30, r28
    2754:	ec 59       	subi	r30, 0x9C	; 156
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	89 e1       	ldi	r24, 0x19	; 25
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	91 83       	std	Z+1, r25	; 0x01
    275e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2760:	fe 01       	movw	r30, r28
    2762:	ec 59       	subi	r30, 0x9C	; 156
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	80 81       	ld	r24, Z
    2768:	91 81       	ldd	r25, Z+1	; 0x01
    276a:	01 97       	sbiw	r24, 0x01	; 1
    276c:	f1 f7       	brne	.-4      	; 0x276a <LCD_displayCharacter+0x1bc>
    276e:	fe 01       	movw	r30, r28
    2770:	ec 59       	subi	r30, 0x9C	; 156
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	91 83       	std	Z+1, r25	; 0x01
    2776:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2778:	de 01       	movw	r26, r28
    277a:	aa 59       	subi	r26, 0x9A	; 154
    277c:	bf 4f       	sbci	r27, 0xFF	; 255
    277e:	fe 01       	movw	r30, r28
    2780:	ea 59       	subi	r30, 0x9A	; 154
    2782:	ff 4f       	sbci	r31, 0xFF	; 255
    2784:	80 81       	ld	r24, Z
    2786:	91 81       	ldd	r25, Z+1	; 0x01
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	11 96       	adiw	r26, 0x01	; 1
    278c:	9c 93       	st	X, r25
    278e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2790:	fe 01       	movw	r30, r28
    2792:	ea 59       	subi	r30, 0x9A	; 154
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	80 81       	ld	r24, Z
    2798:	91 81       	ldd	r25, Z+1	; 0x01
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	d1 f6       	brne	.-76     	; 0x2752 <LCD_displayCharacter+0x1a4>
    279e:	4b c0       	rjmp	.+150    	; 0x2836 <LCD_displayCharacter+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a0:	8e 01       	movw	r16, r28
    27a2:	0a 59       	subi	r16, 0x9A	; 154
    27a4:	1f 4f       	sbci	r17, 0xFF	; 255
    27a6:	fe 01       	movw	r30, r28
    27a8:	e8 59       	subi	r30, 0x98	; 152
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	60 81       	ld	r22, Z
    27ae:	71 81       	ldd	r23, Z+1	; 0x01
    27b0:	82 81       	ldd	r24, Z+2	; 0x02
    27b2:	93 81       	ldd	r25, Z+3	; 0x03
    27b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	f8 01       	movw	r30, r16
    27be:	91 83       	std	Z+1, r25	; 0x01
    27c0:	80 83       	st	Z, r24
    27c2:	de 01       	movw	r26, r28
    27c4:	ae 59       	subi	r26, 0x9E	; 158
    27c6:	bf 4f       	sbci	r27, 0xFF	; 255
    27c8:	fe 01       	movw	r30, r28
    27ca:	ea 59       	subi	r30, 0x9A	; 154
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	80 81       	ld	r24, Z
    27d0:	91 81       	ldd	r25, Z+1	; 0x01
    27d2:	11 96       	adiw	r26, 0x01	; 1
    27d4:	9c 93       	st	X, r25
    27d6:	8e 93       	st	-X, r24
    27d8:	fe 01       	movw	r30, r28
    27da:	ee 59       	subi	r30, 0x9E	; 158
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	80 81       	ld	r24, Z
    27e0:	91 81       	ldd	r25, Z+1	; 0x01
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	f1 f7       	brne	.-4      	; 0x27e2 <LCD_displayCharacter+0x234>
    27e6:	fe 01       	movw	r30, r28
    27e8:	ee 59       	subi	r30, 0x9E	; 158
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	91 83       	std	Z+1, r25	; 0x01
    27ee:	80 83       	st	Z, r24
    27f0:	22 c0       	rjmp	.+68     	; 0x2836 <LCD_displayCharacter+0x288>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27f2:	8e 01       	movw	r16, r28
    27f4:	00 59       	subi	r16, 0x90	; 144
    27f6:	1f 4f       	sbci	r17, 0xFF	; 255
    27f8:	fe 01       	movw	r30, r28
    27fa:	ef 58       	subi	r30, 0x8F	; 143
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	60 81       	ld	r22, Z
    2800:	71 81       	ldd	r23, Z+1	; 0x01
    2802:	82 81       	ldd	r24, Z+2	; 0x02
    2804:	93 81       	ldd	r25, Z+3	; 0x03
    2806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	f8 01       	movw	r30, r16
    2810:	80 83       	st	Z, r24
    2812:	de 01       	movw	r26, r28
    2814:	af 59       	subi	r26, 0x9F	; 159
    2816:	bf 4f       	sbci	r27, 0xFF	; 255
    2818:	fe 01       	movw	r30, r28
    281a:	e0 59       	subi	r30, 0x90	; 144
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	80 81       	ld	r24, Z
    2820:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2822:	fe 01       	movw	r30, r28
    2824:	ef 59       	subi	r30, 0x9F	; 159
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	80 81       	ld	r24, Z
    282a:	8a 95       	dec	r24
    282c:	f1 f7       	brne	.-4      	; 0x282a <LCD_displayCharacter+0x27c>
    282e:	fe 01       	movw	r30, r28
    2830:	ef 59       	subi	r30, 0x9F	; 159
    2832:	ff 4f       	sbci	r31, 0xFF	; 255
    2834:	80 83       	st	Z, r24

	/*tas = 50ns*/
	_delay_us(20);

	/*Enable = 1 before sending data*/
	GPIO_writePin(LCD_CONTROL_PORT, LCD_ENABLE, LOGIC_HIGH);
    2836:	83 e0       	ldi	r24, 0x03	; 3
    2838:	64 e0       	ldi	r22, 0x04	; 4
    283a:	41 e0       	ldi	r20, 0x01	; 1
    283c:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    2840:	fe 01       	movw	r30, r28
    2842:	e3 5a       	subi	r30, 0xA3	; 163
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	a0 ea       	ldi	r26, 0xA0	; 160
    284c:	b1 e4       	ldi	r27, 0x41	; 65
    284e:	80 83       	st	Z, r24
    2850:	91 83       	std	Z+1, r25	; 0x01
    2852:	a2 83       	std	Z+2, r26	; 0x02
    2854:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2856:	8e 01       	movw	r16, r28
    2858:	07 5a       	subi	r16, 0xA7	; 167
    285a:	1f 4f       	sbci	r17, 0xFF	; 255
    285c:	fe 01       	movw	r30, r28
    285e:	e3 5a       	subi	r30, 0xA3	; 163
    2860:	ff 4f       	sbci	r31, 0xFF	; 255
    2862:	60 81       	ld	r22, Z
    2864:	71 81       	ldd	r23, Z+1	; 0x01
    2866:	82 81       	ldd	r24, Z+2	; 0x02
    2868:	93 81       	ldd	r25, Z+3	; 0x03
    286a:	2b ea       	ldi	r18, 0xAB	; 171
    286c:	3a ea       	ldi	r19, 0xAA	; 170
    286e:	4a ea       	ldi	r20, 0xAA	; 170
    2870:	5e e3       	ldi	r21, 0x3E	; 62
    2872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	f8 01       	movw	r30, r16
    287c:	80 83       	st	Z, r24
    287e:	91 83       	std	Z+1, r25	; 0x01
    2880:	a2 83       	std	Z+2, r26	; 0x02
    2882:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2884:	fe 01       	movw	r30, r28
    2886:	e7 5a       	subi	r30, 0xA7	; 167
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	60 81       	ld	r22, Z
    288c:	71 81       	ldd	r23, Z+1	; 0x01
    288e:	82 81       	ldd	r24, Z+2	; 0x02
    2890:	93 81       	ldd	r25, Z+3	; 0x03
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	40 e8       	ldi	r20, 0x80	; 128
    2898:	5f e3       	ldi	r21, 0x3F	; 63
    289a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    289e:	88 23       	and	r24, r24
    28a0:	34 f4       	brge	.+12     	; 0x28ae <LCD_displayCharacter+0x300>
		__ticks = 1;
    28a2:	fe 01       	movw	r30, r28
    28a4:	e8 5a       	subi	r30, 0xA8	; 168
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	80 83       	st	Z, r24
    28ac:	e0 c0       	rjmp	.+448    	; 0x2a6e <LCD_displayCharacter+0x4c0>
	else if (__tmp > 255)
    28ae:	fe 01       	movw	r30, r28
    28b0:	e7 5a       	subi	r30, 0xA7	; 167
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	60 81       	ld	r22, Z
    28b6:	71 81       	ldd	r23, Z+1	; 0x01
    28b8:	82 81       	ldd	r24, Z+2	; 0x02
    28ba:	93 81       	ldd	r25, Z+3	; 0x03
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	4f e7       	ldi	r20, 0x7F	; 127
    28c2:	53 e4       	ldi	r21, 0x43	; 67
    28c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28c8:	18 16       	cp	r1, r24
    28ca:	0c f0       	brlt	.+2      	; 0x28ce <LCD_displayCharacter+0x320>
    28cc:	c0 c0       	rjmp	.+384    	; 0x2a4e <LCD_displayCharacter+0x4a0>
	{
		_delay_ms(__us / 1000.0);
    28ce:	fe 01       	movw	r30, r28
    28d0:	e3 5a       	subi	r30, 0xA3	; 163
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	60 81       	ld	r22, Z
    28d6:	71 81       	ldd	r23, Z+1	; 0x01
    28d8:	82 81       	ldd	r24, Z+2	; 0x02
    28da:	93 81       	ldd	r25, Z+3	; 0x03
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	4a e7       	ldi	r20, 0x7A	; 122
    28e2:	54 e4       	ldi	r21, 0x44	; 68
    28e4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	fe 01       	movw	r30, r28
    28ee:	ec 5a       	subi	r30, 0xAC	; 172
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	80 83       	st	Z, r24
    28f4:	91 83       	std	Z+1, r25	; 0x01
    28f6:	a2 83       	std	Z+2, r26	; 0x02
    28f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28fa:	8e 01       	movw	r16, r28
    28fc:	00 5b       	subi	r16, 0xB0	; 176
    28fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2900:	fe 01       	movw	r30, r28
    2902:	ec 5a       	subi	r30, 0xAC	; 172
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	60 81       	ld	r22, Z
    2908:	71 81       	ldd	r23, Z+1	; 0x01
    290a:	82 81       	ldd	r24, Z+2	; 0x02
    290c:	93 81       	ldd	r25, Z+3	; 0x03
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	4a e7       	ldi	r20, 0x7A	; 122
    2914:	53 e4       	ldi	r21, 0x43	; 67
    2916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	f8 01       	movw	r30, r16
    2920:	80 83       	st	Z, r24
    2922:	91 83       	std	Z+1, r25	; 0x01
    2924:	a2 83       	std	Z+2, r26	; 0x02
    2926:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2928:	fe 01       	movw	r30, r28
    292a:	e0 5b       	subi	r30, 0xB0	; 176
    292c:	ff 4f       	sbci	r31, 0xFF	; 255
    292e:	60 81       	ld	r22, Z
    2930:	71 81       	ldd	r23, Z+1	; 0x01
    2932:	82 81       	ldd	r24, Z+2	; 0x02
    2934:	93 81       	ldd	r25, Z+3	; 0x03
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	40 e8       	ldi	r20, 0x80	; 128
    293c:	5f e3       	ldi	r21, 0x3F	; 63
    293e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2942:	88 23       	and	r24, r24
    2944:	44 f4       	brge	.+16     	; 0x2956 <LCD_displayCharacter+0x3a8>
		__ticks = 1;
    2946:	fe 01       	movw	r30, r28
    2948:	e2 5b       	subi	r30, 0xB2	; 178
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	91 83       	std	Z+1, r25	; 0x01
    2952:	80 83       	st	Z, r24
    2954:	64 c0       	rjmp	.+200    	; 0x2a1e <LCD_displayCharacter+0x470>
	else if (__tmp > 65535)
    2956:	fe 01       	movw	r30, r28
    2958:	e0 5b       	subi	r30, 0xB0	; 176
    295a:	ff 4f       	sbci	r31, 0xFF	; 255
    295c:	60 81       	ld	r22, Z
    295e:	71 81       	ldd	r23, Z+1	; 0x01
    2960:	82 81       	ldd	r24, Z+2	; 0x02
    2962:	93 81       	ldd	r25, Z+3	; 0x03
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	3f ef       	ldi	r19, 0xFF	; 255
    2968:	4f e7       	ldi	r20, 0x7F	; 127
    296a:	57 e4       	ldi	r21, 0x47	; 71
    296c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2970:	18 16       	cp	r1, r24
    2972:	0c f0       	brlt	.+2      	; 0x2976 <LCD_displayCharacter+0x3c8>
    2974:	43 c0       	rjmp	.+134    	; 0x29fc <LCD_displayCharacter+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2976:	fe 01       	movw	r30, r28
    2978:	ec 5a       	subi	r30, 0xAC	; 172
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	60 81       	ld	r22, Z
    297e:	71 81       	ldd	r23, Z+1	; 0x01
    2980:	82 81       	ldd	r24, Z+2	; 0x02
    2982:	93 81       	ldd	r25, Z+3	; 0x03
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	40 e2       	ldi	r20, 0x20	; 32
    298a:	51 e4       	ldi	r21, 0x41	; 65
    298c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	8e 01       	movw	r16, r28
    2996:	02 5b       	subi	r16, 0xB2	; 178
    2998:	1f 4f       	sbci	r17, 0xFF	; 255
    299a:	bc 01       	movw	r22, r24
    299c:	cd 01       	movw	r24, r26
    299e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	f8 01       	movw	r30, r16
    29a8:	91 83       	std	Z+1, r25	; 0x01
    29aa:	80 83       	st	Z, r24
    29ac:	1f c0       	rjmp	.+62     	; 0x29ec <LCD_displayCharacter+0x43e>
    29ae:	fe 01       	movw	r30, r28
    29b0:	e4 5b       	subi	r30, 0xB4	; 180
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	89 e1       	ldi	r24, 0x19	; 25
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	91 83       	std	Z+1, r25	; 0x01
    29ba:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29bc:	fe 01       	movw	r30, r28
    29be:	e4 5b       	subi	r30, 0xB4	; 180
    29c0:	ff 4f       	sbci	r31, 0xFF	; 255
    29c2:	80 81       	ld	r24, Z
    29c4:	91 81       	ldd	r25, Z+1	; 0x01
    29c6:	01 97       	sbiw	r24, 0x01	; 1
    29c8:	f1 f7       	brne	.-4      	; 0x29c6 <LCD_displayCharacter+0x418>
    29ca:	fe 01       	movw	r30, r28
    29cc:	e4 5b       	subi	r30, 0xB4	; 180
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	91 83       	std	Z+1, r25	; 0x01
    29d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d4:	de 01       	movw	r26, r28
    29d6:	a2 5b       	subi	r26, 0xB2	; 178
    29d8:	bf 4f       	sbci	r27, 0xFF	; 255
    29da:	fe 01       	movw	r30, r28
    29dc:	e2 5b       	subi	r30, 0xB2	; 178
    29de:	ff 4f       	sbci	r31, 0xFF	; 255
    29e0:	80 81       	ld	r24, Z
    29e2:	91 81       	ldd	r25, Z+1	; 0x01
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	11 96       	adiw	r26, 0x01	; 1
    29e8:	9c 93       	st	X, r25
    29ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ec:	fe 01       	movw	r30, r28
    29ee:	e2 5b       	subi	r30, 0xB2	; 178
    29f0:	ff 4f       	sbci	r31, 0xFF	; 255
    29f2:	80 81       	ld	r24, Z
    29f4:	91 81       	ldd	r25, Z+1	; 0x01
    29f6:	00 97       	sbiw	r24, 0x00	; 0
    29f8:	d1 f6       	brne	.-76     	; 0x29ae <LCD_displayCharacter+0x400>
    29fa:	4b c0       	rjmp	.+150    	; 0x2a92 <LCD_displayCharacter+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29fc:	8e 01       	movw	r16, r28
    29fe:	02 5b       	subi	r16, 0xB2	; 178
    2a00:	1f 4f       	sbci	r17, 0xFF	; 255
    2a02:	fe 01       	movw	r30, r28
    2a04:	e0 5b       	subi	r30, 0xB0	; 176
    2a06:	ff 4f       	sbci	r31, 0xFF	; 255
    2a08:	60 81       	ld	r22, Z
    2a0a:	71 81       	ldd	r23, Z+1	; 0x01
    2a0c:	82 81       	ldd	r24, Z+2	; 0x02
    2a0e:	93 81       	ldd	r25, Z+3	; 0x03
    2a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	f8 01       	movw	r30, r16
    2a1a:	91 83       	std	Z+1, r25	; 0x01
    2a1c:	80 83       	st	Z, r24
    2a1e:	de 01       	movw	r26, r28
    2a20:	a6 5b       	subi	r26, 0xB6	; 182
    2a22:	bf 4f       	sbci	r27, 0xFF	; 255
    2a24:	fe 01       	movw	r30, r28
    2a26:	e2 5b       	subi	r30, 0xB2	; 178
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	80 81       	ld	r24, Z
    2a2c:	91 81       	ldd	r25, Z+1	; 0x01
    2a2e:	11 96       	adiw	r26, 0x01	; 1
    2a30:	9c 93       	st	X, r25
    2a32:	8e 93       	st	-X, r24
    2a34:	fe 01       	movw	r30, r28
    2a36:	e6 5b       	subi	r30, 0xB6	; 182
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	80 81       	ld	r24, Z
    2a3c:	91 81       	ldd	r25, Z+1	; 0x01
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	f1 f7       	brne	.-4      	; 0x2a3e <LCD_displayCharacter+0x490>
    2a42:	fe 01       	movw	r30, r28
    2a44:	e6 5b       	subi	r30, 0xB6	; 182
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	91 83       	std	Z+1, r25	; 0x01
    2a4a:	80 83       	st	Z, r24
    2a4c:	22 c0       	rjmp	.+68     	; 0x2a92 <LCD_displayCharacter+0x4e4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a4e:	8e 01       	movw	r16, r28
    2a50:	08 5a       	subi	r16, 0xA8	; 168
    2a52:	1f 4f       	sbci	r17, 0xFF	; 255
    2a54:	fe 01       	movw	r30, r28
    2a56:	e7 5a       	subi	r30, 0xA7	; 167
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	60 81       	ld	r22, Z
    2a5c:	71 81       	ldd	r23, Z+1	; 0x01
    2a5e:	82 81       	ldd	r24, Z+2	; 0x02
    2a60:	93 81       	ldd	r25, Z+3	; 0x03
    2a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	f8 01       	movw	r30, r16
    2a6c:	80 83       	st	Z, r24
    2a6e:	de 01       	movw	r26, r28
    2a70:	a7 5b       	subi	r26, 0xB7	; 183
    2a72:	bf 4f       	sbci	r27, 0xFF	; 255
    2a74:	fe 01       	movw	r30, r28
    2a76:	e8 5a       	subi	r30, 0xA8	; 168
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	80 81       	ld	r24, Z
    2a7c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a7e:	fe 01       	movw	r30, r28
    2a80:	e7 5b       	subi	r30, 0xB7	; 183
    2a82:	ff 4f       	sbci	r31, 0xFF	; 255
    2a84:	80 81       	ld	r24, Z
    2a86:	8a 95       	dec	r24
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <LCD_displayCharacter+0x4d8>
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	e7 5b       	subi	r30, 0xB7	; 183
    2a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a90:	80 83       	st	Z, r24
#elif	 (LCD_4BIT_MODE==4 && LCD_LAST_4_PINS==1)
	GPIO_writePort(LCD_DATA_PORT,
			(a_data & 0xF0) | (GPIO_readPort(LCD_DATA_PORT) & 0x0F));

#else
	GPIO_writePort(LCD_DATA_PORT, (a_data));
    2a92:	fe 01       	movw	r30, r28
    2a94:	e7 58       	subi	r30, 0x87	; 135
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	82 e0       	ldi	r24, 0x02	; 2
    2a9a:	60 81       	ld	r22, Z
    2a9c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <GPIO_writePort>
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	eb 5b       	subi	r30, 0xBB	; 187
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	a0 ea       	ldi	r26, 0xA0	; 160
    2aac:	b1 e4       	ldi	r27, 0x41	; 65
    2aae:	80 83       	st	Z, r24
    2ab0:	91 83       	std	Z+1, r25	; 0x01
    2ab2:	a2 83       	std	Z+2, r26	; 0x02
    2ab4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ab6:	8e 01       	movw	r16, r28
    2ab8:	0f 5b       	subi	r16, 0xBF	; 191
    2aba:	1f 4f       	sbci	r17, 0xFF	; 255
    2abc:	fe 01       	movw	r30, r28
    2abe:	eb 5b       	subi	r30, 0xBB	; 187
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	60 81       	ld	r22, Z
    2ac4:	71 81       	ldd	r23, Z+1	; 0x01
    2ac6:	82 81       	ldd	r24, Z+2	; 0x02
    2ac8:	93 81       	ldd	r25, Z+3	; 0x03
    2aca:	2b ea       	ldi	r18, 0xAB	; 171
    2acc:	3a ea       	ldi	r19, 0xAA	; 170
    2ace:	4a ea       	ldi	r20, 0xAA	; 170
    2ad0:	5e e3       	ldi	r21, 0x3E	; 62
    2ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	f8 01       	movw	r30, r16
    2adc:	80 83       	st	Z, r24
    2ade:	91 83       	std	Z+1, r25	; 0x01
    2ae0:	a2 83       	std	Z+2, r26	; 0x02
    2ae2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ae4:	fe 01       	movw	r30, r28
    2ae6:	ef 5b       	subi	r30, 0xBF	; 191
    2ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aea:	60 81       	ld	r22, Z
    2aec:	71 81       	ldd	r23, Z+1	; 0x01
    2aee:	82 81       	ldd	r24, Z+2	; 0x02
    2af0:	93 81       	ldd	r25, Z+3	; 0x03
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	40 e8       	ldi	r20, 0x80	; 128
    2af8:	5f e3       	ldi	r21, 0x3F	; 63
    2afa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2afe:	88 23       	and	r24, r24
    2b00:	34 f4       	brge	.+12     	; 0x2b0e <LCD_displayCharacter+0x560>
		__ticks = 1;
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	fe 01       	movw	r30, r28
    2b06:	e0 5c       	subi	r30, 0xC0	; 192
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	80 83       	st	Z, r24
    2b0c:	9d c0       	rjmp	.+314    	; 0x2c48 <LCD_displayCharacter+0x69a>
	else if (__tmp > 255)
    2b0e:	fe 01       	movw	r30, r28
    2b10:	ef 5b       	subi	r30, 0xBF	; 191
    2b12:	ff 4f       	sbci	r31, 0xFF	; 255
    2b14:	60 81       	ld	r22, Z
    2b16:	71 81       	ldd	r23, Z+1	; 0x01
    2b18:	82 81       	ldd	r24, Z+2	; 0x02
    2b1a:	93 81       	ldd	r25, Z+3	; 0x03
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	4f e7       	ldi	r20, 0x7F	; 127
    2b22:	53 e4       	ldi	r21, 0x43	; 67
    2b24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b28:	18 16       	cp	r1, r24
    2b2a:	0c f0       	brlt	.+2      	; 0x2b2e <LCD_displayCharacter+0x580>
    2b2c:	7e c0       	rjmp	.+252    	; 0x2c2a <LCD_displayCharacter+0x67c>
	{
		_delay_ms(__us / 1000.0);
    2b2e:	fe 01       	movw	r30, r28
    2b30:	eb 5b       	subi	r30, 0xBB	; 187
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	60 81       	ld	r22, Z
    2b36:	71 81       	ldd	r23, Z+1	; 0x01
    2b38:	82 81       	ldd	r24, Z+2	; 0x02
    2b3a:	93 81       	ldd	r25, Z+3	; 0x03
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	4a e7       	ldi	r20, 0x7A	; 122
    2b42:	54 e4       	ldi	r21, 0x44	; 68
    2b44:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	8c af       	std	Y+60, r24	; 0x3c
    2b4e:	9d af       	std	Y+61, r25	; 0x3d
    2b50:	ae af       	std	Y+62, r26	; 0x3e
    2b52:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b54:	6c ad       	ldd	r22, Y+60	; 0x3c
    2b56:	7d ad       	ldd	r23, Y+61	; 0x3d
    2b58:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b5a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	4a e7       	ldi	r20, 0x7A	; 122
    2b62:	53 e4       	ldi	r21, 0x43	; 67
    2b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	88 af       	std	Y+56, r24	; 0x38
    2b6e:	99 af       	std	Y+57, r25	; 0x39
    2b70:	aa af       	std	Y+58, r26	; 0x3a
    2b72:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2b74:	68 ad       	ldd	r22, Y+56	; 0x38
    2b76:	79 ad       	ldd	r23, Y+57	; 0x39
    2b78:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b7a:	9b ad       	ldd	r25, Y+59	; 0x3b
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 e8       	ldi	r20, 0x80	; 128
    2b82:	5f e3       	ldi	r21, 0x3F	; 63
    2b84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b88:	88 23       	and	r24, r24
    2b8a:	2c f4       	brge	.+10     	; 0x2b96 <LCD_displayCharacter+0x5e8>
		__ticks = 1;
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	9f ab       	std	Y+55, r25	; 0x37
    2b92:	8e ab       	std	Y+54, r24	; 0x36
    2b94:	3f c0       	rjmp	.+126    	; 0x2c14 <LCD_displayCharacter+0x666>
	else if (__tmp > 65535)
    2b96:	68 ad       	ldd	r22, Y+56	; 0x38
    2b98:	79 ad       	ldd	r23, Y+57	; 0x39
    2b9a:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b9c:	9b ad       	ldd	r25, Y+59	; 0x3b
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	3f ef       	ldi	r19, 0xFF	; 255
    2ba2:	4f e7       	ldi	r20, 0x7F	; 127
    2ba4:	57 e4       	ldi	r21, 0x47	; 71
    2ba6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2baa:	18 16       	cp	r1, r24
    2bac:	4c f5       	brge	.+82     	; 0x2c00 <LCD_displayCharacter+0x652>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bae:	6c ad       	ldd	r22, Y+60	; 0x3c
    2bb0:	7d ad       	ldd	r23, Y+61	; 0x3d
    2bb2:	8e ad       	ldd	r24, Y+62	; 0x3e
    2bb4:	9f ad       	ldd	r25, Y+63	; 0x3f
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	40 e2       	ldi	r20, 0x20	; 32
    2bbc:	51 e4       	ldi	r21, 0x41	; 65
    2bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	bc 01       	movw	r22, r24
    2bc8:	cd 01       	movw	r24, r26
    2bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	9f ab       	std	Y+55, r25	; 0x37
    2bd4:	8e ab       	std	Y+54, r24	; 0x36
    2bd6:	0f c0       	rjmp	.+30     	; 0x2bf6 <LCD_displayCharacter+0x648>
    2bd8:	89 e1       	ldi	r24, 0x19	; 25
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	9d ab       	std	Y+53, r25	; 0x35
    2bde:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2be0:	8c a9       	ldd	r24, Y+52	; 0x34
    2be2:	9d a9       	ldd	r25, Y+53	; 0x35
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	f1 f7       	brne	.-4      	; 0x2be4 <LCD_displayCharacter+0x636>
    2be8:	9d ab       	std	Y+53, r25	; 0x35
    2bea:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bec:	8e a9       	ldd	r24, Y+54	; 0x36
    2bee:	9f a9       	ldd	r25, Y+55	; 0x37
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	9f ab       	std	Y+55, r25	; 0x37
    2bf4:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf6:	8e a9       	ldd	r24, Y+54	; 0x36
    2bf8:	9f a9       	ldd	r25, Y+55	; 0x37
    2bfa:	00 97       	sbiw	r24, 0x00	; 0
    2bfc:	69 f7       	brne	.-38     	; 0x2bd8 <LCD_displayCharacter+0x62a>
    2bfe:	2d c0       	rjmp	.+90     	; 0x2c5a <LCD_displayCharacter+0x6ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c00:	68 ad       	ldd	r22, Y+56	; 0x38
    2c02:	79 ad       	ldd	r23, Y+57	; 0x39
    2c04:	8a ad       	ldd	r24, Y+58	; 0x3a
    2c06:	9b ad       	ldd	r25, Y+59	; 0x3b
    2c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	9f ab       	std	Y+55, r25	; 0x37
    2c12:	8e ab       	std	Y+54, r24	; 0x36
    2c14:	8e a9       	ldd	r24, Y+54	; 0x36
    2c16:	9f a9       	ldd	r25, Y+55	; 0x37
    2c18:	9b ab       	std	Y+51, r25	; 0x33
    2c1a:	8a ab       	std	Y+50, r24	; 0x32
    2c1c:	8a a9       	ldd	r24, Y+50	; 0x32
    2c1e:	9b a9       	ldd	r25, Y+51	; 0x33
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	f1 f7       	brne	.-4      	; 0x2c20 <LCD_displayCharacter+0x672>
    2c24:	9b ab       	std	Y+51, r25	; 0x33
    2c26:	8a ab       	std	Y+50, r24	; 0x32
    2c28:	18 c0       	rjmp	.+48     	; 0x2c5a <LCD_displayCharacter+0x6ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	ef 5b       	subi	r30, 0xBF	; 191
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	60 81       	ld	r22, Z
    2c32:	71 81       	ldd	r23, Z+1	; 0x01
    2c34:	82 81       	ldd	r24, Z+2	; 0x02
    2c36:	93 81       	ldd	r25, Z+3	; 0x03
    2c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	fe 01       	movw	r30, r28
    2c42:	e0 5c       	subi	r30, 0xC0	; 192
    2c44:	ff 4f       	sbci	r31, 0xFF	; 255
    2c46:	80 83       	st	Z, r24
    2c48:	fe 01       	movw	r30, r28
    2c4a:	e0 5c       	subi	r30, 0xC0	; 192
    2c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4e:	80 81       	ld	r24, Z
    2c50:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c52:	89 a9       	ldd	r24, Y+49	; 0x31
    2c54:	8a 95       	dec	r24
    2c56:	f1 f7       	brne	.-4      	; 0x2c54 <LCD_displayCharacter+0x6a6>
    2c58:	89 ab       	std	Y+49, r24	; 0x31
#endif
	/*tdsw = 100ns*/
	_delay_us(20);

	/*Enable == 0 after sending data*/
	GPIO_writePin(LCD_CONTROL_PORT, LCD_ENABLE, LOGIC_LOW);
    2c5a:	83 e0       	ldi	r24, 0x03	; 3
    2c5c:	64 e0       	ldi	r22, 0x04	; 4
    2c5e:	40 e0       	ldi	r20, 0x00	; 0
    2c60:	0e 94 3a 07 	call	0xe74	; 0xe74 <GPIO_writePin>
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	a0 ea       	ldi	r26, 0xA0	; 160
    2c6a:	b1 e4       	ldi	r27, 0x41	; 65
    2c6c:	8d a7       	std	Y+45, r24	; 0x2d
    2c6e:	9e a7       	std	Y+46, r25	; 0x2e
    2c70:	af a7       	std	Y+47, r26	; 0x2f
    2c72:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c74:	6d a5       	ldd	r22, Y+45	; 0x2d
    2c76:	7e a5       	ldd	r23, Y+46	; 0x2e
    2c78:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c7a:	98 a9       	ldd	r25, Y+48	; 0x30
    2c7c:	2b ea       	ldi	r18, 0xAB	; 171
    2c7e:	3a ea       	ldi	r19, 0xAA	; 170
    2c80:	4a ea       	ldi	r20, 0xAA	; 170
    2c82:	5e e3       	ldi	r21, 0x3E	; 62
    2c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c88:	dc 01       	movw	r26, r24
    2c8a:	cb 01       	movw	r24, r22
    2c8c:	89 a7       	std	Y+41, r24	; 0x29
    2c8e:	9a a7       	std	Y+42, r25	; 0x2a
    2c90:	ab a7       	std	Y+43, r26	; 0x2b
    2c92:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2c94:	69 a5       	ldd	r22, Y+41	; 0x29
    2c96:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c98:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c9a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	40 e8       	ldi	r20, 0x80	; 128
    2ca2:	5f e3       	ldi	r21, 0x3F	; 63
    2ca4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ca8:	88 23       	and	r24, r24
    2caa:	1c f4       	brge	.+6      	; 0x2cb2 <LCD_displayCharacter+0x704>
		__ticks = 1;
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	88 a7       	std	Y+40, r24	; 0x28
    2cb0:	91 c0       	rjmp	.+290    	; 0x2dd4 <LCD_displayCharacter+0x826>
	else if (__tmp > 255)
    2cb2:	69 a5       	ldd	r22, Y+41	; 0x29
    2cb4:	7a a5       	ldd	r23, Y+42	; 0x2a
    2cb6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cb8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	4f e7       	ldi	r20, 0x7F	; 127
    2cc0:	53 e4       	ldi	r21, 0x43	; 67
    2cc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cc6:	18 16       	cp	r1, r24
    2cc8:	0c f0       	brlt	.+2      	; 0x2ccc <LCD_displayCharacter+0x71e>
    2cca:	7b c0       	rjmp	.+246    	; 0x2dc2 <LCD_displayCharacter+0x814>
	{
		_delay_ms(__us / 1000.0);
    2ccc:	6d a5       	ldd	r22, Y+45	; 0x2d
    2cce:	7e a5       	ldd	r23, Y+46	; 0x2e
    2cd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cd2:	98 a9       	ldd	r25, Y+48	; 0x30
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	4a e7       	ldi	r20, 0x7A	; 122
    2cda:	54 e4       	ldi	r21, 0x44	; 68
    2cdc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	8c a3       	std	Y+36, r24	; 0x24
    2ce6:	9d a3       	std	Y+37, r25	; 0x25
    2ce8:	ae a3       	std	Y+38, r26	; 0x26
    2cea:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cec:	6c a1       	ldd	r22, Y+36	; 0x24
    2cee:	7d a1       	ldd	r23, Y+37	; 0x25
    2cf0:	8e a1       	ldd	r24, Y+38	; 0x26
    2cf2:	9f a1       	ldd	r25, Y+39	; 0x27
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	4a e7       	ldi	r20, 0x7A	; 122
    2cfa:	53 e4       	ldi	r21, 0x43	; 67
    2cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	88 a3       	std	Y+32, r24	; 0x20
    2d06:	99 a3       	std	Y+33, r25	; 0x21
    2d08:	aa a3       	std	Y+34, r26	; 0x22
    2d0a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2d0c:	68 a1       	ldd	r22, Y+32	; 0x20
    2d0e:	79 a1       	ldd	r23, Y+33	; 0x21
    2d10:	8a a1       	ldd	r24, Y+34	; 0x22
    2d12:	9b a1       	ldd	r25, Y+35	; 0x23
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	40 e8       	ldi	r20, 0x80	; 128
    2d1a:	5f e3       	ldi	r21, 0x3F	; 63
    2d1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d20:	88 23       	and	r24, r24
    2d22:	2c f4       	brge	.+10     	; 0x2d2e <LCD_displayCharacter+0x780>
		__ticks = 1;
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	9f 8f       	std	Y+31, r25	; 0x1f
    2d2a:	8e 8f       	std	Y+30, r24	; 0x1e
    2d2c:	3f c0       	rjmp	.+126    	; 0x2dac <LCD_displayCharacter+0x7fe>
	else if (__tmp > 65535)
    2d2e:	68 a1       	ldd	r22, Y+32	; 0x20
    2d30:	79 a1       	ldd	r23, Y+33	; 0x21
    2d32:	8a a1       	ldd	r24, Y+34	; 0x22
    2d34:	9b a1       	ldd	r25, Y+35	; 0x23
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	3f ef       	ldi	r19, 0xFF	; 255
    2d3a:	4f e7       	ldi	r20, 0x7F	; 127
    2d3c:	57 e4       	ldi	r21, 0x47	; 71
    2d3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d42:	18 16       	cp	r1, r24
    2d44:	4c f5       	brge	.+82     	; 0x2d98 <LCD_displayCharacter+0x7ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d46:	6c a1       	ldd	r22, Y+36	; 0x24
    2d48:	7d a1       	ldd	r23, Y+37	; 0x25
    2d4a:	8e a1       	ldd	r24, Y+38	; 0x26
    2d4c:	9f a1       	ldd	r25, Y+39	; 0x27
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	40 e2       	ldi	r20, 0x20	; 32
    2d54:	51 e4       	ldi	r21, 0x41	; 65
    2d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	bc 01       	movw	r22, r24
    2d60:	cd 01       	movw	r24, r26
    2d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	9f 8f       	std	Y+31, r25	; 0x1f
    2d6c:	8e 8f       	std	Y+30, r24	; 0x1e
    2d6e:	0f c0       	rjmp	.+30     	; 0x2d8e <LCD_displayCharacter+0x7e0>
    2d70:	89 e1       	ldi	r24, 0x19	; 25
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	9d 8f       	std	Y+29, r25	; 0x1d
    2d76:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d78:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d7a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d7c:	01 97       	sbiw	r24, 0x01	; 1
    2d7e:	f1 f7       	brne	.-4      	; 0x2d7c <LCD_displayCharacter+0x7ce>
    2d80:	9d 8f       	std	Y+29, r25	; 0x1d
    2d82:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d84:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d86:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	9f 8f       	std	Y+31, r25	; 0x1f
    2d8c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d90:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d92:	00 97       	sbiw	r24, 0x00	; 0
    2d94:	69 f7       	brne	.-38     	; 0x2d70 <LCD_displayCharacter+0x7c2>
    2d96:	24 c0       	rjmp	.+72     	; 0x2de0 <LCD_displayCharacter+0x832>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d98:	68 a1       	ldd	r22, Y+32	; 0x20
    2d9a:	79 a1       	ldd	r23, Y+33	; 0x21
    2d9c:	8a a1       	ldd	r24, Y+34	; 0x22
    2d9e:	9b a1       	ldd	r25, Y+35	; 0x23
    2da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	9f 8f       	std	Y+31, r25	; 0x1f
    2daa:	8e 8f       	std	Y+30, r24	; 0x1e
    2dac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2dae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2db0:	9b 8f       	std	Y+27, r25	; 0x1b
    2db2:	8a 8f       	std	Y+26, r24	; 0x1a
    2db4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2db6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <LCD_displayCharacter+0x80a>
    2dbc:	9b 8f       	std	Y+27, r25	; 0x1b
    2dbe:	8a 8f       	std	Y+26, r24	; 0x1a
    2dc0:	0f c0       	rjmp	.+30     	; 0x2de0 <LCD_displayCharacter+0x832>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2dc2:	69 a5       	ldd	r22, Y+41	; 0x29
    2dc4:	7a a5       	ldd	r23, Y+42	; 0x2a
    2dc6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dc8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	88 a7       	std	Y+40, r24	; 0x28
    2dd4:	88 a5       	ldd	r24, Y+40	; 0x28
    2dd6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2dd8:	89 8d       	ldd	r24, Y+25	; 0x19
    2dda:	8a 95       	dec	r24
    2ddc:	f1 f7       	brne	.-4      	; 0x2dda <LCD_displayCharacter+0x82c>
    2dde:	89 8f       	std	Y+25, r24	; 0x19
    2de0:	80 e0       	ldi	r24, 0x00	; 0
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	a0 ea       	ldi	r26, 0xA0	; 160
    2de6:	b1 e4       	ldi	r27, 0x41	; 65
    2de8:	8d 8b       	std	Y+21, r24	; 0x15
    2dea:	9e 8b       	std	Y+22, r25	; 0x16
    2dec:	af 8b       	std	Y+23, r26	; 0x17
    2dee:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2df0:	6d 89       	ldd	r22, Y+21	; 0x15
    2df2:	7e 89       	ldd	r23, Y+22	; 0x16
    2df4:	8f 89       	ldd	r24, Y+23	; 0x17
    2df6:	98 8d       	ldd	r25, Y+24	; 0x18
    2df8:	2b ea       	ldi	r18, 0xAB	; 171
    2dfa:	3a ea       	ldi	r19, 0xAA	; 170
    2dfc:	4a ea       	ldi	r20, 0xAA	; 170
    2dfe:	5e e3       	ldi	r21, 0x3E	; 62
    2e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	89 8b       	std	Y+17, r24	; 0x11
    2e0a:	9a 8b       	std	Y+18, r25	; 0x12
    2e0c:	ab 8b       	std	Y+19, r26	; 0x13
    2e0e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2e10:	69 89       	ldd	r22, Y+17	; 0x11
    2e12:	7a 89       	ldd	r23, Y+18	; 0x12
    2e14:	8b 89       	ldd	r24, Y+19	; 0x13
    2e16:	9c 89       	ldd	r25, Y+20	; 0x14
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	40 e8       	ldi	r20, 0x80	; 128
    2e1e:	5f e3       	ldi	r21, 0x3F	; 63
    2e20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e24:	88 23       	and	r24, r24
    2e26:	1c f4       	brge	.+6      	; 0x2e2e <LCD_displayCharacter+0x880>
		__ticks = 1;
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	88 8b       	std	Y+16, r24	; 0x10
    2e2c:	91 c0       	rjmp	.+290    	; 0x2f50 <LCD_displayCharacter+0x9a2>
	else if (__tmp > 255)
    2e2e:	69 89       	ldd	r22, Y+17	; 0x11
    2e30:	7a 89       	ldd	r23, Y+18	; 0x12
    2e32:	8b 89       	ldd	r24, Y+19	; 0x13
    2e34:	9c 89       	ldd	r25, Y+20	; 0x14
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	4f e7       	ldi	r20, 0x7F	; 127
    2e3c:	53 e4       	ldi	r21, 0x43	; 67
    2e3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e42:	18 16       	cp	r1, r24
    2e44:	0c f0       	brlt	.+2      	; 0x2e48 <LCD_displayCharacter+0x89a>
    2e46:	7b c0       	rjmp	.+246    	; 0x2f3e <LCD_displayCharacter+0x990>
	{
		_delay_ms(__us / 1000.0);
    2e48:	6d 89       	ldd	r22, Y+21	; 0x15
    2e4a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	4a e7       	ldi	r20, 0x7A	; 122
    2e56:	54 e4       	ldi	r21, 0x44	; 68
    2e58:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	cb 01       	movw	r24, r22
    2e60:	8c 87       	std	Y+12, r24	; 0x0c
    2e62:	9d 87       	std	Y+13, r25	; 0x0d
    2e64:	ae 87       	std	Y+14, r26	; 0x0e
    2e66:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e68:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e6a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e6c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e6e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	4a e7       	ldi	r20, 0x7A	; 122
    2e76:	53 e4       	ldi	r21, 0x43	; 67
    2e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	88 87       	std	Y+8, r24	; 0x08
    2e82:	99 87       	std	Y+9, r25	; 0x09
    2e84:	aa 87       	std	Y+10, r26	; 0x0a
    2e86:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2e88:	68 85       	ldd	r22, Y+8	; 0x08
    2e8a:	79 85       	ldd	r23, Y+9	; 0x09
    2e8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	40 e8       	ldi	r20, 0x80	; 128
    2e96:	5f e3       	ldi	r21, 0x3F	; 63
    2e98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e9c:	88 23       	and	r24, r24
    2e9e:	2c f4       	brge	.+10     	; 0x2eaa <LCD_displayCharacter+0x8fc>
		__ticks = 1;
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	9f 83       	std	Y+7, r25	; 0x07
    2ea6:	8e 83       	std	Y+6, r24	; 0x06
    2ea8:	3f c0       	rjmp	.+126    	; 0x2f28 <LCD_displayCharacter+0x97a>
	else if (__tmp > 65535)
    2eaa:	68 85       	ldd	r22, Y+8	; 0x08
    2eac:	79 85       	ldd	r23, Y+9	; 0x09
    2eae:	8a 85       	ldd	r24, Y+10	; 0x0a
    2eb0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	3f ef       	ldi	r19, 0xFF	; 255
    2eb6:	4f e7       	ldi	r20, 0x7F	; 127
    2eb8:	57 e4       	ldi	r21, 0x47	; 71
    2eba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ebe:	18 16       	cp	r1, r24
    2ec0:	4c f5       	brge	.+82     	; 0x2f14 <LCD_displayCharacter+0x966>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec2:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ec4:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ec6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ec8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	40 e2       	ldi	r20, 0x20	; 32
    2ed0:	51 e4       	ldi	r21, 0x41	; 65
    2ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	bc 01       	movw	r22, r24
    2edc:	cd 01       	movw	r24, r26
    2ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	9f 83       	std	Y+7, r25	; 0x07
    2ee8:	8e 83       	std	Y+6, r24	; 0x06
    2eea:	0f c0       	rjmp	.+30     	; 0x2f0a <LCD_displayCharacter+0x95c>
    2eec:	89 e1       	ldi	r24, 0x19	; 25
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	9d 83       	std	Y+5, r25	; 0x05
    2ef2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ef4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ef6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	f1 f7       	brne	.-4      	; 0x2ef8 <LCD_displayCharacter+0x94a>
    2efc:	9d 83       	std	Y+5, r25	; 0x05
    2efe:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f00:	8e 81       	ldd	r24, Y+6	; 0x06
    2f02:	9f 81       	ldd	r25, Y+7	; 0x07
    2f04:	01 97       	sbiw	r24, 0x01	; 1
    2f06:	9f 83       	std	Y+7, r25	; 0x07
    2f08:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f0a:	8e 81       	ldd	r24, Y+6	; 0x06
    2f0c:	9f 81       	ldd	r25, Y+7	; 0x07
    2f0e:	00 97       	sbiw	r24, 0x00	; 0
    2f10:	69 f7       	brne	.-38     	; 0x2eec <LCD_displayCharacter+0x93e>
    2f12:	24 c0       	rjmp	.+72     	; 0x2f5c <LCD_displayCharacter+0x9ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f14:	68 85       	ldd	r22, Y+8	; 0x08
    2f16:	79 85       	ldd	r23, Y+9	; 0x09
    2f18:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f20:	dc 01       	movw	r26, r24
    2f22:	cb 01       	movw	r24, r22
    2f24:	9f 83       	std	Y+7, r25	; 0x07
    2f26:	8e 83       	std	Y+6, r24	; 0x06
    2f28:	8e 81       	ldd	r24, Y+6	; 0x06
    2f2a:	9f 81       	ldd	r25, Y+7	; 0x07
    2f2c:	9b 83       	std	Y+3, r25	; 0x03
    2f2e:	8a 83       	std	Y+2, r24	; 0x02
    2f30:	8a 81       	ldd	r24, Y+2	; 0x02
    2f32:	9b 81       	ldd	r25, Y+3	; 0x03
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	f1 f7       	brne	.-4      	; 0x2f34 <LCD_displayCharacter+0x986>
    2f38:	9b 83       	std	Y+3, r25	; 0x03
    2f3a:	8a 83       	std	Y+2, r24	; 0x02
    2f3c:	0f c0       	rjmp	.+30     	; 0x2f5c <LCD_displayCharacter+0x9ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f3e:	69 89       	ldd	r22, Y+17	; 0x11
    2f40:	7a 89       	ldd	r23, Y+18	; 0x12
    2f42:	8b 89       	ldd	r24, Y+19	; 0x13
    2f44:	9c 89       	ldd	r25, Y+20	; 0x14
    2f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	88 8b       	std	Y+16, r24	; 0x10
    2f50:	88 89       	ldd	r24, Y+16	; 0x10
    2f52:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f54:	89 81       	ldd	r24, Y+1	; 0x01
    2f56:	8a 95       	dec	r24
    2f58:	f1 f7       	brne	.-4      	; 0x2f56 <LCD_displayCharacter+0x9a8>
    2f5a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_CONTROL_PORT, LCD_ENABLE, LOGIC_LOW);
#endif

	/*Safety*/
	_delay_us(20);
}
    2f5c:	c7 58       	subi	r28, 0x87	; 135
    2f5e:	df 4f       	sbci	r29, 0xFF	; 255
    2f60:	0f b6       	in	r0, 0x3f	; 63
    2f62:	f8 94       	cli
    2f64:	de bf       	out	0x3e, r29	; 62
    2f66:	0f be       	out	0x3f, r0	; 63
    2f68:	cd bf       	out	0x3d, r28	; 61
    2f6a:	cf 91       	pop	r28
    2f6c:	df 91       	pop	r29
    2f6e:	1f 91       	pop	r17
    2f70:	0f 91       	pop	r16
    2f72:	08 95       	ret

00002f74 <LCD_init>:

/*Description: Initializes the LCD data bus & control pins
 * according to the pre-dfined preprocessor definitions
 * */
void LCD_init(void) {
    2f74:	df 93       	push	r29
    2f76:	cf 93       	push	r28
    2f78:	cd b7       	in	r28, 0x3d	; 61
    2f7a:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(LCD_CONTROL_PORT, LCD_RS, PIN_OUTPUT);
    2f7c:	83 e0       	ldi	r24, 0x03	; 3
    2f7e:	62 e0       	ldi	r22, 0x02	; 2
    2f80:	41 e0       	ldi	r20, 0x01	; 1
    2f82:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_CONTROL_PORT, LCD_RW, PIN_OUTPUT);
    2f86:	83 e0       	ldi	r24, 0x03	; 3
    2f88:	63 e0       	ldi	r22, 0x03	; 3
    2f8a:	41 e0       	ldi	r20, 0x01	; 1
    2f8c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_CONTROL_PORT, LCD_ENABLE, PIN_OUTPUT);
    2f90:	83 e0       	ldi	r24, 0x03	; 3
    2f92:	64 e0       	ldi	r22, 0x04	; 4
    2f94:	41 e0       	ldi	r20, 0x01	; 1
    2f96:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
#if (LCD_MODE==8)
	GPIO_setupPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
    2f9a:	82 e0       	ldi	r24, 0x02	; 2
    2f9c:	6f ef       	ldi	r22, 0xFF	; 255
    2f9e:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_setupPortDirection>

#if (LCD_MODE==4 )
	LCD_sendCommand(LCD_COMMAND_4BIT_INIT);
#endif

	LCD_sendCommand(LCD_COMMAND_MODE);
    2fa2:	88 e3       	ldi	r24, 0x38	; 56
    2fa4:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_sendCommand>
	LCD_sendCommand(LCD_COMMAND_CURSOR_OFF);
    2fa8:	8c e0       	ldi	r24, 0x0C	; 12
    2faa:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_sendCommand>
	LCD_sendCommand(LCD_COMMAND_CLEAR);
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_sendCommand>

}
    2fb4:	cf 91       	pop	r28
    2fb6:	df 91       	pop	r29
    2fb8:	08 95       	ret

00002fba <LCD_displayString>:

/*Description: Displays a string on the LCD from a character array
 * If the number of characters overflow the maximum LCD columns,
 * the function will print from the current cursor position until end of row only
 * */
void LCD_displayString(const uint8 *str) {
    2fba:	df 93       	push	r29
    2fbc:	cf 93       	push	r28
    2fbe:	00 d0       	rcall	.+0      	; 0x2fc0 <LCD_displayString+0x6>
    2fc0:	0f 92       	push	r0
    2fc2:	cd b7       	in	r28, 0x3d	; 61
    2fc4:	de b7       	in	r29, 0x3e	; 62
    2fc6:	9b 83       	std	Y+3, r25	; 0x03
    2fc8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 counter = 0;
    2fca:	19 82       	std	Y+1, r1	; 0x01
    2fcc:	0e c0       	rjmp	.+28     	; 0x2fea <LCD_displayString+0x30>

	while (str[counter] != '\0') {
		LCD_displayCharacter(str[counter]);
    2fce:	89 81       	ldd	r24, Y+1	; 0x01
    2fd0:	28 2f       	mov	r18, r24
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd8:	fc 01       	movw	r30, r24
    2fda:	e2 0f       	add	r30, r18
    2fdc:	f3 1f       	adc	r31, r19
    2fde:	80 81       	ld	r24, Z
    2fe0:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_displayCharacter>
		++counter;
    2fe4:	89 81       	ldd	r24, Y+1	; 0x01
    2fe6:	8f 5f       	subi	r24, 0xFF	; 255
    2fe8:	89 83       	std	Y+1, r24	; 0x01
 * the function will print from the current cursor position until end of row only
 * */
void LCD_displayString(const uint8 *str) {
	uint8 counter = 0;

	while (str[counter] != '\0') {
    2fea:	89 81       	ldd	r24, Y+1	; 0x01
    2fec:	28 2f       	mov	r18, r24
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff4:	fc 01       	movw	r30, r24
    2ff6:	e2 0f       	add	r30, r18
    2ff8:	f3 1f       	adc	r31, r19
    2ffa:	80 81       	ld	r24, Z
    2ffc:	88 23       	and	r24, r24
    2ffe:	39 f7       	brne	.-50     	; 0x2fce <LCD_displayString+0x14>
		LCD_displayCharacter(str[counter]);
		++counter;
	}

}
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	0f 90       	pop	r0
    3006:	cf 91       	pop	r28
    3008:	df 91       	pop	r29
    300a:	08 95       	ret

0000300c <LCD_moveCursor>:
/*
 * Description: Moves the cursor to the specified row, column coordinates on the LCD
 * If a_row is more than the available rows, the function places the cursor to the first line only
 * if a_col is more than the available columns, the function places the cursor starting from the first column only
 * */
void LCD_moveCursor(uint8 a_row, uint8 a_col) {
    300c:	df 93       	push	r29
    300e:	cf 93       	push	r28
    3010:	00 d0       	rcall	.+0      	; 0x3012 <LCD_moveCursor+0x6>
    3012:	00 d0       	rcall	.+0      	; 0x3014 <LCD_moveCursor+0x8>
    3014:	0f 92       	push	r0
    3016:	cd b7       	in	r28, 0x3d	; 61
    3018:	de b7       	in	r29, 0x3e	; 62
    301a:	8a 83       	std	Y+2, r24	; 0x02
    301c:	6b 83       	std	Y+3, r22	; 0x03
	/* Variable to hold position the cursor on the screen to be sent to the LCD data bus
	 * First 7 bits hold the column address
	 * Last bit (MSB) forces cursor to the position*/

	uint8 lcd_memory_register = LCD_REG_COL_0;
    301e:	19 82       	std	Y+1, r1	; 0x01
	/* Check if the given column is more than the maximum*/
	if (a_col > LCD_MAX_COLS) {
    3020:	8b 81       	ldd	r24, Y+3	; 0x03
    3022:	81 31       	cpi	r24, 0x11	; 17
    3024:	68 f5       	brcc	.+90     	; 0x3080 <LCD_moveCursor+0x74>

	} else {
		switch (a_row) {
    3026:	8a 81       	ldd	r24, Y+2	; 0x02
    3028:	28 2f       	mov	r18, r24
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	3d 83       	std	Y+5, r19	; 0x05
    302e:	2c 83       	std	Y+4, r18	; 0x04
    3030:	8c 81       	ldd	r24, Y+4	; 0x04
    3032:	9d 81       	ldd	r25, Y+5	; 0x05
    3034:	81 30       	cpi	r24, 0x01	; 1
    3036:	91 05       	cpc	r25, r1
    3038:	c1 f0       	breq	.+48     	; 0x306a <LCD_moveCursor+0x5e>
    303a:	2c 81       	ldd	r18, Y+4	; 0x04
    303c:	3d 81       	ldd	r19, Y+5	; 0x05
    303e:	22 30       	cpi	r18, 0x02	; 2
    3040:	31 05       	cpc	r19, r1
    3042:	2c f4       	brge	.+10     	; 0x304e <LCD_moveCursor+0x42>
    3044:	8c 81       	ldd	r24, Y+4	; 0x04
    3046:	9d 81       	ldd	r25, Y+5	; 0x05
    3048:	00 97       	sbiw	r24, 0x00	; 0
    304a:	61 f0       	breq	.+24     	; 0x3064 <LCD_moveCursor+0x58>
    304c:	19 c0       	rjmp	.+50     	; 0x3080 <LCD_moveCursor+0x74>
    304e:	2c 81       	ldd	r18, Y+4	; 0x04
    3050:	3d 81       	ldd	r19, Y+5	; 0x05
    3052:	22 30       	cpi	r18, 0x02	; 2
    3054:	31 05       	cpc	r19, r1
    3056:	69 f0       	breq	.+26     	; 0x3072 <LCD_moveCursor+0x66>
    3058:	8c 81       	ldd	r24, Y+4	; 0x04
    305a:	9d 81       	ldd	r25, Y+5	; 0x05
    305c:	83 30       	cpi	r24, 0x03	; 3
    305e:	91 05       	cpc	r25, r1
    3060:	61 f0       	breq	.+24     	; 0x307a <LCD_moveCursor+0x6e>
    3062:	0e c0       	rjmp	.+28     	; 0x3080 <LCD_moveCursor+0x74>
		case LCD_ROW_0:
			lcd_memory_register = a_col + LCD_REG_COL_0;
    3064:	8b 81       	ldd	r24, Y+3	; 0x03
    3066:	89 83       	std	Y+1, r24	; 0x01
    3068:	0b c0       	rjmp	.+22     	; 0x3080 <LCD_moveCursor+0x74>
			break;

		case LCD_ROW_1:
			lcd_memory_register = a_col + LCD_REG_COL_1;
    306a:	8b 81       	ldd	r24, Y+3	; 0x03
    306c:	80 5c       	subi	r24, 0xC0	; 192
    306e:	89 83       	std	Y+1, r24	; 0x01
    3070:	07 c0       	rjmp	.+14     	; 0x3080 <LCD_moveCursor+0x74>
			break;

		case LCD_ROW_2:
			lcd_memory_register = a_col + LCD_REG_COL_2;
    3072:	8b 81       	ldd	r24, Y+3	; 0x03
    3074:	80 5f       	subi	r24, 0xF0	; 240
    3076:	89 83       	std	Y+1, r24	; 0x01
    3078:	03 c0       	rjmp	.+6      	; 0x3080 <LCD_moveCursor+0x74>
			break;

		case LCD_ROW_3:
			lcd_memory_register = a_col + LCD_REG_COL_3;
    307a:	8b 81       	ldd	r24, Y+3	; 0x03
    307c:	80 5b       	subi	r24, 0xB0	; 176
    307e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	LCD_sendCommand(lcd_memory_register | (LCD_COMMAND_FORCE_CURSOR));
    3080:	89 81       	ldd	r24, Y+1	; 0x01
    3082:	80 68       	ori	r24, 0x80	; 128
    3084:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_sendCommand>
}
    3088:	0f 90       	pop	r0
    308a:	0f 90       	pop	r0
    308c:	0f 90       	pop	r0
    308e:	0f 90       	pop	r0
    3090:	0f 90       	pop	r0
    3092:	cf 91       	pop	r28
    3094:	df 91       	pop	r29
    3096:	08 95       	ret

00003098 <LCD_displayStringRowColumn>:
/*
 * Description: Prints a string starting from the given row and column positions
 * If a_row is more than the available rows, the function prints to the first line only
 * if a_col is more than the available columns, the function prints starting from the first column only
 * */
void LCD_displayStringRowColumn(uint8 a_row, uint8 a_col, const uint8 *a_str) {
    3098:	df 93       	push	r29
    309a:	cf 93       	push	r28
    309c:	00 d0       	rcall	.+0      	; 0x309e <LCD_displayStringRowColumn+0x6>
    309e:	00 d0       	rcall	.+0      	; 0x30a0 <LCD_displayStringRowColumn+0x8>
    30a0:	cd b7       	in	r28, 0x3d	; 61
    30a2:	de b7       	in	r29, 0x3e	; 62
    30a4:	89 83       	std	Y+1, r24	; 0x01
    30a6:	6a 83       	std	Y+2, r22	; 0x02
    30a8:	5c 83       	std	Y+4, r21	; 0x04
    30aa:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(a_row, a_col);
    30ac:	89 81       	ldd	r24, Y+1	; 0x01
    30ae:	6a 81       	ldd	r22, Y+2	; 0x02
    30b0:	0e 94 06 18 	call	0x300c	; 0x300c <LCD_moveCursor>
	LCD_displayString(a_str);
    30b4:	8b 81       	ldd	r24, Y+3	; 0x03
    30b6:	9c 81       	ldd	r25, Y+4	; 0x04
    30b8:	0e 94 dd 17 	call	0x2fba	; 0x2fba <LCD_displayString>

}
    30bc:	0f 90       	pop	r0
    30be:	0f 90       	pop	r0
    30c0:	0f 90       	pop	r0
    30c2:	0f 90       	pop	r0
    30c4:	cf 91       	pop	r28
    30c6:	df 91       	pop	r29
    30c8:	08 95       	ret

000030ca <LCD_clearScreen>:

/*
 * Description: Clears the LCD by sending the LCD_COMMAND_CLEAR command to the LCD
 * */
void LCD_clearScreen(void) {
    30ca:	df 93       	push	r29
    30cc:	cf 93       	push	r28
    30ce:	cd b7       	in	r28, 0x3d	; 61
    30d0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_COMMAND_CLEAR);
    30d2:	81 e0       	ldi	r24, 0x01	; 1
    30d4:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_sendCommand>
}
    30d8:	cf 91       	pop	r28
    30da:	df 91       	pop	r29
    30dc:	08 95       	ret

000030de <LCD_integerToString>:
/*
 * Description: Converts a given integer (+ve, -ve) to an array of characters
 * to display it on the LCD
 * Numbers given are in Base - 10
 * */
void LCD_integerToString(int a_data) {
    30de:	df 93       	push	r29
    30e0:	cf 93       	push	r28
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
    30e6:	62 97       	sbiw	r28, 0x12	; 18
    30e8:	0f b6       	in	r0, 0x3f	; 63
    30ea:	f8 94       	cli
    30ec:	de bf       	out	0x3e, r29	; 62
    30ee:	0f be       	out	0x3f, r0	; 63
    30f0:	cd bf       	out	0x3d, r28	; 61
    30f2:	9a 8b       	std	Y+18, r25	; 0x12
    30f4:	89 8b       	std	Y+17, r24	; 0x11
	/* Array of characters to hold the integer numbers */
	uint8 buff[LCD_MAX_COLS];

	/* Convert incoming integer into an array of characters and store it in buff,
	 * casting to void ptr to remove warning */
	itoa(a_data, (void*) buff, 10);
    30f6:	89 89       	ldd	r24, Y+17	; 0x11
    30f8:	9a 89       	ldd	r25, Y+18	; 0x12
    30fa:	9e 01       	movw	r18, r28
    30fc:	2f 5f       	subi	r18, 0xFF	; 255
    30fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3100:	b9 01       	movw	r22, r18
    3102:	4a e0       	ldi	r20, 0x0A	; 10
    3104:	50 e0       	ldi	r21, 0x00	; 0
    3106:	0e 94 47 1a 	call	0x348e	; 0x348e <itoa>

	/* Display the converted integer */
	LCD_displayString(buff);
    310a:	ce 01       	movw	r24, r28
    310c:	01 96       	adiw	r24, 0x01	; 1
    310e:	0e 94 dd 17 	call	0x2fba	; 0x2fba <LCD_displayString>
}
    3112:	62 96       	adiw	r28, 0x12	; 18
    3114:	0f b6       	in	r0, 0x3f	; 63
    3116:	f8 94       	cli
    3118:	de bf       	out	0x3e, r29	; 62
    311a:	0f be       	out	0x3f, r0	; 63
    311c:	cd bf       	out	0x3d, r28	; 61
    311e:	cf 91       	pop	r28
    3120:	df 91       	pop	r29
    3122:	08 95       	ret

00003124 <UART_init>:
#endif

/*******************************************************************************
 *                              Function Definitions                           *
 *******************************************************************************/
void UART_init(UART_ConfigType *Config) {
    3124:	df 93       	push	r29
    3126:	cf 93       	push	r28
    3128:	00 d0       	rcall	.+0      	; 0x312a <UART_init+0x6>
    312a:	00 d0       	rcall	.+0      	; 0x312c <UART_init+0x8>
    312c:	0f 92       	push	r0
    312e:	cd b7       	in	r28, 0x3d	; 61
    3130:	de b7       	in	r29, 0x3e	; 62
    3132:	9d 83       	std	Y+5, r25	; 0x05
    3134:	8c 83       	std	Y+4, r24	; 0x04

	/* Set transmission speed either normal or double speed */
	UCSRA = (TRANSMISSION_SPEED_DOUBLE << U2X);
    3136:	eb e2       	ldi	r30, 0x2B	; 43
    3138:	f0 e0       	ldi	r31, 0x00	; 0
    313a:	82 e0       	ldi	r24, 0x02	; 2
    313c:	80 83       	st	Z, r24
	 * RXEN,TXEN=1  -> Enable transmission and sending
	 * TXCIE,RXCIE,UDRIE -> Enable/disable interrupts on RX,TX,UDRE complete
	 *
	 * */

	UCSRB = (1 << RXEN) | (1 << TXEN) | (TX_INTERRUPT_ENABLE << TXCIE)
    313e:	ea e2       	ldi	r30, 0x2A	; 42
    3140:	f0 e0       	ldi	r31, 0x00	; 0
    3142:	88 e1       	ldi	r24, 0x18	; 24
    3144:	80 83       	st	Z, r24

	/*
	 * URSEL=1 -> Enable write to UCSRC register
	 * USBS   -> Set stop bit: 1 or 2 bits
	 * */
	UCSRC = (1 << URSEL) | (Config->UDReg.Stop_Bit << USBS);
    3146:	a0 e4       	ldi	r26, 0x40	; 64
    3148:	b0 e0       	ldi	r27, 0x00	; 0
    314a:	ec 81       	ldd	r30, Y+4	; 0x04
    314c:	fd 81       	ldd	r31, Y+5	; 0x05
    314e:	82 81       	ldd	r24, Z+2	; 0x02
    3150:	81 70       	andi	r24, 0x01	; 1
    3152:	88 2f       	mov	r24, r24
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	88 0f       	add	r24, r24
    3158:	99 1f       	adc	r25, r25
    315a:	88 0f       	add	r24, r24
    315c:	99 1f       	adc	r25, r25
    315e:	88 0f       	add	r24, r24
    3160:	99 1f       	adc	r25, r25
    3162:	80 68       	ori	r24, 0x80	; 128
    3164:	8c 93       	st	X, r24

	/* Parity mode set*/

	if (Config->UDReg.Parity_type == PARITY_DISABLED) {
    3166:	ec 81       	ldd	r30, Y+4	; 0x04
    3168:	fd 81       	ldd	r31, Y+5	; 0x05
    316a:	82 81       	ldd	r24, Z+2	; 0x02
    316c:	86 70       	andi	r24, 0x06	; 6
    316e:	88 23       	and	r24, r24
    3170:	91 f0       	breq	.+36     	; 0x3196 <UART_init+0x72>
		/* Do nothing */
	} else {

		/* Extract parity and make sure only 2 bits then shift left to align with register */
		uint8 parity = ((Config->UDReg.Parity_type & 0x03) << UPM0);
    3172:	ec 81       	ldd	r30, Y+4	; 0x04
    3174:	fd 81       	ldd	r31, Y+5	; 0x05
    3176:	82 81       	ldd	r24, Z+2	; 0x02
    3178:	86 95       	lsr	r24
    317a:	83 70       	andi	r24, 0x03	; 3
    317c:	83 70       	andi	r24, 0x03	; 3
    317e:	82 95       	swap	r24
    3180:	80 7f       	andi	r24, 0xF0	; 240
    3182:	89 83       	std	Y+1, r24	; 0x01

		/* URSEL = 1 -> Enable write to UCSRC register */
		UCSRC |= (1 << URSEL) | parity;
    3184:	a0 e4       	ldi	r26, 0x40	; 64
    3186:	b0 e0       	ldi	r27, 0x00	; 0
    3188:	e0 e4       	ldi	r30, 0x40	; 64
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	90 81       	ld	r25, Z
    318e:	89 81       	ldd	r24, Y+1	; 0x01
    3190:	89 2b       	or	r24, r25
    3192:	80 68       	ori	r24, 0x80	; 128
    3194:	8c 93       	st	X, r24
	}

	/* Set UART character size: 5,6,7,8,9 bits*/
	UCSRB |= ((Config->UDReg.Char_size) & 0x04);
    3196:	aa e2       	ldi	r26, 0x2A	; 42
    3198:	b0 e0       	ldi	r27, 0x00	; 0
    319a:	ea e2       	ldi	r30, 0x2A	; 42
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	80 81       	ld	r24, Z
    31a0:	98 2f       	mov	r25, r24
    31a2:	ec 81       	ldd	r30, Y+4	; 0x04
    31a4:	fd 81       	ldd	r31, Y+5	; 0x05
    31a6:	82 81       	ldd	r24, Z+2	; 0x02
    31a8:	86 95       	lsr	r24
    31aa:	86 95       	lsr	r24
    31ac:	86 95       	lsr	r24
    31ae:	87 70       	andi	r24, 0x07	; 7
    31b0:	84 70       	andi	r24, 0x04	; 4
    31b2:	89 2b       	or	r24, r25
    31b4:	8c 93       	st	X, r24
	UCSRC |= (1 << URSEL) | ((Config->UDReg.Char_size & 0x03) << UCSZ0);
    31b6:	a0 e4       	ldi	r26, 0x40	; 64
    31b8:	b0 e0       	ldi	r27, 0x00	; 0
    31ba:	e0 e4       	ldi	r30, 0x40	; 64
    31bc:	f0 e0       	ldi	r31, 0x00	; 0
    31be:	80 81       	ld	r24, Z
    31c0:	28 2f       	mov	r18, r24
    31c2:	ec 81       	ldd	r30, Y+4	; 0x04
    31c4:	fd 81       	ldd	r31, Y+5	; 0x05
    31c6:	82 81       	ldd	r24, Z+2	; 0x02
    31c8:	86 95       	lsr	r24
    31ca:	86 95       	lsr	r24
    31cc:	86 95       	lsr	r24
    31ce:	87 70       	andi	r24, 0x07	; 7
    31d0:	88 2f       	mov	r24, r24
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	83 70       	andi	r24, 0x03	; 3
    31d6:	90 70       	andi	r25, 0x00	; 0
    31d8:	88 0f       	add	r24, r24
    31da:	99 1f       	adc	r25, r25
    31dc:	80 68       	ori	r24, 0x80	; 128
    31de:	82 2b       	or	r24, r18
    31e0:	8c 93       	st	X, r24

	/* Calculate Baudrate and set it in UBRRL & UBBRH*/
	uint16 ubrr_value = (uint16) (((8000000 / (Config->BaudRate * 8UL))) - 1);
    31e2:	ec 81       	ldd	r30, Y+4	; 0x04
    31e4:	fd 81       	ldd	r31, Y+5	; 0x05
    31e6:	80 81       	ld	r24, Z
    31e8:	91 81       	ldd	r25, Z+1	; 0x01
    31ea:	cc 01       	movw	r24, r24
    31ec:	a0 e0       	ldi	r26, 0x00	; 0
    31ee:	b0 e0       	ldi	r27, 0x00	; 0
    31f0:	88 0f       	add	r24, r24
    31f2:	99 1f       	adc	r25, r25
    31f4:	aa 1f       	adc	r26, r26
    31f6:	bb 1f       	adc	r27, r27
    31f8:	88 0f       	add	r24, r24
    31fa:	99 1f       	adc	r25, r25
    31fc:	aa 1f       	adc	r26, r26
    31fe:	bb 1f       	adc	r27, r27
    3200:	88 0f       	add	r24, r24
    3202:	99 1f       	adc	r25, r25
    3204:	aa 1f       	adc	r26, r26
    3206:	bb 1f       	adc	r27, r27
    3208:	9c 01       	movw	r18, r24
    320a:	ad 01       	movw	r20, r26
    320c:	80 e0       	ldi	r24, 0x00	; 0
    320e:	92 e1       	ldi	r25, 0x12	; 18
    3210:	aa e7       	ldi	r26, 0x7A	; 122
    3212:	b0 e0       	ldi	r27, 0x00	; 0
    3214:	bc 01       	movw	r22, r24
    3216:	cd 01       	movw	r24, r26
    3218:	0e 94 ee 19 	call	0x33dc	; 0x33dc <__udivmodsi4>
    321c:	da 01       	movw	r26, r20
    321e:	c9 01       	movw	r24, r18
    3220:	01 97       	sbiw	r24, 0x01	; 1
    3222:	9b 83       	std	Y+3, r25	; 0x03
    3224:	8a 83       	std	Y+2, r24	; 0x02

	/* Clear URSEL to select UBRR register*/
	UCSRC &= ~(1 << URSEL);
    3226:	a0 e4       	ldi	r26, 0x40	; 64
    3228:	b0 e0       	ldi	r27, 0x00	; 0
    322a:	e0 e4       	ldi	r30, 0x40	; 64
    322c:	f0 e0       	ldi	r31, 0x00	; 0
    322e:	80 81       	ld	r24, Z
    3230:	8f 77       	andi	r24, 0x7F	; 127
    3232:	8c 93       	st	X, r24
	UBRRH = ubrr_value >> 8;
    3234:	e0 e4       	ldi	r30, 0x40	; 64
    3236:	f0 e0       	ldi	r31, 0x00	; 0
    3238:	8a 81       	ldd	r24, Y+2	; 0x02
    323a:	9b 81       	ldd	r25, Y+3	; 0x03
    323c:	89 2f       	mov	r24, r25
    323e:	99 27       	eor	r25, r25
    3240:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3242:	e9 e2       	ldi	r30, 0x29	; 41
    3244:	f0 e0       	ldi	r31, 0x00	; 0
    3246:	8a 81       	ldd	r24, Y+2	; 0x02
    3248:	80 83       	st	Z, r24
}
    324a:	0f 90       	pop	r0
    324c:	0f 90       	pop	r0
    324e:	0f 90       	pop	r0
    3250:	0f 90       	pop	r0
    3252:	0f 90       	pop	r0
    3254:	cf 91       	pop	r28
    3256:	df 91       	pop	r29
    3258:	08 95       	ret

0000325a <UART_sendByte>:
void UART_sendByte(uint8 a_data) {
    325a:	df 93       	push	r29
    325c:	cf 93       	push	r28
    325e:	0f 92       	push	r0
    3260:	cd b7       	in	r28, 0x3d	; 61
    3262:	de b7       	in	r29, 0x3e	; 62
    3264:	89 83       	std	Y+1, r24	; 0x01
	/* Poll until UDR register is empty*/
	while (BIT_IS_CLEAR(UCSRA, UDRE))
    3266:	eb e2       	ldi	r30, 0x2B	; 43
    3268:	f0 e0       	ldi	r31, 0x00	; 0
    326a:	80 81       	ld	r24, Z
    326c:	88 2f       	mov	r24, r24
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	80 72       	andi	r24, 0x20	; 32
    3272:	90 70       	andi	r25, 0x00	; 0
    3274:	00 97       	sbiw	r24, 0x00	; 0
    3276:	b9 f3       	breq	.-18     	; 0x3266 <UART_sendByte+0xc>
		;

	/* Send data */
	UDR = a_data;
    3278:	ec e2       	ldi	r30, 0x2C	; 44
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	89 81       	ldd	r24, Y+1	; 0x01
    327e:	80 83       	st	Z, r24
}
    3280:	0f 90       	pop	r0
    3282:	cf 91       	pop	r28
    3284:	df 91       	pop	r29
    3286:	08 95       	ret

00003288 <UART_receiveByte>:
uint8 UART_receiveByte(void) {
    3288:	df 93       	push	r29
    328a:	cf 93       	push	r28
    328c:	cd b7       	in	r28, 0x3d	; 61
    328e:	de b7       	in	r29, 0x3e	; 62
	/* Poll until byte is received */
	while (BIT_IS_CLEAR(UCSRA, RXC))
    3290:	eb e2       	ldi	r30, 0x2B	; 43
    3292:	f0 e0       	ldi	r31, 0x00	; 0
    3294:	80 81       	ld	r24, Z
    3296:	88 23       	and	r24, r24
    3298:	dc f7       	brge	.-10     	; 0x3290 <UART_receiveByte+0x8>
		;

	/* RXC flag is cleared once UDR register is read */
	return UDR;
    329a:	ec e2       	ldi	r30, 0x2C	; 44
    329c:	f0 e0       	ldi	r31, 0x00	; 0
    329e:	80 81       	ld	r24, Z
}
    32a0:	cf 91       	pop	r28
    32a2:	df 91       	pop	r29
    32a4:	08 95       	ret

000032a6 <UART_sendString>:

void UART_sendString(uint8 *str) {
    32a6:	df 93       	push	r29
    32a8:	cf 93       	push	r28
    32aa:	00 d0       	rcall	.+0      	; 0x32ac <UART_sendString+0x6>
    32ac:	cd b7       	in	r28, 0x3d	; 61
    32ae:	de b7       	in	r29, 0x3e	; 62
    32b0:	9a 83       	std	Y+2, r25	; 0x02
    32b2:	89 83       	std	Y+1, r24	; 0x01
    32b4:	0a c0       	rjmp	.+20     	; 0x32ca <UART_sendString+0x24>

	/* Send each byte in array until null terminator*/
	while (*str != '\0') {
		UART_sendByte(*str);
    32b6:	e9 81       	ldd	r30, Y+1	; 0x01
    32b8:	fa 81       	ldd	r31, Y+2	; 0x02
    32ba:	80 81       	ld	r24, Z
    32bc:	0e 94 2d 19 	call	0x325a	; 0x325a <UART_sendByte>
		++str;
    32c0:	89 81       	ldd	r24, Y+1	; 0x01
    32c2:	9a 81       	ldd	r25, Y+2	; 0x02
    32c4:	01 96       	adiw	r24, 0x01	; 1
    32c6:	9a 83       	std	Y+2, r25	; 0x02
    32c8:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(uint8 *str) {

	/* Send each byte in array until null terminator*/
	while (*str != '\0') {
    32ca:	e9 81       	ldd	r30, Y+1	; 0x01
    32cc:	fa 81       	ldd	r31, Y+2	; 0x02
    32ce:	80 81       	ld	r24, Z
    32d0:	88 23       	and	r24, r24
    32d2:	89 f7       	brne	.-30     	; 0x32b6 <UART_sendString+0x10>
		UART_sendByte(*str);
		++str;
	}

}
    32d4:	0f 90       	pop	r0
    32d6:	0f 90       	pop	r0
    32d8:	cf 91       	pop	r28
    32da:	df 91       	pop	r29
    32dc:	08 95       	ret

000032de <UART_receiveString>:
void UART_receiveString(uint8 *str) {
    32de:	0f 93       	push	r16
    32e0:	1f 93       	push	r17
    32e2:	df 93       	push	r29
    32e4:	cf 93       	push	r28
    32e6:	00 d0       	rcall	.+0      	; 0x32e8 <UART_receiveString+0xa>
    32e8:	0f 92       	push	r0
    32ea:	cd b7       	in	r28, 0x3d	; 61
    32ec:	de b7       	in	r29, 0x3e	; 62
    32ee:	9b 83       	std	Y+3, r25	; 0x03
    32f0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    32f2:	19 82       	std	Y+1, r1	; 0x01
	/* Receive each byte until pre-defined End of string character */
	do {
		str[i] = UART_receiveByte();
    32f4:	89 81       	ldd	r24, Y+1	; 0x01
    32f6:	28 2f       	mov	r18, r24
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	8a 81       	ldd	r24, Y+2	; 0x02
    32fc:	9b 81       	ldd	r25, Y+3	; 0x03
    32fe:	8c 01       	movw	r16, r24
    3300:	02 0f       	add	r16, r18
    3302:	13 1f       	adc	r17, r19
    3304:	0e 94 44 19 	call	0x3288	; 0x3288 <UART_receiveByte>
    3308:	f8 01       	movw	r30, r16
    330a:	80 83       	st	Z, r24
		i++;
    330c:	89 81       	ldd	r24, Y+1	; 0x01
    330e:	8f 5f       	subi	r24, 0xFF	; 255
    3310:	89 83       	std	Y+1, r24	; 0x01
	} while (str[i] != UART_EOS);
    3312:	89 81       	ldd	r24, Y+1	; 0x01
    3314:	28 2f       	mov	r18, r24
    3316:	30 e0       	ldi	r19, 0x00	; 0
    3318:	8a 81       	ldd	r24, Y+2	; 0x02
    331a:	9b 81       	ldd	r25, Y+3	; 0x03
    331c:	fc 01       	movw	r30, r24
    331e:	e2 0f       	add	r30, r18
    3320:	f3 1f       	adc	r31, r19
    3322:	80 81       	ld	r24, Z
    3324:	83 32       	cpi	r24, 0x23	; 35
    3326:	31 f7       	brne	.-52     	; 0x32f4 <UART_receiveString+0x16>
	/* Add null terminator to string*/
	str[i] = '\0';
    3328:	89 81       	ldd	r24, Y+1	; 0x01
    332a:	28 2f       	mov	r18, r24
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	8a 81       	ldd	r24, Y+2	; 0x02
    3330:	9b 81       	ldd	r25, Y+3	; 0x03
    3332:	fc 01       	movw	r30, r24
    3334:	e2 0f       	add	r30, r18
    3336:	f3 1f       	adc	r31, r19
    3338:	10 82       	st	Z, r1
}
    333a:	0f 90       	pop	r0
    333c:	0f 90       	pop	r0
    333e:	0f 90       	pop	r0
    3340:	cf 91       	pop	r28
    3342:	df 91       	pop	r29
    3344:	1f 91       	pop	r17
    3346:	0f 91       	pop	r16
    3348:	08 95       	ret

0000334a <UART_setTXCallback_Notif>:

void UART_setTXCallback_Notif(void (*a_callBackNotif_ptr)(void)) {
    334a:	df 93       	push	r29
    334c:	cf 93       	push	r28
    334e:	00 d0       	rcall	.+0      	; 0x3350 <UART_setTXCallback_Notif+0x6>
    3350:	cd b7       	in	r28, 0x3d	; 61
    3352:	de b7       	in	r29, 0x3e	; 62
    3354:	9a 83       	std	Y+2, r25	; 0x02
    3356:	89 83       	std	Y+1, r24	; 0x01
	g_UART_TXC_Callback = a_callBackNotif_ptr;
    3358:	89 81       	ldd	r24, Y+1	; 0x01
    335a:	9a 81       	ldd	r25, Y+2	; 0x02
    335c:	90 93 f6 00 	sts	0x00F6, r25
    3360:	80 93 f5 00 	sts	0x00F5, r24
}
    3364:	0f 90       	pop	r0
    3366:	0f 90       	pop	r0
    3368:	cf 91       	pop	r28
    336a:	df 91       	pop	r29
    336c:	08 95       	ret

0000336e <UART_setRXCallback_Notif>:
void UART_setRXCallback_Notif(void (*a_callBackNotif_ptr)(void)) {
    336e:	df 93       	push	r29
    3370:	cf 93       	push	r28
    3372:	00 d0       	rcall	.+0      	; 0x3374 <UART_setRXCallback_Notif+0x6>
    3374:	cd b7       	in	r28, 0x3d	; 61
    3376:	de b7       	in	r29, 0x3e	; 62
    3378:	9a 83       	std	Y+2, r25	; 0x02
    337a:	89 83       	std	Y+1, r24	; 0x01
	g_UART_RXC_Callback = a_callBackNotif_ptr;
    337c:	89 81       	ldd	r24, Y+1	; 0x01
    337e:	9a 81       	ldd	r25, Y+2	; 0x02
    3380:	90 93 f8 00 	sts	0x00F8, r25
    3384:	80 93 f7 00 	sts	0x00F7, r24
}
    3388:	0f 90       	pop	r0
    338a:	0f 90       	pop	r0
    338c:	cf 91       	pop	r28
    338e:	df 91       	pop	r29
    3390:	08 95       	ret

00003392 <UART_setUDRECallback_Notif>:
void UART_setUDRECallback_Notif(void (*a_callBackNotif_ptr)(void)) {
    3392:	df 93       	push	r29
    3394:	cf 93       	push	r28
    3396:	00 d0       	rcall	.+0      	; 0x3398 <UART_setUDRECallback_Notif+0x6>
    3398:	cd b7       	in	r28, 0x3d	; 61
    339a:	de b7       	in	r29, 0x3e	; 62
    339c:	9a 83       	std	Y+2, r25	; 0x02
    339e:	89 83       	std	Y+1, r24	; 0x01
	g_UART_UDRE_Callback = a_callBackNotif_ptr;
    33a0:	89 81       	ldd	r24, Y+1	; 0x01
    33a2:	9a 81       	ldd	r25, Y+2	; 0x02
    33a4:	90 93 fa 00 	sts	0x00FA, r25
    33a8:	80 93 f9 00 	sts	0x00F9, r24
}
    33ac:	0f 90       	pop	r0
    33ae:	0f 90       	pop	r0
    33b0:	cf 91       	pop	r28
    33b2:	df 91       	pop	r29
    33b4:	08 95       	ret

000033b6 <UART_DeInit>:
void UART_DeInit(void) {
    33b6:	df 93       	push	r29
    33b8:	cf 93       	push	r28
    33ba:	cd b7       	in	r28, 0x3d	; 61
    33bc:	de b7       	in	r29, 0x3e	; 62
	UCSRA = UCSRB = UCSRC = 0;
    33be:	2b e2       	ldi	r18, 0x2B	; 43
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	aa e2       	ldi	r26, 0x2A	; 42
    33c4:	b0 e0       	ldi	r27, 0x00	; 0
    33c6:	e0 e4       	ldi	r30, 0x40	; 64
    33c8:	f0 e0       	ldi	r31, 0x00	; 0
    33ca:	10 82       	st	Z, r1
    33cc:	80 81       	ld	r24, Z
    33ce:	8c 93       	st	X, r24
    33d0:	8c 91       	ld	r24, X
    33d2:	f9 01       	movw	r30, r18
    33d4:	80 83       	st	Z, r24

}
    33d6:	cf 91       	pop	r28
    33d8:	df 91       	pop	r29
    33da:	08 95       	ret

000033dc <__udivmodsi4>:
    33dc:	a1 e2       	ldi	r26, 0x21	; 33
    33de:	1a 2e       	mov	r1, r26
    33e0:	aa 1b       	sub	r26, r26
    33e2:	bb 1b       	sub	r27, r27
    33e4:	fd 01       	movw	r30, r26
    33e6:	0d c0       	rjmp	.+26     	; 0x3402 <__udivmodsi4_ep>

000033e8 <__udivmodsi4_loop>:
    33e8:	aa 1f       	adc	r26, r26
    33ea:	bb 1f       	adc	r27, r27
    33ec:	ee 1f       	adc	r30, r30
    33ee:	ff 1f       	adc	r31, r31
    33f0:	a2 17       	cp	r26, r18
    33f2:	b3 07       	cpc	r27, r19
    33f4:	e4 07       	cpc	r30, r20
    33f6:	f5 07       	cpc	r31, r21
    33f8:	20 f0       	brcs	.+8      	; 0x3402 <__udivmodsi4_ep>
    33fa:	a2 1b       	sub	r26, r18
    33fc:	b3 0b       	sbc	r27, r19
    33fe:	e4 0b       	sbc	r30, r20
    3400:	f5 0b       	sbc	r31, r21

00003402 <__udivmodsi4_ep>:
    3402:	66 1f       	adc	r22, r22
    3404:	77 1f       	adc	r23, r23
    3406:	88 1f       	adc	r24, r24
    3408:	99 1f       	adc	r25, r25
    340a:	1a 94       	dec	r1
    340c:	69 f7       	brne	.-38     	; 0x33e8 <__udivmodsi4_loop>
    340e:	60 95       	com	r22
    3410:	70 95       	com	r23
    3412:	80 95       	com	r24
    3414:	90 95       	com	r25
    3416:	9b 01       	movw	r18, r22
    3418:	ac 01       	movw	r20, r24
    341a:	bd 01       	movw	r22, r26
    341c:	cf 01       	movw	r24, r30
    341e:	08 95       	ret

00003420 <__prologue_saves__>:
    3420:	2f 92       	push	r2
    3422:	3f 92       	push	r3
    3424:	4f 92       	push	r4
    3426:	5f 92       	push	r5
    3428:	6f 92       	push	r6
    342a:	7f 92       	push	r7
    342c:	8f 92       	push	r8
    342e:	9f 92       	push	r9
    3430:	af 92       	push	r10
    3432:	bf 92       	push	r11
    3434:	cf 92       	push	r12
    3436:	df 92       	push	r13
    3438:	ef 92       	push	r14
    343a:	ff 92       	push	r15
    343c:	0f 93       	push	r16
    343e:	1f 93       	push	r17
    3440:	cf 93       	push	r28
    3442:	df 93       	push	r29
    3444:	cd b7       	in	r28, 0x3d	; 61
    3446:	de b7       	in	r29, 0x3e	; 62
    3448:	ca 1b       	sub	r28, r26
    344a:	db 0b       	sbc	r29, r27
    344c:	0f b6       	in	r0, 0x3f	; 63
    344e:	f8 94       	cli
    3450:	de bf       	out	0x3e, r29	; 62
    3452:	0f be       	out	0x3f, r0	; 63
    3454:	cd bf       	out	0x3d, r28	; 61
    3456:	09 94       	ijmp

00003458 <__epilogue_restores__>:
    3458:	2a 88       	ldd	r2, Y+18	; 0x12
    345a:	39 88       	ldd	r3, Y+17	; 0x11
    345c:	48 88       	ldd	r4, Y+16	; 0x10
    345e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3460:	6e 84       	ldd	r6, Y+14	; 0x0e
    3462:	7d 84       	ldd	r7, Y+13	; 0x0d
    3464:	8c 84       	ldd	r8, Y+12	; 0x0c
    3466:	9b 84       	ldd	r9, Y+11	; 0x0b
    3468:	aa 84       	ldd	r10, Y+10	; 0x0a
    346a:	b9 84       	ldd	r11, Y+9	; 0x09
    346c:	c8 84       	ldd	r12, Y+8	; 0x08
    346e:	df 80       	ldd	r13, Y+7	; 0x07
    3470:	ee 80       	ldd	r14, Y+6	; 0x06
    3472:	fd 80       	ldd	r15, Y+5	; 0x05
    3474:	0c 81       	ldd	r16, Y+4	; 0x04
    3476:	1b 81       	ldd	r17, Y+3	; 0x03
    3478:	aa 81       	ldd	r26, Y+2	; 0x02
    347a:	b9 81       	ldd	r27, Y+1	; 0x01
    347c:	ce 0f       	add	r28, r30
    347e:	d1 1d       	adc	r29, r1
    3480:	0f b6       	in	r0, 0x3f	; 63
    3482:	f8 94       	cli
    3484:	de bf       	out	0x3e, r29	; 62
    3486:	0f be       	out	0x3f, r0	; 63
    3488:	cd bf       	out	0x3d, r28	; 61
    348a:	ed 01       	movw	r28, r26
    348c:	08 95       	ret

0000348e <itoa>:
    348e:	fb 01       	movw	r30, r22
    3490:	9f 01       	movw	r18, r30
    3492:	e8 94       	clt
    3494:	42 30       	cpi	r20, 0x02	; 2
    3496:	c4 f0       	brlt	.+48     	; 0x34c8 <itoa+0x3a>
    3498:	45 32       	cpi	r20, 0x25	; 37
    349a:	b4 f4       	brge	.+44     	; 0x34c8 <itoa+0x3a>
    349c:	4a 30       	cpi	r20, 0x0A	; 10
    349e:	29 f4       	brne	.+10     	; 0x34aa <itoa+0x1c>
    34a0:	97 fb       	bst	r25, 7
    34a2:	1e f4       	brtc	.+6      	; 0x34aa <itoa+0x1c>
    34a4:	90 95       	com	r25
    34a6:	81 95       	neg	r24
    34a8:	9f 4f       	sbci	r25, 0xFF	; 255
    34aa:	64 2f       	mov	r22, r20
    34ac:	77 27       	eor	r23, r23
    34ae:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__udivmodhi4>
    34b2:	80 5d       	subi	r24, 0xD0	; 208
    34b4:	8a 33       	cpi	r24, 0x3A	; 58
    34b6:	0c f0       	brlt	.+2      	; 0x34ba <itoa+0x2c>
    34b8:	89 5d       	subi	r24, 0xD9	; 217
    34ba:	81 93       	st	Z+, r24
    34bc:	cb 01       	movw	r24, r22
    34be:	00 97       	sbiw	r24, 0x00	; 0
    34c0:	a1 f7       	brne	.-24     	; 0x34aa <itoa+0x1c>
    34c2:	16 f4       	brtc	.+4      	; 0x34c8 <itoa+0x3a>
    34c4:	5d e2       	ldi	r21, 0x2D	; 45
    34c6:	51 93       	st	Z+, r21
    34c8:	10 82       	st	Z, r1
    34ca:	c9 01       	movw	r24, r18
    34cc:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <strrev>

000034d0 <strrev>:
    34d0:	dc 01       	movw	r26, r24
    34d2:	fc 01       	movw	r30, r24
    34d4:	67 2f       	mov	r22, r23
    34d6:	71 91       	ld	r23, Z+
    34d8:	77 23       	and	r23, r23
    34da:	e1 f7       	brne	.-8      	; 0x34d4 <strrev+0x4>
    34dc:	32 97       	sbiw	r30, 0x02	; 2
    34de:	04 c0       	rjmp	.+8      	; 0x34e8 <strrev+0x18>
    34e0:	7c 91       	ld	r23, X
    34e2:	6d 93       	st	X+, r22
    34e4:	70 83       	st	Z, r23
    34e6:	62 91       	ld	r22, -Z
    34e8:	ae 17       	cp	r26, r30
    34ea:	bf 07       	cpc	r27, r31
    34ec:	c8 f3       	brcs	.-14     	; 0x34e0 <strrev+0x10>
    34ee:	08 95       	ret

000034f0 <__udivmodhi4>:
    34f0:	aa 1b       	sub	r26, r26
    34f2:	bb 1b       	sub	r27, r27
    34f4:	51 e1       	ldi	r21, 0x11	; 17
    34f6:	07 c0       	rjmp	.+14     	; 0x3506 <__udivmodhi4_ep>

000034f8 <__udivmodhi4_loop>:
    34f8:	aa 1f       	adc	r26, r26
    34fa:	bb 1f       	adc	r27, r27
    34fc:	a6 17       	cp	r26, r22
    34fe:	b7 07       	cpc	r27, r23
    3500:	10 f0       	brcs	.+4      	; 0x3506 <__udivmodhi4_ep>
    3502:	a6 1b       	sub	r26, r22
    3504:	b7 0b       	sbc	r27, r23

00003506 <__udivmodhi4_ep>:
    3506:	88 1f       	adc	r24, r24
    3508:	99 1f       	adc	r25, r25
    350a:	5a 95       	dec	r21
    350c:	a9 f7       	brne	.-22     	; 0x34f8 <__udivmodhi4_loop>
    350e:	80 95       	com	r24
    3510:	90 95       	com	r25
    3512:	bc 01       	movw	r22, r24
    3514:	cd 01       	movw	r24, r26
    3516:	08 95       	ret

00003518 <_exit>:
    3518:	f8 94       	cli

0000351a <__stop_program>:
    351a:	ff cf       	rjmp	.-2      	; 0x351a <__stop_program>
